( function _PathTools_test_s_()
{

'use strict';

if( typeof module !== 'undefined' )
{

  const _ = require( '../../../node_modules/Tools' );
  _.include( 'wTesting' );
  require( '../l5/PathTools.s' );

}

const _global = _global_;
const _ = _global_.wTools;
var o =
{
  fileProvider : _.fileProvider,
  filter : null
};

// --
// path map
// --

function filterPairs( test )
{
  test.open( 'instance' );

  function constructor ( val )
  {
    this.value = val;
    return this;
  }
  var obj = new constructor;

  test.case = 'double';
  var src = { '/path' : obj };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, double );
  var expected =
  {
    '/path/path' : obj,
    '/path' : obj
  };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'srcOnly1';
  var src = { '/path' : obj };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly1 );
  var expected = '/path';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'srcOnly2';
  var src = { '/path' : obj };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly2 );
  var expected = { '/path' : obj };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'srcOnly3';
  var src = { '/path' : obj };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly3 );
  var expected = { '/path' : obj };
  test.identical( src, src2 );
  test.identical( got, expected );

  var src = { '/path' : [ obj, obj ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly3 );
  var expected = { '/path' : obj };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'dstOnly';
  var src = { '/path' : obj };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, dstOnly );
  var expected = { '' : obj };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'dstDouble';
  var src = { '/path' : obj };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, dstDouble );
  var expected = { '' : obj };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'nothing1';
  var src = { '/path' : obj };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'nothing2';
  var src = { '/path' : obj };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'nothing3';
  var src = { '/path' : obj };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'nothing4';
  var src = { '/path' : obj };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'instance' );

  /* - */

  test.open( 'double' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, double );
  var expected = [ '/a/b/a/b', '/a/b' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, double );
  var expected = [ '/a/b/a/b', '/a/b' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, double );
  var expected = [ '/a/b/a/b', '/a/b', '/cd/cd', '/cd' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, double );
  var expected = [ '/a/b/a/b', '/a/b', '/c/d/c/d', '/c/d' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, double );
  var expected = { '/src/src' : 'dstdst', '/src' : 'dst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, double );
  var expected = [ '/src/src', '/src' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, double );
  var expected = { '/src/src' : 'dstdst', '/src' : 'dst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, double );
  var expected = { '/src/src' : [ 'dst1dst1', 'dst2dst2' ], '/src' : [ 'dst1', 'dst2' ] };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, double );
  var expected = { '' : [ 'dstdst', 'dst' ] };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, double );
  var expected = { '' : [ 'dstdst', 'dst' ] };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, double );
  var expected = { '' : [ 'dst1dst1', 'dst1', 'dst2dst2', 'dst2' ] };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, double );
  var expected = [ '/src/src', '/src' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'double' );

  /* - */

  test.open( 'srcOnly1' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly1 );
  var expected = '/a/b';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly1 );
  var expected = '/a/b';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly1 );
  var expected = [ '/a/b', '/cd' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly1 );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly1 );
  var expected = '/src';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly1 );
  var expected = '/src';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly1 );
  var expected = '/src';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly1 );
  var expected = '/src';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly1 );
  var expected = '/src';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'srcOnly1' );

  /* - */

  test.open( 'srcOnly2' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly2 );
  var expected = '/a/b';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly2 );
  var expected = '/a/b';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly2 );
  var expected = [ '/a/b', '/cd' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly2 );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly2 );
  var expected = { '/src' : 'dst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly2 );
  var expected = '/src';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly2 );
  var expected = { '/src' : 'dst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly2 );
  var expected = { '/src' : [ 'dst1', 'dst2' ] };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly2 );
  var expected = '/src';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'srcOnly2' );

  /* - */

  test.open( 'srcOnly3' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly3 );
  var expected = '/a/b';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly3 );
  var expected = '/a/b';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly3 );
  var expected = [ '/a/b', '/cd' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly3 );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly3 );
  var expected = { '/src' : 'dst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly3 );
  var expected = '/src';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly3 );
  var expected = { '/src' : 'dst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly3 );
  var expected = { '/src' : [ 'dst1', 'dst2' ] };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly3 );
  var expected = '/src';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'srcOnly3' );

  /* - */

  test.open( 'dstOnly' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, dstOnly );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, dstOnly );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, dstOnly );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, dstOnly );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, dstOnly );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, dstOnly );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, dstOnly );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, dstOnly );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, dstOnly );
  var expected = { '' : 'dst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, dstOnly );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, dstOnly );
  var expected = { '' : 'dst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, dstOnly );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, dstOnly );
  var expected = { '' : 'dst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, dstOnly );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, dstOnly );
  var expected = { '' : 'dst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, dstOnly );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, dstOnly );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'dstOnly' );

  /* - */

  test.open( 'dstDouble' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, dstDouble );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, dstDouble );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, dstDouble );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, dstDouble );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, dstDouble );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, dstDouble );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, dstDouble );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, dstDouble );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, dstDouble );
  var expected = { '' : 'dst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, dstDouble );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, dstDouble );
  var expected = { '' : 'dst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, dstDouble );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, dstDouble );
  var expected = { '' : 'dst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, dstDouble );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, dstDouble );
  var expected = { '' : 'dst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, dstDouble );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, dstDouble );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'dstDouble' );

  /* - */

  test.open( 'returns self' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterPairs( src, returnSelf );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterPairs( src, returnSelf );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterPairs( src, returnSelf );
  var expected = '/a/b';
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterPairs( src, returnSelf );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterPairs( src, returnSelf );
  var expected = '/a/b';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairs( src, returnSelf );
  var expected = [ '/a/b', '/cd' ];
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairs( src, returnSelf );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterPairs( src, returnSelf );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairs( src, returnSelf );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterPairs( src, returnSelf );
  var expected = '/src';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairs( src, returnSelf );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs( src, returnSelf );
  var expected = { '/src' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterPairs( src, returnSelf );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterPairs( src, returnSelf );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairs( src, returnSelf );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs( src, returnSelf );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterPairs( src, returnSelf );
  var expected = '/src';
  test.identical( got, expected );
  test.true( got !== src );

  test.close( 'returns self' );

  /* - */

  test.open( 'returns self with array' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterPairs( src, arrayInSelf );
  var expected = '1';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterPairs( src, arrayInSelf );
  var expected = '1';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterPairs( src, arrayInSelf );
  var expected = [ '/a/b', '/a/b1' ];
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterPairs( src, arrayInSelf );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterPairs( src, arrayInSelf );
  var expected = [ '/a/b', '/a/b1' ];
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairs( src, arrayInSelf );
  var expected = [ '/a/b', '/a/b1', '/cd', '/cd1' ];
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairs( src, arrayInSelf );
  var expected = [ '/a/b', '/a/b1', '/c/d', '/c/d1' ];
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterPairs( src, arrayInSelf );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairs( src, arrayInSelf );
  var expected = { '/src' : 'dst', '/src1' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterPairs( src, arrayInSelf );
  var expected = [ '/src', '/src1' ];
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairs( src, arrayInSelf );
  var expected = { '/src' : 'dst', '/src1' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs( src, arrayInSelf );
  var expected = { '/src' : [ 'dst1', 'dst2' ], '/src1' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterPairs( src, arrayInSelf );
  var expected = { '' : 'dst', '1' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterPairs( src, arrayInSelf );
  var expected = '1';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairs( src, arrayInSelf );
  var expected = { '' : 'dst', '1' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs( src, arrayInSelf );
  var expected = { '' : [ 'dst1', 'dst2' ], '1' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterPairs( src, arrayInSelf );
  var expected = [ '/src', '/src1' ];
  test.identical( got, expected );
  test.true( got !== src );

  test.close( 'returns self with array' );

  /* - */

  test.open( 'nothing1' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'nothing1' );

  /* - */

  test.open( 'nothing2' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'nothing2' );

  /* - */

  test.open( 'nothing3' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'nothing3' );

  /* - */

  test.open( 'nothing4' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'nothing4' );

  /* - */

  test.open( 'complex map' );

  var src =
  {
    '/true' : true,
    '/false' : false,
    '/string1' : '/dir1',
    '/string2' : '',
    '/null' : null,
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '' : [ '' ],
    '/emptyArray' : [],
  };

  test.case = 'double';
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, double );
  var expected =
  {
    '/true/true' : true,
    '/true' : true,
    '/false/false' : false,
    '/false' : false,
    '/string1/string1' : '/dir1/dir1',
    '/string1' : '/dir1',
    '/string2/string2' : '',
    '/string2' : '',
    '/null/null' : '',
    '/null' : '',
    'nullnull' : '/dir3/dir3',
    'null' : '/dir3',
    '/array/array' : [ '/dir1/dir1', '/dir2/dir2' ],
    '/array' : [ '/dir1', '/dir2' ],
    '/emptyArray/emptyArray' : '',
    '/emptyArray' : ''
  };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'srcOnly1';
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly1 );
  var expected = [ '/true', '/false', '/string1', '/string2', '/null', 'null', '/array', '/emptyArray' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'srcOnly2';
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly2 );
  var expected =
  {
    '/true' : true,
    '/false' : false,
    '/string1' : '/dir1',
    '/string2' : '',
    '/null' : '',
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '/emptyArray' : ''
  };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'srcOnly3';
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, srcOnly3 );
  var expected =
  {
    '/true' : true,
    '/false' : false,
    '/string1' : '/dir1',
    '/string2' : '',
    '/null' : '',
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '/emptyArray' : ''
  };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'dstOnly';
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, dstOnly );
  var expected =
  {
    '' : [ '/dir1', '/dir3', '/dir2' ]
  };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'dstDouble';
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, dstDouble );
  var expected =
  {
    '' : [ '/dir1', '/dir3', '/dir2' ]
  };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'nothing1';
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'nothing2';
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'nothing3'
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'nothing4'
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'complex map' );

  /* - */

  test.case = 'duplicates';
  var src = { '' : [ '/b', null, null, '', '', '/b' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, duplicates );
  var expected = { '' : '/b' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates, onEach return array';
  var src = [ '/b', null, null, '', '', '/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, ( it ) => [ it.src, '/file', '/dst', '', null, '', null, undefined ] );
  var expected = [ '/b', '/file', '/dst' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates, onEach return array';
  var src = { 'dir' : [ '/b', null, null, '', '', '/b' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, ( it ) => [ it.src, '/file', '/dst', '', null, '', null, undefined ] );
  var expected = { 'dir' : '/b', '/file' : '/b', '/dst' : '/b' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates';
  var src = { '/dir1' : '/dir2', '/a' : '/b' };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, duplicates );
  var expected = { '/dir1' : '/dir2', '/a' : '/b' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in map';
  var src = { '/dir1' : '/dir2', '/a' : '/b', '/empty' : '', '' : '/file', '/null' : null };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, duplicates );
  var expected = { '/dir1' : '/dir2', '/a' : '/b', '/empty' : '', '' : '/file', '/null' : '' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in map';
  var src = { '/dir1' : '/dir2', '/a' : '/b', '/empty' : '', '/null' : null };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, duplicates );
  var expected = { '/dir1' : '/dir2', '/a' : '/b', '/empty' : '', '/null' : '' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/dir1', '/a', null, '', '', null ];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, duplicates2 );
  var expected = [ '1', '/dir1', '/dir11', '/a', '/a1' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  /* - */

  test.case = 'boolean values';
  var src = [ '/dir1', true, null, '', '', null ];
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, duplicates2 );
  var expected = [ '1', '/dir1', '/dir11' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'boolean values';
  var src = { '/dir' : true, '/a' : null, '/b' : '', '' : null };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, duplicates );
  var expected = { '/dir' : true, '/a' : '', '/b' : '' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'boolean in callback, bool and null values in src';
  var src = { '/dir' : true, '/a' : null, '/b' : '', '' : null };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, bool );
  var expected = { '/dir' : true, '/a' : true, '/b' : true, '' : true };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'boolean in callback, str value in src';
  var src = { '/dir' : false, '/a' : '/dir', '/b' : '', '' : null };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, bool );
  var expected = { '/dir' : true, '/a' : true, '/b' : true, '' : true };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'boolean in callback, bool and null values in src';
  var src = { '/dir' : true, '/a' : null, '/b' : '', '' : null };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, bool2 );
  var expected = { '/dir' : false, '/a' : false, '/b' : false, '' : false };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'boolean in callback, str value in src';
  var src = { '/dir' : false, '/a' : '/dir', '/b' : '', '' : null };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, bool2 );
  var expected = { '/dir' : false, '/a' : false, '/b' : false, '' : false };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'boolean in callback, str value in src';
  var src = { '/dir' : true, '/a' : false, '/b' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs( src, uncorrectMap );
  var expected = { '/dir' : '/dst', '/a' : false, '/b' : false };
  test.identical( src, src2 );
  test.identical( got, expected );

  /* - */

  if( Config.debug )
  {
    test.open( 'throwing' );

    test.case = 'without arguments';
    test.shouldThrowErrorSync( () => _.path.filterPairs() );

    test.case = 'extra arguments';
    test.shouldThrowErrorSync( () => _.path.filterPairs( '/src', double, nothing1 ) );

    test.case = 'onEach is not a routine';
    test.shouldThrowErrorSync( () => _.path.filterPairs( '/src', [ double ] ) );

    test.case = 'wrong type of filePath';
    test.shouldThrowErrorSync( () => _.path.filterPairs( 1, double ) );
    test.shouldThrowErrorSync( () => _.path.filterPairs( { '/path' : {} }, double ) );
    test.shouldThrowErrorSync( () => _.path.filterPairs( { '/path' : undefined }, double ) );

    test.case = 'wrong type of onEach';
    test.shouldThrowErrorSync( () => _.path.filterPairs( '/path', '/path' ) );

    test.close( 'throwing' );
  }

  /*  */

  /*
    qqq : use all callbacks in the test routine
    Dmytro : all callbacks is used
  */

  function duplicates2( it )
  {
    return [ it.src, it.src, it.src + 1, '', '', null ];
  }

  function duplicates( it )
  {
    return { [ it.src ] : [ it.dst, it.dst, it.dst, '', '', null ] };
  }

  function bool( it )
  {
    return { [ it.src ] : true };
  }

  function bool2( it )
  {
    return { [ it.src ] : false };
  }

  function uncorrectMap( it )
  {
    if( it.dst === true )
    return { [ it.src ] : [ true, false, '', null, true, false, '', null, '/dst', true ] };
    if( it.dst === false )
    return { [ it.src ] : [ true, false, '', null, true, false, '', null, '/dst', false ] };
    else
    return { [ it.src ] : [ true, false, '', null, true, false, '', null, '/dst', true, false ] };
  }

  function double( it )
  {
    if( it.src === null )
    _.assert( 0 );
    if( it.src === '' )
    return { [ it.src ] : [ it.dst + it.dst, it.dst ] };
    else
    return { [ it.src + it.src ] : _.strIs( it.dst ) ? it.dst + it.dst : it.dst, [ it.src ] : it.dst };
  }

  function srcOnly1( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return { [ it.src ] : '' };
  }

  function srcOnly2( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return it.src;
  }

  function srcOnly3( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return [ it.src ];
  }

  function dstOnly( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return { '' : it.dst };
  }

  function dstDouble( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return { '' : [ it.dst, it.dst ] };
  }

  function nothing1( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return {};
  }

  function nothing2( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return [];
  }

  function nothing3( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return '';
  }

  function nothing4( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return null;
  }

  function returnSelf( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return it;
  }

  function arrayInSelf( it )
  {
    if( it.src === null )
    _.assert( 0 );
    it.src = [ it.src, it.src + 1 ];
    return it;
  }

}

//

function filterDstPairs( test )
{
  test.open( 'instance' );

  function constructor ( val )
  {
    this.value = val;
    return this;
  }
  var obj = new constructor;

  test.case = 'double';
  var src = { '/path' : obj };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, double );
  var expected =
  {
    '/path/path' : obj,
    '/path' : obj
  };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'srcOnly1';
  var src = { '/path' : obj };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly1 );
  var expected = '/path';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'srcOnly2';
  var src = { '/path' : obj };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly2 );
  var expected = { '/path' : obj };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'srcOnly3';
  var src = { '/path' : obj };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly3 );
  var expected = { '/path' : obj };
  test.identical( src, src2 );
  test.identical( got, expected );

  var src = { '/path' : [ obj, obj ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly3 );
  var expected = { '/path' : obj };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'dstOnly';
  var src = { '/path' : obj };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, dstOnly );
  var expected = { '' : obj };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'dstDouble';
  var src = { '/path' : obj };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, dstDouble );
  var expected = { '' : obj };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'nothing1';
  var src = { '/path' : obj };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'nothing2';
  var src = { '/path' : obj };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'nothing3';
  var src = { '/path' : obj };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'nothing4';
  var src = { '/path' : obj };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'instance' );

  /* - */

  test.open( 'double' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, double );
  var expected = [ '/a/b/a/b', '/a/b' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, double );
  var expected = [ '/a/b/a/b', '/a/b' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, double );
  var expected = [ '/a/b/a/b', '/a/b', '/cd/cd', '/cd' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, double );
  var expected = [ '/a/b/a/b', '/a/b', '/c/d/c/d', '/c/d' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, double );
  var expected = { '/src/src' : 'dstdst', '/src' : 'dst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, double );
  var expected = [ '/src/src', '/src' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, double );
  var expected = { '/src/src' : 'dstdst', '/src' : 'dst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, double );
  var expected = { '/src/src' : [ 'dst1dst1', 'dst2dst2' ], '/src' : [ 'dst1', 'dst2' ] };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, double );
  var expected = { '' : [ 'dstdst', 'dst' ] };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, double );
  var expected = { '' : [ 'dstdst', 'dst' ] };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, double );
  var expected = { '' : [ 'dst1dst1', 'dst1', 'dst2dst2', 'dst2' ] };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, double );
  var expected = [ '/src/src', '/src' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'double' );

  /* - */

  test.open( 'srcOnly1' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly1 );
  var expected = '/src';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly1 );
  var expected = '/src';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly1 );
  var expected = '/src';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly1 );
  var expected = '/src';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly1 );
  var expected = '/src';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'srcOnly1' );

  /* - */

  test.open( 'srcOnly2' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly2 );
  var expected = { '/src' : 'dst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly2 );
  var expected = '/src';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly2 );
  var expected = { '/src' : 'dst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly2 );
  var expected = { '/src' : [ 'dst1', 'dst2' ] };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly2 );
  var expected = '/src';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'srcOnly2' );

  /* - */

  test.open( 'srcOnly3' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly3 );
  var expected = { '/src' : 'dst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly3 );
  var expected = '/src';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly3 );
  var expected = { '/src' : 'dst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly3 );
  var expected = { '/src' : [ 'dst1', 'dst2' ] };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly3 );
  var expected = '/src';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'srcOnly3' );

  /* - */

  test.open( 'dstOnly' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, dstOnly );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, dstOnly );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, dstOnly );
  var expected = '/a/b';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, dstOnly );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, dstOnly );
  var expected = '/a/b';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, dstOnly );
  var expected = [ '/a/b', '/cd' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, dstOnly );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, dstOnly );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, dstOnly );
  var expected = { '' : 'dst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, dstOnly );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, dstOnly );
  var expected = { '' : 'dst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, dstOnly );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, dstOnly );
  var expected = { '' : 'dst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, dstOnly );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, dstOnly );
  var expected = { '' : 'dst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, dstOnly );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, dstOnly );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'dstOnly' );

  /* - */

  test.open( 'dstDouble' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, dstDouble );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, dstDouble );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, dstDouble );
  var expected = '/a/b';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, dstDouble );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, dstDouble );
  var expected = '/a/b';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, dstDouble );
  var expected = [ '/a/b', '/cd' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, dstDouble );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, dstDouble );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, dstDouble );
  var expected = { '' : 'dst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, dstDouble );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, dstDouble );
  var expected = { '' : 'dst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, dstDouble );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, dstDouble );
  var expected = { '' : 'dst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, dstDouble );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, dstDouble );
  var expected = { '' : 'dst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, dstDouble );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, dstDouble );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'dstDouble' );

  /* - */

  test.open( 'returns self' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDstPairs( src, returnSelf );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDstPairs( src, returnSelf );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDstPairs( src, returnSelf );
  var expected = '/a/b';
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDstPairs( src, returnSelf );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairs( src, returnSelf );
  var expected = '/a/b';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairs( src, returnSelf );
  var expected = [ '/a/b', '/cd' ];
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairs( src, returnSelf );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstPairs( src, returnSelf );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairs( src, returnSelf );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstPairs( src, returnSelf );
  var expected = '/src';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairs( src, returnSelf );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs( src, returnSelf );
  var expected = { '/src' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairs( src, returnSelf );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairs( src, returnSelf );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairs( src, returnSelf );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs( src, returnSelf );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstPairs( src, returnSelf );
  var expected = '/src';
  test.identical( got, expected );
  test.true( got !== src );

  test.close( 'returns self' );

  /* - */

  test.open( 'returns self with array' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDstPairs( src, arrayInSelf );
  var expected = '1';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDstPairs( src, arrayInSelf );
  var expected = '1';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDstPairs( src, arrayInSelf );
  var expected = { '1' : '/a/b', '' : '/a/b' };
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDstPairs( src, arrayInSelf );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairs( src, arrayInSelf );
  var expected = { '1' : '/a/b', '' : '/a/b' };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairs( src, arrayInSelf );
  var expected = { '1' : [ '/a/b', '/cd' ], '' : [ '/a/b', '/cd' ] };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairs( src, arrayInSelf );
  var expected = { '1' : [ '/a/b', '/c/d' ], '' : [ '/a/b', '/c/d' ] };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstPairs( src, arrayInSelf );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairs( src, arrayInSelf );
  var expected = { '/src' : 'dst', '/src1' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstPairs( src, arrayInSelf );
  var expected = [ '/src', '/src1' ];
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairs( src, arrayInSelf );
  var expected = { '/src' : 'dst', '/src1' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs( src, arrayInSelf );
  var expected = { '/src' : [ 'dst1', 'dst2' ], '/src1' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairs( src, arrayInSelf );
  var expected = { '' : 'dst', '1' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairs( src, arrayInSelf );
  var expected = '1';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairs( src, arrayInSelf );
  var expected = { '' : 'dst', '1' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs( src, arrayInSelf );
  var expected = { '' : [ 'dst1', 'dst2' ], '1' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstPairs( src, arrayInSelf );
  var expected = [ '/src', '/src1' ];
  test.identical( got, expected );
  test.true( got !== src );

  test.close( 'returns self with array' );

  /* - */

  test.open( 'nothing1' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'nothing1' );

  /* - */

  test.open( 'nothing2' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'nothing2' );

  /* - */

  test.open( 'nothing3' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'nothing3' );

  /* - */

  test.open( 'nothing4' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'nothing4' );

  /* - */

  test.open( 'complex map' );

  var src =
  {
    '/true' : true,
    '/false' : false,
    '/string1' : '/dir1',
    '/string2' : '',
    '/null' : null,
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '' : [ '' ],
    '/emptyArray' : [],
  };

  test.case = 'double';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, double );
  var expected =
  {
    '/true/true' : true,
    '/true' : true,
    '/false/false' : false,
    '/false' : false,
    '/string1/string1' : '/dir1/dir1',
    '/string1' : '/dir1',
    '/string2/string2' : '',
    '/string2' : '',
    '/null/null' : '',
    '/null' : '',
    'nullnull' : '/dir3/dir3',
    'null' : '/dir3',
    '/array/array' : [ '/dir1/dir1', '/dir2/dir2' ],
    '/array' : [ '/dir1', '/dir2' ],
    '/emptyArray/emptyArray' : '',
    '/emptyArray' : ''
  };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'srcOnly1';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly1 );
  var expected = [ '/true', '/false', '/string1', '/string2', '/null', 'null', '/array', '/emptyArray' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'srcOnly2';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly2 );
  var expected =
  {
    '/true' : true,
    '/false' : false,
    '/string1' : '/dir1',
    '/string2' : '',
    '/null' : '',
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '/emptyArray' : ''
  };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'srcOnly3';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, srcOnly3 );
  var expected =
  {
    '/true' : true,
    '/false' : false,
    '/string1' : '/dir1',
    '/string2' : '',
    '/null' : '',
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '/emptyArray' : ''
  };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'dstOnly';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, dstOnly );
  var expected =
  {
    '' : [ '/dir1', '/dir3', '/dir2' ]
  };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'dstDouble';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, dstDouble );
  var expected =
  {
    '' : [ '/dir1', '/dir3', '/dir2' ]
  };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'nothing1';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'nothing2';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'nothing3'
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'nothing4'
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'complex map' );

  /* - */

  test.case = 'duplicates';
  var src = { '' : [ '/b', null, null, '', '', '/b' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, duplicates );
  var expected = { '' : '/b' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates, onEach return array';
  var src = [ '/b', null, null, '', '', '/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, ( it ) => [ it.src, '/file', '/dst', '', null, '', null, undefined ] );
  var expected = { '/file' : '/b', '/dst' : '/b' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates, onEach return array';
  var src = { 'dir' : [ '/b', null, null, '', '', '/b' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, ( it ) => [ it.src, '/file', '/dst', '', null, '', null, undefined ] );
  var expected = { 'dir' : '/b', '/file' : '/b', '/dst' : '/b' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates';
  var src = { '/dir1' : '/dir2', '/a' : '/b' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, duplicates );
  var expected = { '/dir1' : '/dir2', '/a' : '/b' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in map';
  var src = { '/dir1' : '/dir2', '/a' : '/b', '/empty' : '', '' : '/file', '/null' : null };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, duplicates );
  var expected = { '/dir1' : '/dir2', '/a' : '/b', '/empty' : '', '' : '/file', '/null' : '' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in map';
  var src = { '/dir1' : '/dir2', '/a' : '/b', '/empty' : '', '/null' : null };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, duplicates );
  var expected = { '/dir1' : '/dir2', '/a' : '/b', '/empty' : '', '/null' : '' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/dir1', '/a', null, '', '', null ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, duplicates2 );
  var expected = { '1' : [ '/dir1', '/a' ] };
  test.identical( src, src2 );
  test.identical( got, expected );

  /* - */

  test.case = 'boolean values';
  var src = [ '/dir1', true, null, '', '', null ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, duplicates2 );
  var expected = { '1' : '/dir1' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'boolean values';
  var src = { '/dir' : true, '/a' : null, '/b' : '', '' : null };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, duplicates );
  var expected = { '/dir' : true, '/a' : '', '/b' : '' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'boolean in callback, bool and null values in src';
  var src = { '/dir' : true, '/a' : null, '/b' : '', '' : null };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, bool );
  var expected = { '/dir' : true, '/a' : true, '/b' : true, '' : true };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'boolean in callback, str value in src';
  var src = { '/dir' : false, '/a' : '/dir', '/b' : '', '' : null };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, bool );
  var expected = { '/dir' : true, '/a' : true, '/b' : true, '' : true };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'boolean in callback, bool and null values in src';
  var src = { '/dir' : true, '/a' : null, '/b' : '', '' : null };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, bool2 );
  var expected = { '/dir' : false, '/a' : false, '/b' : false, '' : false };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'boolean in callback, str value in src';
  var src = { '/dir' : false, '/a' : '/dir', '/b' : '', '' : null };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, bool2 );
  var expected = { '/dir' : false, '/a' : false, '/b' : false, '' : false };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'boolean in callback, str value in src';
  var src = { '/dir' : true, '/a' : false, '/b' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs( src, uncorrectMap );
  var expected = { '/dir' : '/dst', '/a' : false, '/b' : false };
  test.identical( src, src2 );
  test.identical( got, expected );

  /* - */

  if( Config.debug )
  {
    test.open( 'throwing' );

    test.case = 'without arguments';
    test.shouldThrowErrorSync( () => _.path.filterDstPairs() );

    test.case = 'extra arguments';
    test.shouldThrowErrorSync( () => _.path.filterDstPairs( '/src', double, nothing1 ) );

    test.case = 'onEach is not a routine';
    test.shouldThrowErrorSync( () => _.path.filterDstPairs( '/src', [ double ] ) );

    test.case = 'wrong type of filePath';
    test.shouldThrowErrorSync( () => _.path.filterDstPairs( 1, double ) );
    test.shouldThrowErrorSync( () => _.path.filterDstPairs( { '/path' : {} }, double ) );
    test.shouldThrowErrorSync( () => _.path.filterDstPairs( { '/path' : undefined }, double ) );

    test.case = 'wrong type of onEach';
    test.shouldThrowErrorSync( () => _.path.filterDstPairs( '/path', '/path' ) );

    test.close( 'throwing' );
  }

  /*  */

  /*
    qqq : use all callbacks in the test routine
    Dmytro : all callbacks is used
  */

  function duplicates2( it )
  {
    return [ it.src, it.src, it.src + 1, '', '', null ];
  }

  function duplicates( it )
  {
    return { [ it.src ] : [ it.dst, it.dst, it.dst, '', '', null ] };
  }

  function bool( it )
  {
    return { [ it.src ] : true };
  }

  function bool2( it )
  {
    return { [ it.src ] : false };
  }

  function uncorrectMap( it )
  {
    if( it.dst === true )
    return { [ it.src ] : [ true, false, '', null, true, false, '', null, '/dst', true ] };
    if( it.dst === false )
    return { [ it.src ] : [ true, false, '', null, true, false, '', null, '/dst', false ] };
    else
    return { [ it.src ] : [ true, false, '', null, true, false, '', null, '/dst', true, false ] };
  }

  function double( it )
  {
    if( it.src === null )
    _.assert( 0 );
    if( it.src === '' )
    return { [ it.src ] : [ it.dst + it.dst, it.dst ] };
    else
    return { [ it.src + it.src ] : _.strIs( it.dst ) ? it.dst + it.dst : it.dst, [ it.src ] : it.dst };
  }

  function srcOnly1( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return { [ it.src ] : '' };
  }

  function srcOnly2( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return it.src;
  }

  function srcOnly3( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return [ it.src ];
  }

  function dstOnly( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return { '' : it.dst };
  }

  function dstDouble( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return { '' : [ it.dst, it.dst ] };
  }

  function nothing1( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return {};
  }

  function nothing2( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return [];
  }

  function nothing3( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return '';
  }

  function nothing4( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return null;
  }

  function returnSelf( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return it;
  }

  function arrayInSelf( it )
  {
    if( it.src === null )
    _.assert( 0 );
    it.src = [ it.src, it.src + 1 ];
    return it;
  }

}

//

function filterPairsInplace( test )
{
  test.open( 'instance' );

  function constructor( val )
  {
    this.value = val;
    return this;
  }
  var obj = new constructor;

  test.case = 'double';
  var src = { '/path' : obj };
  var got = _.path.filterPairsInplace( src, double );
  var expected =
  {
    '/path/path' : obj,
    '/path' : obj
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly1';
  var src = { '/path' : obj };
  var got = _.path.filterPairsInplace( src, srcOnly1 );
  var expected = { '/path' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly2';
  var src = { '/path' : obj };
  var got = _.path.filterPairsInplace( src, srcOnly2 );
  var expected = { '/path' : obj };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly3';
  var src = { '/path' : obj };
  var got = _.path.filterPairsInplace( src, srcOnly3 );
  var expected = { '/path' : obj };
  test.identical( got, expected );
  test.true( got === src );

  var src = { '/path' : [ obj, obj ] };
  var got = _.path.filterPairsInplace( src, srcOnly3 );
  var expected = { '/path' : obj };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'dstOnly';
  var src = { '/path' : obj };
  var got = _.path.filterPairsInplace( src, dstOnly );
  var expected = { '' : obj };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'dstDouble';
  var src = { '/path' : obj };
  var got = _.path.filterPairsInplace( src, dstDouble );
  var expected = { '' : obj };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing1';
  var src = { '/path' : obj };
  var got = _.path.filterPairsInplace( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing2';
  var src = { '/path' : obj };
  var got = _.path.filterPairsInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing3';
  var src = { '/path' : obj };
  var got = _.path.filterPairsInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing4';
  var src = { '/path' : obj };
  var got = _.path.filterPairsInplace( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'instance' );

  /* - */

  test.open( 'double' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterPairsInplace( src, double );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterPairsInplace( src, double );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterPairsInplace( src, double );
  var expected = { '/a/b/a/b' : '', '/a/b' : '' };
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterPairsInplace( src, double );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterPairsInplace( src, double );
  var expected = [ '/a/b/a/b', '/a/b' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairsInplace( src, double );
  var expected = [ '/a/b/a/b', '/a/b', '/cd/cd', '/cd' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairsInplace( src, double );
  var expected = [ '/a/b/a/b', '/a/b', '/c/d/c/d', '/c/d' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterPairsInplace( src, double );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairsInplace( src, double );
  var expected = { '/src/src' : 'dstdst', '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterPairsInplace( src, double );
  var expected = { '/src/src' : '', '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairsInplace( src, double );
  var expected = { '/src/src' : 'dstdst', '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairsInplace( src, double );
  var expected = { '/src/src' : [ 'dst1dst1', 'dst2dst2' ], '/src' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterPairsInplace( src, double );
  var expected = { '' : [ 'dstdst', 'dst' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterPairsInplace( src, double );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairsInplace( src, double );
  var expected = { '' : [ 'dstdst', 'dst' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairsInplace( src, double );
  var expected = { '' : [ 'dst1dst1', 'dst1', 'dst2dst2', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterPairsInplace( src, double );
  var expected = { '/src/src' : '', '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'double' );

  /* - */

  test.open( 'srcOnly1' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterPairsInplace( src, srcOnly1 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterPairsInplace( src, srcOnly1 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterPairsInplace( src, srcOnly1 );
  var expected = '/a/b';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterPairsInplace( src, srcOnly1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterPairsInplace( src, srcOnly1 );
  var expected = [ '/a/b' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairsInplace( src, srcOnly1 );
  var expected = [ '/a/b', '/cd' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairsInplace( src, srcOnly1 );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterPairsInplace( src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairsInplace( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterPairsInplace( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairsInplace( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairsInplace( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterPairsInplace( src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterPairsInplace( src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairsInplace( src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairsInplace( src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterPairsInplace( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'srcOnly1' );

  /* - */

  test.open( 'srcOnly2' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterPairsInplace( src, srcOnly2 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterPairsInplace( src, srcOnly2 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterPairsInplace( src, srcOnly2 );
  var expected = '/a/b';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterPairsInplace( src, srcOnly2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterPairsInplace( src, srcOnly2 );
  var expected = [ '/a/b' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairsInplace( src, srcOnly2 );
  var expected = [ '/a/b', '/cd' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairsInplace( src, srcOnly2 );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterPairsInplace( src, srcOnly2 );
  var expected = {};
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairsInplace( src, srcOnly2 );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterPairsInplace( src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairsInplace( src, srcOnly2 );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairsInplace( src, srcOnly2 );
  var expected = { '/src' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterPairsInplace( src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterPairsInplace( src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairsInplace( src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairsInplace( src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterPairsInplace( src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'srcOnly2' );

  /* - */

  test.open( 'srcOnly3' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterPairsInplace( src, srcOnly3 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterPairsInplace( src, srcOnly3 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterPairsInplace( src, srcOnly3 );
  var expected = '/a/b';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterPairsInplace( src, srcOnly3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterPairsInplace( src, srcOnly3 );
  var expected = [ '/a/b' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairsInplace( src, srcOnly3 );
  var expected = [ '/a/b', '/cd' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairsInplace( src, srcOnly3 );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterPairsInplace( src, srcOnly3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairsInplace( src, srcOnly3 );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterPairsInplace( src, srcOnly3 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairsInplace( src, srcOnly3 );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairsInplace( src, srcOnly3 );
  var expected = { '/src' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterPairsInplace( src, srcOnly3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterPairsInplace( src, srcOnly3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairsInplace( src, srcOnly3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairsInplace( src, srcOnly3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterPairsInplace( src, srcOnly3 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'srcOnly3' );

  /* - */

  test.open( 'dstOnly' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterPairsInplace( src, dstOnly );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterPairsInplace( src, dstOnly );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterPairsInplace( src, dstOnly );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterPairsInplace( src, dstOnly );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterPairsInplace( src, dstOnly );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairsInplace( src, dstOnly );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairsInplace( src, dstOnly );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterPairsInplace( src, dstOnly );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairsInplace( src, dstOnly );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterPairsInplace( src, dstOnly );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairsInplace( src, dstOnly );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairsInplace( src, dstOnly );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterPairsInplace( src, dstOnly );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterPairsInplace( src, dstOnly );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairsInplace( src, dstOnly );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairsInplace( src, dstOnly );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterPairsInplace( src, dstOnly );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'dstOnly' );

  /* - */

  test.open( 'dstDouble' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterPairsInplace( src, dstDouble );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterPairsInplace( src, dstDouble );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterPairsInplace( src, dstDouble );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterPairsInplace( src, dstDouble );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterPairsInplace( src, dstDouble );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairsInplace( src, dstDouble );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairsInplace( src, dstDouble );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterPairsInplace( src, dstDouble );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairsInplace( src, dstDouble );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterPairsInplace( src, dstDouble );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairsInplace( src, dstDouble );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairsInplace( src, dstDouble );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterPairsInplace( src, dstDouble );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterPairsInplace( src, dstDouble );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairsInplace( src, dstDouble );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairsInplace( src, dstDouble );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterPairsInplace( src, dstDouble );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'dstDouble' );

  /* - */

  test.open( 'returns self' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterPairsInplace( src, returnSelf );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterPairsInplace( src, returnSelf );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterPairsInplace( src, returnSelf );
  var expected = '/a/b';
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterPairsInplace( src, returnSelf );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterPairsInplace( src, returnSelf );
  var expected = [ '/a/b' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairsInplace( src, returnSelf );
  var expected = [ '/a/b', '/cd' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairsInplace( src, returnSelf );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterPairsInplace( src, returnSelf );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairsInplace( src, returnSelf );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterPairsInplace( src, returnSelf );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairsInplace( src, returnSelf );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairsInplace( src, returnSelf );
  var expected = { '/src' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterPairsInplace( src, returnSelf );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterPairsInplace( src, returnSelf );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairsInplace( src, returnSelf );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairsInplace( src, returnSelf );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterPairsInplace( src, returnSelf );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'returns self' );

  /* - */

  test.open( 'returns self with array' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterPairsInplace( src, arrayInSelf );
  var expected = { '1' : '' };
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterPairsInplace( src, arrayInSelf );
  var expected = { '1' : '' };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterPairsInplace( src, arrayInSelf );
  var expected = { '/a/b' : '', '/a/b1' : '' };
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterPairsInplace( src, arrayInSelf );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterPairsInplace( src, arrayInSelf );
  var expected = [ '/a/b', '/a/b1' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairsInplace( src, arrayInSelf );
  var expected = [ '/a/b', '/a/b1', '/cd', '/cd1' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairsInplace( src, arrayInSelf );
  var expected = [ '/a/b', '/a/b1', '/c/d', '/c/d1' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterPairsInplace( src, arrayInSelf );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairsInplace( src, arrayInSelf );
  var expected = { '/src' : 'dst', '/src1' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterPairsInplace( src, arrayInSelf );
  var expected = { '/src' : '', '/src1' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairsInplace( src, arrayInSelf );
  var expected = { '/src' : 'dst', '/src1' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairsInplace( src, arrayInSelf );
  var expected = { '/src' : [ 'dst1', 'dst2' ], '/src1' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterPairsInplace( src, arrayInSelf );
  var expected = { '' : 'dst', '1' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterPairsInplace( src, arrayInSelf );
  var expected = { '1' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairsInplace( src, arrayInSelf );
  var expected = { '' : 'dst', '1' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairsInplace( src, arrayInSelf );
  var expected = { '' : [ 'dst1', 'dst2' ], '1' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterPairsInplace( src, arrayInSelf );
  var expected = { '/src' : '', '/src1' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'returns self with array' );

  /* - */

  test.open( 'nothing1' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterPairsInplace( src, nothing1 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterPairsInplace( src, nothing1 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterPairsInplace( src, nothing1 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterPairsInplace( src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterPairsInplace( src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairsInplace( src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairsInplace( src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterPairsInplace( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairsInplace( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterPairsInplace( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairsInplace( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairsInplace( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterPairsInplace( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterPairsInplace( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairsInplace( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairsInplace( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterPairsInplace( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing1' );

  /* - */

  test.open( 'nothing2' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterPairsInplace( src, nothing2 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterPairsInplace( src, nothing2 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterPairsInplace( src, nothing2 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterPairsInplace( src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterPairsInplace( src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairsInplace( src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairsInplace( src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterPairsInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairsInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterPairsInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairsInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairsInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterPairsInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterPairsInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairsInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairsInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterPairsInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing2' );

  /* - */

  test.open( 'nothing3' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterPairsInplace( src, nothing3 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterPairsInplace( src, nothing3 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterPairsInplace( src, nothing3 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterPairsInplace( src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterPairsInplace( src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairsInplace( src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairsInplace( src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterPairsInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairsInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterPairsInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairsInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairsInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterPairsInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterPairsInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairsInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairsInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterPairsInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing3' );

  /* - */

  test.open( 'nothing4' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterPairsInplace( src, nothing4 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterPairsInplace( src, nothing4 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterPairsInplace( src, nothing4 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterPairsInplace( src, nothing4 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterPairsInplace( src, nothing4 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairsInplace( src, nothing4 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairsInplace( src, nothing4 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterPairsInplace( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairsInplace( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterPairsInplace( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairsInplace( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairsInplace( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterPairsInplace( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterPairsInplace( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairsInplace( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairsInplace( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterPairsInplace( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing4' );

  /* - */

  test.open( 'complex map' );

  var srcMap =
  {
    '/true' : true,
    '/false' : false,
    '/string1' : '/dir1',
    '/string2' : '',
    '/null' : null,
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '' : [ '/dir1', '/dir2', '', null ],
    '/emptyArray' : [],
  };

  test.case = 'double';
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterPairsInplace( src, double );
  var expected =
  {
    '/true/true' : true,
    '/true' : true,
    '/false/false' : false,
    '/false' : false,
    '/string1/string1' : '/dir1/dir1',
    '/string1' : '/dir1',
    '/string2/string2' : '',
    '/string2' : '',
    '/null/null' : '',
    '/null' : '',
    '' : [ '/dir1/dir1', '/dir1', '/dir2/dir2', '/dir2' ],
    'nullnull' : '/dir3/dir3',
    'null' : '/dir3',
    '/array/array' : [ '/dir1/dir1', '/dir2/dir2' ],
    '/array' : [ '/dir1', '/dir2' ],
    '/emptyArray/emptyArray' : '',
    '/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly1';
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterPairsInplace( src, srcOnly1 );
  var expected =
  {
    '/true' : '',
    '/false' : '',
    '/string1' : '',
    '/string2' : '',
    '/null' : '',
    'null' : '',
    '/array' : '',
    '/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly2';
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterPairsInplace( src, srcOnly2 );
  var expected =
  {
    '/true' : true,
    '/false' : false,
    '/string1' : '/dir1',
    '/string2' : '',
    '/null' : '',
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly3';
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterPairsInplace( src, srcOnly3 );
  var expected =
  {
    '/true' : true,
    '/false' : false,
    '/string1' : '/dir1',
    '/string2' : '',
    '/null' : '',
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'dstOnly';
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterPairsInplace( src, dstOnly );
  var expected =
  {
    '' : [ '/dir1', '/dir2', '/dir3' ]
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'dstDouble';
  var src = _.props.supplement( {}, srcMap );
  delete src[ '' ];
  var got = _.path.filterPairsInplace( src, dstDouble );
  var expected = { '' : [ '/dir1', '/dir3', '/dir2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing1';
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterPairsInplace( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing2';
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterPairsInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing3';
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterPairsInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing4';
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterPairsInplace( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'complex map' );

  /* - */

  test.case = 'duplicates';
  var src = { '' : [ '/b', null, null, '', '', '/b' ] };
  var got = _.path.filterPairsInplace( src, duplicates );
  var expected = { '' : '/b' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates, onEach return array';
  var src = [ '/b', null, null, '', '', '/b' ];
  var got = _.path.filterPairsInplace( src, ( it ) => [ it.src, '/file', '/dst', '', null, '', null, undefined ] );
  var expected = [ '/b', '/file', '/dst' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates, onEach return array';
  var src = { 'dir' : [ '/b', null, null, '', '', '/b' ] };
  var got = _.path.filterPairsInplace( src, ( it ) => [ it.src, '/file', '/dst', '', null, '', null, undefined ] );
  var expected = { 'dir' : '/b', '/file' : '/b', '/dst' : '/b' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates';
  var src = { '/dir1' : '/dir2', '/a' : '/b' };
  var got = _.path.filterPairsInplace( src, duplicates );
  var expected = { '/dir1' : '/dir2', '/a' : '/b' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in map';
  var src = { '/dir1' : '/dir2', '/a' : '/b', '/empty' : '', '' : '/file', '/null' : null };
  var got = _.path.filterPairsInplace( src, duplicates );
  var expected = { '/dir1' : '/dir2', '/a' : '/b', '/empty' : '', '' : '/file', '/null' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in map';
  var src = { '/dir1' : '/dir2', '/a' : '/b', '/empty' : '', '/null' : null };
  var got = _.path.filterPairsInplace( src, duplicates );
  var expected = { '/dir1' : '/dir2', '/a' : '/b', '/empty' : '', '/null' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/dir1', '/a', null, '', '', null ];
  var got = _.path.filterPairsInplace( src, duplicates2 );
  var expected = [ '1', '/dir1', '/dir11', '/a', '/a1' ];
  test.identical( got, expected );
  test.true( got === src );

  /* - */

  test.case = 'boolean values';
  var src = [ '/dir1', true, null, '', '', null ];
  var got = _.path.filterPairsInplace( src, duplicates2 );
  var expected = [ '1', '/dir1', '/dir11' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'boolean values';
  var src = { '/dir' : true, '/a' : null, '/b' : '', '' : null };
  var got = _.path.filterPairsInplace( src, duplicates );
  var expected = { '/dir' : true, '/a' : '', '/b' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'boolean in callback, bool and null values in src';
  var src = { '/dir' : true, '/a' : null, '/b' : '', '' : null };
  var got = _.path.filterPairsInplace( src, bool );
  var expected = { '/dir' : true, '/a' : true, '/b' : true, '' : true };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'boolean in callback, str value in src';
  var src = { '/dir' : false, '/a' : '/dir', '/b' : '', '' : null };
  var got = _.path.filterPairsInplace( src, bool );
  var expected = { '/dir' : true, '/a' : true, '/b' : true, '' : true };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'boolean in callback, bool and null values in src';
  var src = { '/dir' : true, '/a' : null, '/b' : '', '' : null };
  var got = _.path.filterPairsInplace( src, bool2 );
  var expected = { '/dir' : false, '/a' : false, '/b' : false, '' : false };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'boolean in callback, str value in src';
  var src = { '/dir' : false, '/a' : '/dir', '/b' : '', '' : null };
  var got = _.path.filterPairsInplace( src, bool2 );
  var expected = { '/dir' : false, '/a' : false, '/b' : false, '' : false };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'boolean in callback, str value in src';
  var src = { '/dir' : true, '/a' : false, '/b' : '' };
  var got = _.path.filterPairsInplace( src, uncorrectMap );
  var expected = { '/dir' : '/dst', '/a' : false, '/b' : false };
  test.identical( got, expected );
  test.true( got === src );

  /* - */

  if( Config.debug )
  {
    test.open( 'throwing' );

    test.case = 'without arguments';
    test.shouldThrowErrorSync( () => _.path.filterPairsInplace() );

    test.case = 'extra arguments';
    test.shouldThrowErrorSync( () => _.path.filterPairsInplace( '/src', double, nothing1 ) );

    test.case = 'onEach is not a routine';
    test.shouldThrowErrorSync( () => _.path.filterPairsInplace( '/src', [ double ] ) );

    test.case = 'wrong type of filePath';
    test.shouldThrowErrorSync( () => _.path.filterPairsInplace( 1, double ) );
    test.shouldThrowErrorSync( () => _.path.filterPairsInplace( { '/path' : {} }, double ) );
    test.shouldThrowErrorSync( () => _.path.filterPairsInplace( { '/path' : undefined }, double ) );

    test.case = 'wrong type of onEach';
    test.shouldThrowErrorSync( () => _.path.filterPairsInplace( '/path', '/path' ) );

    test.close( 'throwing' );
  }

  /* - */

  function duplicates2( it )
  {
    return [ it.src, it.src, it.src + 1, '', '', null ];
  }

  function duplicates( it )
  {
    return { [ it.src ] : [ it.dst, it.dst, it.dst, '', '', null ] };
  }

  function bool( it )
  {
    return { [ it.src ] : true };
  }

  function bool2( it )
  {
    return { [ it.src ] : false };
  }

  function uncorrectMap( it )
  {
    if( it.dst === true )
    return { [ it.src ] : [ true, false, '', null, true, false, '', null, '/dst', true ] };
    if( it.dst === false )
    return { [ it.src ] : [ true, false, '', null, true, false, '', null, '/dst', false ] };
    else
    return { [ it.src ] : [ true, false, '', null, true, false, '', null, '/dst', true, false ] };
  }

  function double( it )
  {
    if( it.src === null )
    _.assert( 0 );
    if( it.src === '' )
    return { [ it.src ] : [ it.dst + it.dst, it.dst ] };
    else
    return { [ it.src + it.src ] : _.strIs( it.dst ) ? it.dst + it.dst : it.dst, [ it.src ] : it.dst };
  }

  function srcOnly1( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return { [ it.src ] : '' };
  }

  function srcOnly2( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return it.src;
  }

  function srcOnly3( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return [ it.src ];
  }

  function dstOnly( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return { '' : it.dst };
  }

  function dstDouble( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return { '' : [ it.dst, it.dst ] };
  }

  function nothing1( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return {};
  }

  function nothing2( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return [];
  }

  function nothing3( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return '';
  }

  function nothing4( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return null;
  }

  function returnSelf( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return it;
  }

  function arrayInSelf( it )
  {
    if( it.src === null )
    _.assert( 0 );
    it.src = [ it.src, it.src + 1 ];
    return it;
  }
}

//

function filterDstPairsInplace( test )
{
  test.open( 'instance' );

  function constructor( val )
  {
    this.value = val;
    return this;
  }
  var obj = new constructor;

  test.case = 'double';
  var src = { '/path' : obj };
  var got = _.path.filterDstPairsInplace( src, double );
  var expected =
  {
    '/path/path' : obj,
    '/path' : obj
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly1';
  var src = { '/path' : obj };
  var got = _.path.filterDstPairsInplace( src, srcOnly1 );
  var expected = { '/path' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly2';
  var src = { '/path' : obj };
  var got = _.path.filterDstPairsInplace( src, srcOnly2 );
  var expected = { '/path' : '/path' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly3';
  var src = { '/path' : obj };
  var got = _.path.filterDstPairsInplace( src, srcOnly3 );
  var expected = { '/path' : '/path' };
  test.identical( got, expected );
  test.true( got === src );

  var src = { '/path' : [ obj, obj ] };
  var got = _.path.filterDstPairsInplace( src, srcOnly3 );
  var expected = { '/path' : '/path' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'dstOnly';
  var src = { '/path' : obj };
  var got = _.path.filterDstPairsInplace( src, dstOnly );
  var expected = { '' : obj };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'dstDouble';
  var src = { '/path' : obj };
  var got = _.path.filterDstPairsInplace( src, dstDouble );
  var expected = { '' : obj };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing1';
  var src = { '/path' : obj };
  var got = _.path.filterDstPairsInplace( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing2';
  var src = { '/path' : obj };
  var got = _.path.filterDstPairsInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing3';
  var src = { '/path' : obj };
  var got = _.path.filterDstPairsInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing4';
  var src = { '/path' : obj };
  var got = _.path.filterDstPairsInplace( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'instance' );

  /* - */

  test.open( 'double' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDstPairsInplace( src, double );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDstPairsInplace( src, double );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDstPairsInplace( src, double );
  var expected = [ '/a/b/a/b', '/a/b' ];
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDstPairsInplace( src, double );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairsInplace( src, double );
  var expected = [ '/a/b/a/b', '/a/b' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairsInplace( src, double );
  var expected = [ '/a/b/a/b', '/a/b', '/cd/cd', '/cd' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairsInplace( src, double );
  var expected = [ '/a/b/a/b', '/a/b', '/c/d/c/d', '/c/d' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstPairsInplace( src, double );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairsInplace( src, double );
  var expected = { '/src/src' : 'dstdst', '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstPairsInplace( src, double );
  var expected = { '/src/src' : '', '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairsInplace( src, double );
  var expected = { '/src/src' : 'dstdst', '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairsInplace( src, double );
  var expected = { '/src/src' : [ 'dst1dst1', 'dst2dst2' ], '/src' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairsInplace( src, double );
  var expected = { '' : [ 'dstdst', 'dst' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairsInplace( src, double );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairsInplace( src, double );
  var expected = { '' : [ 'dstdst', 'dst' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairsInplace( src, double );
  var expected = { '' : [ 'dst1dst1', 'dst1', 'dst2dst2', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstPairsInplace( src, double );
  var expected = { '/src/src' : '', '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'double' );

  /* - */

  test.open( 'srcOnly1' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDstPairsInplace( src, srcOnly1 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDstPairsInplace( src, srcOnly1 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDstPairsInplace( src, srcOnly1 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDstPairsInplace( src, srcOnly1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairsInplace( src, srcOnly1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairsInplace( src, srcOnly1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairsInplace( src, srcOnly1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstPairsInplace( src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairsInplace( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstPairsInplace( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairsInplace( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairsInplace( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairsInplace( src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairsInplace( src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairsInplace( src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairsInplace( src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstPairsInplace( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'srcOnly1' );

  /* - */

  test.open( 'srcOnly2' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDstPairsInplace( src, srcOnly2 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDstPairsInplace( src, srcOnly2 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDstPairsInplace( src, srcOnly2 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDstPairsInplace( src, srcOnly2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairsInplace( src, srcOnly2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairsInplace( src, srcOnly2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairsInplace( src, srcOnly2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairsInplace( src, srcOnly2 );
  var expected = {};
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairsInplace( src, srcOnly2 );
  var expected = { '/src' : '/src' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstPairsInplace( src, srcOnly2 );
  var expected = { '/src' : '/src' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairsInplace( src, srcOnly2 );
  var expected = { '/src' : '/src' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairsInplace( src, srcOnly2 );
  var expected = { '/src' : '/src' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairsInplace( src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairsInplace( src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairsInplace( src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairsInplace( src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstPairsInplace( src, srcOnly2 );
  var expected = { '/src' : '/src' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'srcOnly2' );

  /* - */

  test.open( 'srcOnly3' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDstPairsInplace( src, srcOnly3 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDstPairsInplace( src, srcOnly3 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDstPairsInplace( src, srcOnly3 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDstPairsInplace( src, srcOnly3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairsInplace( src, srcOnly3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairsInplace( src, srcOnly3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairsInplace( src, srcOnly3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstPairsInplace( src, srcOnly3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairsInplace( src, srcOnly3 );
  var expected = { '/src' : '/src' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstPairsInplace( src, srcOnly3 );
  var expected = { '/src' : '/src' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairsInplace( src, srcOnly3 );
  var expected = { '/src' : '/src' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairsInplace( src, srcOnly3 );
  var expected = { '/src' : '/src' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairsInplace( src, srcOnly3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairsInplace( src, srcOnly3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairsInplace( src, srcOnly3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairsInplace( src, srcOnly3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstPairsInplace( src, srcOnly3 );
  var expected = { '/src' : '/src' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'srcOnly3' );

  /* - */

  test.open( 'dstOnly' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDstPairsInplace( src, dstOnly );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDstPairsInplace( src, dstOnly );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDstPairsInplace( src, dstOnly );
  var expected = '/a/b';
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDstPairsInplace( src, dstOnly );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairsInplace( src, dstOnly );
  var expected = [ '/a/b' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairsInplace( src, dstOnly );
  var expected = [ '/a/b', '/cd' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairsInplace( src, dstOnly );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstPairsInplace( src, dstOnly );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairsInplace( src, dstOnly );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstPairsInplace( src, dstOnly );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairsInplace( src, dstOnly );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairsInplace( src, dstOnly );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairsInplace( src, dstOnly );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairsInplace( src, dstOnly );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairsInplace( src, dstOnly );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairsInplace( src, dstOnly );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstPairsInplace( src, dstOnly );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'dstOnly' );

  /* - */

  test.open( 'dstDouble' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDstPairsInplace( src, dstDouble );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDstPairsInplace( src, dstDouble );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDstPairsInplace( src, dstDouble );
  var expected = '/a/b';
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDstPairsInplace( src, dstDouble );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairsInplace( src, dstDouble );
  var expected = [ '/a/b' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairsInplace( src, dstDouble );
  var expected = [ '/a/b', '/cd' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairsInplace( src, dstDouble );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstPairsInplace( src, dstDouble );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairsInplace( src, dstDouble );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstPairsInplace( src, dstDouble );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairsInplace( src, dstDouble );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairsInplace( src, dstDouble );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairsInplace( src, dstDouble );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairsInplace( src, dstDouble );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairsInplace( src, dstDouble );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairsInplace( src, dstDouble );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstPairsInplace( src, dstDouble );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'dstDouble' );

  /* - */

  test.open( 'returns self' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDstPairsInplace( src, returnSelf );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDstPairsInplace( src, returnSelf );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDstPairsInplace( src, returnSelf );
  var expected = '/a/b';
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDstPairsInplace( src, returnSelf );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairsInplace( src, returnSelf );
  var expected = [ '/a/b' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairsInplace( src, returnSelf );
  var expected = [ '/a/b', '/cd' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairsInplace( src, returnSelf );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstPairsInplace( src, returnSelf );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairsInplace( src, returnSelf );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstPairsInplace( src, returnSelf );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairsInplace( src, returnSelf );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairsInplace( src, returnSelf );
  var expected = { '/src' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairsInplace( src, returnSelf );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairsInplace( src, returnSelf );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairsInplace( src, returnSelf );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairsInplace( src, returnSelf );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstPairsInplace( src, returnSelf );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'returns self' );

  /* - */

  test.open( 'returns self with array' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDstPairsInplace( src, arrayInSelf );
  var expected = { '1' : '' };
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDstPairsInplace( src, arrayInSelf );
  var expected = { '1' : '' };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDstPairsInplace( src, arrayInSelf );
  var expected = { '' : '/a/b', '1' : '/a/b' };
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDstPairsInplace( src, arrayInSelf );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairsInplace( src, arrayInSelf );
  var expected = { '1' : '/a/b', '' : '/a/b' };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairsInplace( src, arrayInSelf );
  var expected = { '' : [ '/a/b', '/cd' ], '1' : [ '/a/b', '/cd' ] };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairsInplace( src, arrayInSelf );
  var expected = { '' : [ '/a/b', '/c/d' ], '1' : [ '/a/b', '/c/d' ] };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstPairsInplace( src, arrayInSelf );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairsInplace( src, arrayInSelf );
  var expected = { '/src' : 'dst', '/src1' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstPairsInplace( src, arrayInSelf );
  var expected = { '/src' : '', '/src1' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairsInplace( src, arrayInSelf );
  var expected = { '/src' : 'dst', '/src1' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairsInplace( src, arrayInSelf );
  var expected = { '/src' : [ 'dst1', 'dst2' ], '/src1' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairsInplace( src, arrayInSelf );
  var expected = { '' : 'dst', '1' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairsInplace( src, arrayInSelf );
  var expected = { '1' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairsInplace( src, arrayInSelf );
  var expected = { '' : 'dst', '1' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairsInplace( src, arrayInSelf );
  var expected = { '' : [ 'dst1', 'dst2' ], '1' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstPairsInplace( src, arrayInSelf );
  var expected = { '/src' : '', '/src1' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'returns self with array' );

  /* - */

  test.open( 'nothing1' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDstPairsInplace( src, nothing1 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDstPairsInplace( src, nothing1 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDstPairsInplace( src, nothing1 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDstPairsInplace( src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairsInplace( src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairsInplace( src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairsInplace( src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstPairsInplace( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairsInplace( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstPairsInplace( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairsInplace( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairsInplace( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairsInplace( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairsInplace( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairsInplace( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairsInplace( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstPairsInplace( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing1' );

  /* - */

  test.open( 'nothing2' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDstPairsInplace( src, nothing2 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDstPairsInplace( src, nothing2 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDstPairsInplace( src, nothing2 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDstPairsInplace( src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairsInplace( src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairsInplace( src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairsInplace( src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstPairsInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairsInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstPairsInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairsInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairsInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairsInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairsInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairsInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairsInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstPairsInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing2' );

  /* - */

  test.open( 'nothing3' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDstPairsInplace( src, nothing3 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDstPairsInplace( src, nothing3 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDstPairsInplace( src, nothing3 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDstPairsInplace( src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairsInplace( src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairsInplace( src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairsInplace( src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstPairsInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairsInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstPairsInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairsInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairsInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairsInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairsInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairsInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairsInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstPairsInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing3' );

  /* - */

  test.open( 'nothing4' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDstPairsInplace( src, nothing4 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDstPairsInplace( src, nothing4 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDstPairsInplace( src, nothing4 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDstPairsInplace( src, nothing4 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairsInplace( src, nothing4 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairsInplace( src, nothing4 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairsInplace( src, nothing4 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstPairsInplace( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairsInplace( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstPairsInplace( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairsInplace( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairsInplace( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairsInplace( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairsInplace( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairsInplace( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairsInplace( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstPairsInplace( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing4' );

  /* - */

  test.open( 'complex map' );

  var srcMap =
  {
    '/true' : true,
    '/false' : false,
    '/string1' : '/dir1',
    '/string2' : '',
    '/null' : null,
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '' : [ '/dir1', '/dir2', '', null ],
    '/emptyArray' : [],
  };

  test.case = 'double';
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterDstPairsInplace( src, double );
  var expected =
  {
    '/true/true' : true,
    '/true' : true,
    '/false/false' : false,
    '/false' : false,
    '/string1/string1' : '/dir1/dir1',
    '/string1' : '/dir1',
    '/string2/string2' : '',
    '/string2' : '',
    '/null/null' : '',
    '/null' : '',
    '' : [ '/dir1/dir1', '/dir1', '/dir2/dir2', '/dir2' ],
    'nullnull' : '/dir3/dir3',
    'null' : '/dir3',
    '/array/array' : [ '/dir1/dir1', '/dir2/dir2' ],
    '/array' : [ '/dir1', '/dir2' ],
    '/emptyArray/emptyArray' : '',
    '/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly1';
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterDstPairsInplace( src, srcOnly1 );
  var expected =
  {
    '/true' : '',
    '/false' : '',
    '/string1' : '',
    '/string2' : '',
    '/null' : '',
    'null' : '',
    '/array' : '',
    '/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly2';
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterDstPairsInplace( src, srcOnly2 );
  var expected =
  {
    '/true' : '/true',
    '/false' : '/false',
    '/string1' : '/string1',
    '/string2' : '/string2',
    '/null' : '/null',
    'null' : 'null',
    '/array' : '/array',
    '/emptyArray' : '/emptyArray'
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly3';
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterDstPairsInplace( src, srcOnly3 );
  var expected =
  {
    '/true' : '/true',
    '/false' : '/false',
    '/string1' : '/string1',
    '/string2' : '/string2',
    '/null' : '/null',
    'null' : 'null',
    '/array' : '/array',
    '/emptyArray' : '/emptyArray'
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'returns self';
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterDstPairsInplace( src, returnSelf );
  var expected =
  {
    '/true' : true,
    '/false' : false,
    '/string1' : '/dir1',
    '/string2' : '',
    '/null' : '',
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '' : [ '/dir1', '/dir2' ],
    '/emptyArray' : '',
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'dstOnly';
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterDstPairsInplace( src, dstOnly );
  var expected =
  {
    '' : [ '/dir1', '/dir2', '/dir3' ]
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'dstDouble';
  var src = _.props.supplement( {}, srcMap );
  delete src[ '' ];
  var got = _.path.filterDstPairsInplace( src, dstDouble );
  var expected = { '' : [ '/dir1', '/dir3', '/dir2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing1';
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterDstPairsInplace( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing2';
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterDstPairsInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing3';
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterDstPairsInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing4';
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterDstPairsInplace( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'complex map' );

  /* - */

  test.case = 'duplicates';
  var src = { '' : [ '/b', null, null, '', '', '/b' ] };
  var got = _.path.filterDstPairsInplace( src, duplicates );
  var expected = { '' : '/b' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates, onEach return array';
  var src = [ '/b', null, null, '', '', '/b' ];
  var got = _.path.filterDstPairsInplace( src, ( it ) => [ it.src, '/file', '/dst', '', null, '', null, undefined ] );
  var expected = [ '/file', '/dst' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates, onEach return array';
  var src = { 'dir' : [ '/b', null, null, '', '', '/b' ] };
  var got = _.path.filterDstPairsInplace( src, ( it ) => [ it.src, '/file', '/dst', '', null, '', null, undefined ] );
  var expected = { 'dir' : [ 'dir', '/file', '/dst' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates';
  var src = { '/dir1' : '/dir2', '/a' : '/b' };
  var got = _.path.filterDstPairsInplace( src, duplicates );
  var expected = { '/dir1' : '/dir2', '/a' : '/b' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in map';
  var src = { '/dir1' : '/dir2', '/a' : '/b', '/empty' : '', '' : '/file', '/null' : null };
  var got = _.path.filterDstPairsInplace( src, duplicates );
  var expected = { '/dir1' : '/dir2', '/a' : '/b', '/empty' : '', '' : '/file', '/null' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in map';
  var src = { '/dir1' : '/dir2', '/a' : '/b', '/empty' : '', '/null' : null };
  var got = _.path.filterDstPairsInplace( src, duplicates );
  var expected = { '/dir1' : '/dir2', '/a' : '/b', '/empty' : '', '/null' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/dir1', '/a', null, '', '', null ];
  var got = _.path.filterDstPairsInplace( src, duplicates2 );
  var expected = [ '1' ];
  test.identical( got, expected );
  test.true( got === src );

  /* - */

  test.case = 'boolean values';
  var src = [ '/dir1', true, null, '', '', null ];
  var got = _.path.filterDstPairsInplace( src, duplicates2 );
  var expected = [ '1' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'boolean values';
  var src = { '/dir' : true, '/a' : null, '/b' : '', '' : null };
  var got = _.path.filterDstPairsInplace( src, duplicates );
  var expected = { '/dir' : true, '/a' : '', '/b' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'boolean in callback, bool and null values in src';
  var src = { '/dir' : true, '/a' : null, '/b' : '', '' : null };
  var got = _.path.filterDstPairsInplace( src, bool );
  var expected = { '/dir' : true, '/a' : true, '/b' : true, '' : true };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'boolean in callback, str value in src';
  var src = { '/dir' : false, '/a' : '/dir', '/b' : '', '' : null };
  var got = _.path.filterDstPairsInplace( src, bool );
  var expected = { '/dir' : true, '/a' : true, '/b' : true, '' : true };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'boolean in callback, bool and null values in src';
  var src = { '/dir' : true, '/a' : null, '/b' : '', '' : null };
  var got = _.path.filterDstPairsInplace( src, bool2 );
  var expected = { '/dir' : false, '/a' : false, '/b' : false, '' : false };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'boolean in callback, str value in src';
  var src = { '/dir' : false, '/a' : '/dir', '/b' : '', '' : null };
  var got = _.path.filterDstPairsInplace( src, bool2 );
  var expected = { '/dir' : false, '/a' : false, '/b' : false, '' : false };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'boolean in callback, str value in src';
  var src = { '/dir' : true, '/a' : false, '/b' : '' };
  var got = _.path.filterDstPairsInplace( src, uncorrectMap );
  var expected = { '/dir' : '/dst', '/a' : false, '/b' : false };
  test.identical( got, expected );
  test.true( got === src );

  /* - */

  if( Config.debug )
  {
    test.open( 'throwing' );

    test.case = 'without arguments';
    test.shouldThrowErrorSync( () => _.path.filterDstPairsInplace() );

    test.case = 'extra arguments';
    test.shouldThrowErrorSync( () => _.path.filterDstPairsInplace( '/src', double, nothing1 ) );

    test.case = 'onEach is not a routine';
    test.shouldThrowErrorSync( () => _.path.filterDstPairsInplace( '/src', [ double ] ) );

    test.case = 'wrong type of filePath';
    test.shouldThrowErrorSync( () => _.path.filterDstPairsInplace( 1, double ) );
    test.shouldThrowErrorSync( () => _.path.filterDstPairsInplace( { '/path' : {} }, double ) );
    test.shouldThrowErrorSync( () => _.path.filterDstPairsInplace( { '/path' : undefined }, double ) );

    test.case = 'wrong type of onEach';
    test.shouldThrowErrorSync( () => _.path.filterDstPairsInplace( '/path', '/path' ) );

    test.close( 'throwing' );
  }

  /* - */

  function duplicates2( it )
  {
    return [ it.src, it.src, it.src + 1, '', '', null ];
  }

  function duplicates( it )
  {
    return { [ it.src ] : [ it.dst, it.dst, it.dst, '', '', null ] };
  }

  function bool( it )
  {
    return { [ it.src ] : true };
  }

  function bool2( it )
  {
    return { [ it.src ] : false };
  }

  function uncorrectMap( it )
  {
    if( it.dst === true )
    return { [ it.src ] : [ true, false, '', null, true, false, '', null, '/dst', true ] };
    if( it.dst === false )
    return { [ it.src ] : [ true, false, '', null, true, false, '', null, '/dst', false ] };
    else
    return { [ it.src ] : [ true, false, '', null, true, false, '', null, '/dst', true, false ] };
  }

  function double( it )
  {
    if( it.src === null )
    _.assert( 0 );
    if( it.src === '' )
    return { [ it.src ] : [ it.dst + it.dst, it.dst ] };
    else
    return { [ it.src + it.src ] : _.strIs( it.dst ) ? it.dst + it.dst : it.dst, [ it.src ] : it.dst };
  }

  function srcOnly1( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return { [ it.src ] : '' };
  }

  function srcOnly2( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return it.src;
  }

  function srcOnly3( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return [ it.src ];
  }

  function dstOnly( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return { '' : it.dst };
  }

  function dstDouble( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return { '' : [ it.dst, it.dst ] };
  }

  function nothing1( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return {};
  }

  function nothing2( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return [];
  }

  function nothing3( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return '';
  }

  function nothing4( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return null;
  }

  function returnSelf( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return it;
  }

  function arrayInSelf( it )
  {
    if( it.src === null )
    _.assert( 0 );
    it.src = [ it.src, it.src + 1 ];
    return it;
  }
}

//

function filterPairs_( test )
{
  test.open( 'instance' );

  function constructor( val )
  {
    this.value = val;
    return this;
  }
  var obj = new constructor;

  test.case = 'double';
  var src = { '/path' : obj };
  var got = _.path.filterPairs_( src, double );
  var expected =
  {
    '/path/path' : obj,
    '/path' : obj
  };
  test.identical( got, expected );

  test.case = 'srcOnly1';
  var src = { '/path' : obj };
  var got = _.path.filterPairs_( src, srcOnly1 );
  var expected = { '/path' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly1';
  var src = { '/path' : obj };
  var got = _.path.filterPairs_( null, src, srcOnly1 );
  var expected = '/path';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'srcOnly2';
  var src = { '/path' : obj };
  var got = _.path.filterPairs_( src, srcOnly2 );
  var expected = { '/path' : obj };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly3';
  var src = { '/path' : obj };
  var got = _.path.filterPairs_( src, srcOnly3 );
  var expected = { '/path' : obj };
  test.identical( got, expected );
  test.true( got === src );

  var src = { '/path' : [ obj, obj ] };
  var got = _.path.filterPairs_( src, srcOnly3 );
  var expected = { '/path' : obj };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'dstOnly';
  var src = { '/path' : obj };
  var got = _.path.filterPairs_( src, dstOnly );
  var expected = { '' : obj };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'dstDouble';
  var src = { '/path' : obj };
  var got = _.path.filterPairs_( src, dstDouble );
  var expected = { '' : obj };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing1';
  var src = { '/path' : obj };
  var got = _.path.filterPairs_( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing2';
  var src = { '/path' : obj };
  var got = _.path.filterPairs_( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing3';
  var src = { '/path' : obj };
  var got = _.path.filterPairs_( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing4';
  var src = { '/path' : obj };
  var got = _.path.filterPairs_( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'instance' );

  /* - */

  test.open( 'double' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterPairs_( src, double );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterPairs_( src, double );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterPairs_( src, double );
  var expected = [ '/a/b/a/b', '/a/b' ];
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterPairs_( src, double );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterPairs_( src, double );
  var expected = [ '/a/b/a/b', '/a/b' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairs_( src, double );
  var expected = [ '/a/b/a/b', '/a/b', '/cd/cd', '/cd' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairs_( src, double );
  var expected = [ '/a/b/a/b', '/a/b', '/c/d/c/d', '/c/d' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterPairs_( src, double );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairs_( src, double );
  var expected = { '/src/src' : 'dstdst', '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs_( src, double );
  var expected = { '/src/src' : '', '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, double );
  var expected = { '/src/src' : 'dstdst', '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, double );
  var expected = { '/src/src' : [ 'dst1dst1', 'dst2dst2' ], '/src' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterPairs_( src, double );
  var expected = { '' : [ 'dstdst', 'dst' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterPairs_( src, double );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, double );
  var expected = { '' : [ 'dstdst', 'dst' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, double );
  var expected = { '' : [ 'dst1dst1', 'dst1', 'dst2dst2', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterPairs_( src, double );
  var expected = { '/src/src' : '', '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'double' );

  /* - */

  test.open( 'srcOnly1' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterPairs_( src, srcOnly1 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterPairs_( src, srcOnly1 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterPairs_( src, srcOnly1 );
  var expected = '/a/b';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterPairs_( src, srcOnly1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterPairs_( src, srcOnly1 );
  var expected = [ '/a/b' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairs_( src, srcOnly1 );
  var expected = [ '/a/b', '/cd' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array, null in dst';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairs_( null, src, srcOnly1 );
  var expected = [ '/a/b', '/cd' ];
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairs_( src, srcOnly1 );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterPairs_( src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairs_( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterPairs_( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterPairs_( src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterPairs_( src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterPairs_( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'srcOnly1' );

  /* - */

  test.open( 'srcOnly2' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterPairs_( src, srcOnly2 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterPairs_( src, srcOnly2 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterPairs_( src, srcOnly2 );
  var expected = '/a/b';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterPairs_( src, srcOnly2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterPairs_( src, srcOnly2 );
  var expected = [ '/a/b' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairs_( src, srcOnly2 );
  var expected = [ '/a/b', '/cd' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairs_( src, srcOnly2 );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterPairs_( src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairs_( src, srcOnly2 );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterPairs_( src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, srcOnly2 );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, srcOnly2 );
  var expected = { '/src' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterPairs_( src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterPairs_( src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterPairs_( src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'srcOnly2' );

  /* - */

  test.open( 'srcOnly3' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterPairs_( src, srcOnly3 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterPairs_( src, srcOnly3 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterPairs_( src, srcOnly3 );
  var expected = '/a/b';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterPairs_( src, srcOnly3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterPairs_( src, srcOnly3 );
  var expected = [ '/a/b' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairs_( src, srcOnly3 );
  var expected = [ '/a/b', '/cd' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairs_( src, srcOnly3 );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterPairs_( src, srcOnly3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairs_( src, srcOnly3 );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterPairs_( src, srcOnly3 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, srcOnly3 );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, srcOnly3 );
  var expected = { '/src' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterPairs_( src, srcOnly3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterPairs_( src, srcOnly3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, srcOnly3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, srcOnly3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterPairs_( src, srcOnly3 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'srcOnly3' );

  /* - */

  test.open( 'dstOnly' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterPairs_( src, dstOnly );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterPairs_( src, dstOnly );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterPairs_( src, dstOnly );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterPairs_( src, dstOnly );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterPairs_( src, dstOnly );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairs_( src, dstOnly );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairs_( src, dstOnly );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterPairs_( src, dstOnly );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairs_( src, dstOnly );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterPairs_( src, dstOnly );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, dstOnly );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, dstOnly );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterPairs_( src, dstOnly );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterPairs_( src, dstOnly );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, dstOnly );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, dstOnly );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterPairs_( src, dstOnly );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'dstOnly' );

  /* - */

  test.open( 'dstDouble' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterPairs_( src, dstDouble );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterPairs_( src, dstDouble );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterPairs_( src, dstDouble );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterPairs_( src, dstDouble );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterPairs_( src, dstDouble );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairs_( src, dstDouble );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairs_( src, dstDouble );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterPairs_( src, dstDouble );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairs_( src, dstDouble );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterPairs_( src, dstDouble );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, dstDouble );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, dstDouble );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterPairs_( src, dstDouble );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterPairs_( src, dstDouble );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, dstDouble );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, dstDouble );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterPairs_( src, dstDouble );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'dstDouble' );

  /* - */

  test.open( 'returns self' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterPairs_( src, returnSelf );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterPairs_( src, returnSelf );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterPairs_( src, returnSelf );
  var expected = '/a/b';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterPairs_( src, returnSelf );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterPairs_( src, returnSelf );
  var expected = [ '/a/b' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairs_( src, returnSelf );
  var expected = [ '/a/b', '/cd' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairs_( src, returnSelf );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterPairs_( src, returnSelf );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairs_( src, returnSelf );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterPairs_( src, returnSelf );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, returnSelf );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, returnSelf );
  var expected = { '/src' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterPairs_( src, returnSelf );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterPairs_( src, returnSelf );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, returnSelf );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, returnSelf );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterPairs_( src, returnSelf );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'returns self' );

  /* - */

  test.open( 'returns self with array' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterPairs_( src, arrayInSelf );
  var expected = [ '1' ];
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterPairs_( src, arrayInSelf );
  var expected = [ '1' ];
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterPairs_( src, arrayInSelf );
  var expected = [ '/a/b', '/a/b1' ];
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterPairs_( src, arrayInSelf );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterPairs_( src, arrayInSelf );
  var expected = [ '/a/b', '/a/b1' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairs_( src, arrayInSelf );
  var expected = [ '/a/b', '/a/b1', '/cd', '/cd1' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairs_( src, arrayInSelf );
  var expected = [ '/a/b', '/a/b1', '/c/d', '/c/d1' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterPairs_( src, arrayInSelf );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairs_( src, arrayInSelf );
  var expected = { '/src' : 'dst', '/src1' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterPairs_( src, arrayInSelf );
  var expected = { '/src' : '', '/src1' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, arrayInSelf );
  var expected = { '/src' : 'dst', '/src1' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, arrayInSelf );
  var expected = { '/src' : [ 'dst1', 'dst2' ], '/src1' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterPairs_( src, arrayInSelf );
  var expected = { '' : 'dst', '1' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterPairs_( src, arrayInSelf );
  var expected = { '1' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, arrayInSelf );
  var expected = { '' : 'dst', '1' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, arrayInSelf );
  var expected = { '' : [ 'dst1', 'dst2' ], '1' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterPairs_( src, arrayInSelf );
  var expected = { '/src' : '', '/src1' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'returns self with array' );

  /* - */

  test.open( 'nothing1' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterPairs_( src, nothing1 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterPairs_( src, nothing1 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterPairs_( src, nothing1 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterPairs_( src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterPairs_( src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairs_( src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairs_( src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterPairs_( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairs_( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterPairs_( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterPairs_( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterPairs_( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterPairs_( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing1' );

  /* - */

  test.open( 'nothing2' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterPairs_( src, nothing2 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterPairs_( src, nothing2 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterPairs_( src, nothing2 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterPairs_( src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterPairs_( src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairs_( src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairs_( src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterPairs_( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairs_( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterPairs_( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterPairs_( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterPairs_( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterPairs_( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing2' );

  /* - */

  test.open( 'nothing3' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterPairs_( src, nothing3 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterPairs_( src, nothing3 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterPairs_( src, nothing3 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterPairs_( src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterPairs_( src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairs_( src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairs_( src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterPairs_( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairs_( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterPairs_( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterPairs_( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterPairs_( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterPairs_( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing3' );

  /* - */

  test.open( 'nothing4' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterPairs_( src, nothing4 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterPairs_( src, nothing4 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterPairs_( src, nothing4 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterPairs_( src, nothing4 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterPairs_( src, nothing4 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairs_( src, nothing4 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairs_( src, nothing4 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterPairs_( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairs_( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterPairs_( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterPairs_( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterPairs_( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterPairs_( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing4' );

  /* - */

  test.open( 'complex map' );

  var srcMap =
  {
    '/true' : true,
    '/false' : false,
    '/string1' : '/dir1',
    '/string2' : '',
    '/null' : null,
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '' : [ '' ],
    '/emptyArray' : [],
  };

  test.case = 'double';
  var src = _.entity.make( srcMap );
  var got = _.path.filterPairs_( src, double );
  var expected =
  {
    '/true/true' : true,
    '/true' : true,
    '/false/false' : false,
    '/false' : false,
    '/string1/string1' : '/dir1/dir1',
    '/string1' : '/dir1',
    '/string2/string2' : '',
    '/string2' : '',
    '/null/null' : '',
    '/null' : '',
    'nullnull' : '/dir3/dir3',
    'null' : '/dir3',
    '/array/array' : [ '/dir1/dir1', '/dir2/dir2' ],
    '/array' : [ '/dir1', '/dir2' ],
    '/emptyArray/emptyArray' : '',
    '/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly1';
  var src = _.entity.make( srcMap );
  var got = _.path.filterPairs_( src, srcOnly1 );
  var expected =
  {
    '/true' : '',
    '/false' : '',
    '/string1' : '',
    '/string2' : '',
    '/null' : '',
    'null' : '',
    '/array' : '',
    '/emptyArray' : ''
  }
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly2';
  var src = _.entity.make( srcMap );
  var got = _.path.filterPairs_( src, srcOnly2 );
  var expected =
  {
    '/true' : true,
    '/false' : false,
    '/string1' : '/dir1',
    '/string2' : '',
    '/null' : '',
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly3';
  var src = _.entity.make( srcMap );
  var got = _.path.filterPairs_( src, srcOnly3 );
  var expected =
  {
    '/true' : true,
    '/false' : false,
    '/string1' : '/dir1',
    '/string2' : '',
    '/null' : '',
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'dstOnly';
  var src = _.entity.make( srcMap );
  var got = _.path.filterPairs_( src, dstOnly );
  var expected =
  {
    '' : [ '/dir1', '/dir3', '/dir2' ]
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'dstDouble';
  var src = _.entity.make( srcMap );
  var got = _.path.filterPairs_( src, dstDouble );
  var expected =
  {
    '' : [ '/dir1', '/dir3', '/dir2' ]
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing1';
  var src = _.entity.make( srcMap );
  var got = _.path.filterPairs_( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing2';
  var src = _.entity.make( srcMap );
  var got = _.path.filterPairs_( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing3';
  var src = _.entity.make( srcMap );
  var got = _.path.filterPairs_( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing4';
  var src = _.entity.make( srcMap );
  var got = _.path.filterPairs_( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'complex map' );

  /* - */

  test.case = 'duplicates';
  var src = { '' : [ '/b', null, null, '', '', '/b' ] };
  var got = _.path.filterPairs_( src, duplicates );
  var expected = { '' : '/b' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates, onEach return array';
  var src = [ '/b', null, null, '', '', '/b' ];
  var got = _.path.filterPairs_( src, ( it ) => [ it.src, '/file', '/dst', '', null, '', null, undefined ] );
  var expected = [ '/b', '/file', '/dst' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates, onEach return array';
  var src = { 'dir' : [ '/b', null, null, '', '', '/b' ] };
  var got = _.path.filterPairs_( src, ( it ) => [ it.src, '/file', '/dst', '', null, '', null, undefined ] );
  var expected = { 'dir' : '/b', '/file' : '/b', '/dst' : '/b' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates';
  var src = { '/dir1' : '/dir2', '/a' : '/b' };
  var got = _.path.filterPairs_( src, duplicates );
  var expected = { '/dir1' : '/dir2', '/a' : '/b' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in map';
  var src = { '/dir1' : '/dir2', '/a' : '/b', '/empty' : '', '' : '/file', '/null' : null };
  var got = _.path.filterPairs_( src, duplicates );
  var expected = { '/dir1' : '/dir2', '/a' : '/b', '/empty' : '', '' : '/file', '/null' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in map';
  var src = { '/dir1' : '/dir2', '/a' : '/b', '/empty' : '', '/null' : null };
  var got = _.path.filterPairs_( src, duplicates );
  var expected = { '/dir1' : '/dir2', '/a' : '/b', '/empty' : '', '/null' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/dir1', '/a', null, '', '', null ];
  var got = _.path.filterPairs_( src, duplicates2 );
  var expected = [ '1', '/dir1', '/dir11', '/a', '/a1' ];
  test.identical( got, expected );
  test.true( got === src );

  /* - */

  test.case = 'boolean values';
  var src = [ '/dir1', true, null, '', '', null ];
  var got = _.path.filterPairs_( src, duplicates2 );
  var expected = [ '1', '/dir1', '/dir11' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'boolean values';
  var src = { '/dir' : true, '/a' : null, '/b' : '', '' : null };
  var got = _.path.filterPairs_( src, duplicates );
  var expected = { '/dir' : true, '/a' : '', '/b' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'boolean in callback, bool and null values in src';
  var src = { '/dir' : true, '/a' : null, '/b' : '', '' : null };
  var got = _.path.filterPairs_( src, bool );
  var expected = { '/dir' : true, '/a' : true, '/b' : true, '' : true };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'boolean in callback, str value in src';
  var src = { '/dir' : false, '/a' : '/dir', '/b' : '', '' : null };
  var got = _.path.filterPairs_( src, bool );
  var expected = { '/dir' : true, '/a' : true, '/b' : true, '' : true };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'boolean in callback, bool and null values in src';
  var src = { '/dir' : true, '/a' : null, '/b' : '', '' : null };
  var got = _.path.filterPairs_( src, bool2 );
  var expected = { '/dir' : false, '/a' : false, '/b' : false, '' : false };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'boolean in callback, str value in src';
  var src = { '/dir' : false, '/a' : '/dir', '/b' : '', '' : null };
  var got = _.path.filterPairs_( src, bool2 );
  var expected = { '/dir' : false, '/a' : false, '/b' : false, '' : false };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'boolean in callback, str value in src';
  var src = { '/dir' : true, '/a' : false, '/b' : '' };
  var got = _.path.filterPairs_( src, uncorrectMap );
  var expected = { '/dir' : '/dst', '/a' : false, '/b' : false };
  test.identical( got, expected );
  test.true( got === src );

  /* - */

  if( Config.debug )
  {
    test.open( 'throwing' );

    test.case = 'without arguments';
    test.shouldThrowErrorSync( () => _.path.filterPairs_() );

    test.case = 'extra arguments';
    test.shouldThrowErrorSync( () => _.path.filterPairs_( '/src', double, nothing1 ) );

    test.case = 'onEach is not a routine';
    test.shouldThrowErrorSync( () => _.path.filterPairs_( '/src', [ double ] ) );

    test.case = 'wrong type of filePath';
    test.shouldThrowErrorSync( () => _.path.filterPairs_( 1, double ) );
    test.shouldThrowErrorSync( () => _.path.filterPairs_( { '/path' : {} }, double ) );
    test.shouldThrowErrorSync( () => _.path.filterPairs_( { '/path' : undefined }, double ) );

    test.case = 'wrong type of onEach';
    test.shouldThrowErrorSync( () => _.path.filterPairs_( '/path', '/path' ) );

    test.close( 'throwing' );
  }

  /*  */

  /*
  qqq : use all callbacks in the test routine
  Dmytro : all callbacks is used
  */

  function duplicates2( it )
  {
    return [ it.src, it.src, it.src + 1, '', '', null ];
  }

  function duplicates( it )
  {
    return { [ it.src ] : [ it.dst, it.dst, it.dst, '', '', null ] };
  }

  function bool( it )
  {
    return { [ it.src ] : true };
  }

  function bool2( it )
  {
    return { [ it.src ] : false };
  }

  function uncorrectMap( it )
  {
    if( it.dst === true )
    return { [ it.src ] : [ true, false, '', null, true, false, '', null, '/dst', true ] };
    if( it.dst === false )
    return { [ it.src ] : [ true, false, '', null, true, false, '', null, '/dst', false ] };
    else
    return { [ it.src ] : [ true, false, '', null, true, false, '', null, '/dst', true, false ] };
  }

  function double( it )
  {
    if( it.src === null )
    _.assert( 0 );
    if( it.src === '' )
    return { [ it.src ] : [ it.dst + it.dst, it.dst ] };
    else
    return { [ it.src + it.src ] : _.strIs( it.dst ) ? it.dst + it.dst : it.dst, [ it.src ] : it.dst };
  }

  function srcOnly1( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return { [ it.src ] : '' };
  }

  function srcOnly2( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return it.src;
  }

  function srcOnly3( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return [ it.src ];
  }

  function dstOnly( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return { '' : it.dst };
  }

  function dstDouble( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return { '' : [ it.dst, it.dst ] };
  }

  function nothing1( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return {};
  }

  function nothing2( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return [];
  }

  function nothing3( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return '';
  }

  function nothing4( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return null;
  }

  function returnSelf( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return it;
  }

  function arrayInSelf( it )
  {
    if( it.src === null )
    _.assert( 0 );
    it.src = [ it.src, it.src + 1 ];
    return it;
  }

}

//

function filterDstPairs_( test )
{
  test.open( 'instance' );

  function constructor( val )
  {
    this.value = val;
    return this;
  }
  var obj = new constructor;

  test.case = 'double';
  var src = { '/path' : obj };
  var got = _.path.filterDstPairs_( src, double );
  var expected =
  {
    '/path/path' : obj,
    '/path' : obj
  };
  test.identical( got, expected );

  test.case = 'srcOnly1';
  var src = { '/path' : obj };
  var got = _.path.filterDstPairs_( src, srcOnly1 );
  var expected = { '/path' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly2';
  var src = { '/path' : obj };
  var got = _.path.filterDstPairs_( src, srcOnly2 );
  var expected = { '/path' : obj };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly3';
  var src = { '/path' : obj };
  var got = _.path.filterDstPairs_( src, srcOnly3 );
  var expected = { '/path' : obj };
  test.identical( got, expected );
  test.true( got === src );

  var src = { '/path' : [ obj, obj ] };
  var got = _.path.filterDstPairs_( src, srcOnly3 );
  var expected = { '/path' : obj };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'dstOnly';
  var src = { '/path' : obj };
  var got = _.path.filterDstPairs_( src, dstOnly );
  var expected = { '' : obj };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'dstDouble';
  var src = { '/path' : obj };
  var got = _.path.filterDstPairs_( src, dstDouble );
  var expected = { '' : obj };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing1';
  var src = { '/path' : obj };
  var got = _.path.filterDstPairs_( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing2';
  var src = { '/path' : obj };
  var got = _.path.filterDstPairs_( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing3';
  var src = { '/path' : obj };
  var got = _.path.filterDstPairs_( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing4';
  var src = { '/path' : obj };
  var got = _.path.filterDstPairs_( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'instance' );

  /* - */

  test.open( 'double' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDstPairs_( src, double );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDstPairs_( src, double );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDstPairs_( src, double );
  var expected = [ '/a/b/a/b', '/a/b' ];
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDstPairs_( src, double );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairs_( src, double );
  var expected = [ '/a/b/a/b', '/a/b' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairs_( src, double );
  var expected = [ '/a/b/a/b', '/a/b', '/cd/cd', '/cd' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairs_( src, double );
  var expected = [ '/a/b/a/b', '/a/b', '/c/d/c/d', '/c/d' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstPairs_( src, double );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairs_( src, double );
  var expected = { '/src/src' : 'dstdst', '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs_( src, double );
  var expected = { '/src/src' : '', '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, double );
  var expected = { '/src/src' : 'dstdst', '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, double );
  var expected = { '/src/src' : [ 'dst1dst1', 'dst2dst2' ], '/src' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairs_( src, double );
  var expected = { '' : [ 'dstdst', 'dst' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairs_( src, double );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, double );
  var expected = { '' : [ 'dstdst', 'dst' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, double );
  var expected = { '' : [ 'dst1dst1', 'dst1', 'dst2dst2', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstPairs_( src, double );
  var expected = { '/src/src' : '', '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'double' );

  /* - */

  test.open( 'srcOnly1' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDstPairs_( src, srcOnly1 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDstPairs_( src, srcOnly1 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDstPairs_( src, srcOnly1 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDstPairs_( src, srcOnly1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairs_( src, srcOnly1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairs_( src, srcOnly1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairs_( src, srcOnly1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstPairs_( src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairs_( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstPairs_( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairs_( src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairs_( src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstPairs_( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'srcOnly1' );

  /* - */

  test.open( 'srcOnly2' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDstPairs_( src, srcOnly2 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDstPairs_( src, srcOnly2 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDstPairs_( src, srcOnly2 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDstPairs_( src, srcOnly2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairs_( src, srcOnly2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairs_( src, srcOnly2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairs_( src, srcOnly2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstPairs_( src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairs_( src, srcOnly2 );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstPairs_( src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, srcOnly2 );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, srcOnly2 );
  var expected = { '/src' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairs_( src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairs_( src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstPairs_( src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'srcOnly2' );

  /* - */

  test.open( 'srcOnly3' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDstPairs_( src, srcOnly3 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDstPairs_( src, srcOnly3 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDstPairs_( src, srcOnly3 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDstPairs_( src, srcOnly3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairs_( src, srcOnly3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairs_( src, srcOnly3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairs_( src, srcOnly3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstPairs_( src, srcOnly3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairs_( src, srcOnly3 );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstPairs_( src, srcOnly3 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, srcOnly3 );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, srcOnly3 );
  var expected = { '/src' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairs_( src, srcOnly3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairs_( src, srcOnly3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, srcOnly3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, srcOnly3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstPairs_( src, srcOnly3 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'srcOnly3' );

  /* - */

  test.open( 'dstOnly' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDstPairs_( src, dstOnly );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDstPairs_( src, dstOnly );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDstPairs_( src, dstOnly );
  var expected = '/a/b';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDstPairs_( src, dstOnly );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairs_( src, dstOnly );
  var expected = [ '/a/b' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairs_( src, dstOnly );
  var expected = [ '/a/b', '/cd' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairs_( src, dstOnly );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstPairs_( src, dstOnly );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairs_( src, dstOnly );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstPairs_( src, dstOnly );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, dstOnly );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, dstOnly );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairs_( src, dstOnly );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairs_( src, dstOnly );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, dstOnly );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, dstOnly );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstPairs_( src, dstOnly );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'dstOnly' );

  /* - */

  test.open( 'dstDouble' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDstPairs_( src, dstDouble );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDstPairs_( src, dstDouble );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDstPairs_( src, dstDouble );
  var expected = '/a/b';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDstPairs_( src, dstDouble );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairs_( src, dstDouble );
  var expected = [ '/a/b' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairs_( src, dstDouble );
  var expected = [ '/a/b', '/cd' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairs_( src, dstDouble );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstPairs_( src, dstDouble );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairs_( src, dstDouble );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstPairs_( src, dstDouble );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, dstDouble );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, dstDouble );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairs_( src, dstDouble );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairs_( src, dstDouble );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, dstDouble );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, dstDouble );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstPairs_( src, dstDouble );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'dstDouble' );

  /* - */

  test.open( 'returns self' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDstPairs_( src, returnSelf );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDstPairs_( src, returnSelf );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDstPairs_( src, returnSelf );
  var expected = '/a/b';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDstPairs_( src, returnSelf );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairs_( src, returnSelf );
  var expected = [ '/a/b' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairs_( src, returnSelf );
  var expected = [ '/a/b', '/cd' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairs_( src, returnSelf );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstPairs_( src, returnSelf );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairs_( src, returnSelf );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstPairs_( src, returnSelf );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, returnSelf );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, returnSelf );
  var expected = { '/src' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairs_( src, returnSelf );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairs_( src, returnSelf );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, returnSelf );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, returnSelf );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstPairs_( src, returnSelf );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'returns self' );

  /* - */

  test.open( 'returns self with array' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDstPairs_( src, arrayInSelf );
  var expected = { '1' : '' };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDstPairs_( src, arrayInSelf );
  var expected = { '1' : '' };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDstPairs_( src, arrayInSelf );
  var expected = { '1' : '/a/b', '' : '/a/b' };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDstPairs_( src, arrayInSelf );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairs_( src, arrayInSelf );
  var expected = { '1' : '/a/b', '' : '/a/b' };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairs_( src, arrayInSelf );
  var expected = { '1' : [ '/a/b', '/cd' ], '' : [ '/a/b', '/cd' ] };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairs_( src, arrayInSelf );
  var expected = { '1' : [ '/a/b', '/c/d' ], '' : [ '/a/b', '/c/d' ] };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstPairs_( src, arrayInSelf );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairs_( src, arrayInSelf );
  var expected = { '/src' : 'dst', '/src1' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstPairs_( src, arrayInSelf );
  var expected = { '/src' : '', '/src1' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, arrayInSelf );
  var expected = { '/src' : 'dst', '/src1' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, arrayInSelf );
  var expected = { '/src' : [ 'dst1', 'dst2' ], '/src1' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairs_( src, arrayInSelf );
  var expected = { '' : 'dst', '1' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairs_( src, arrayInSelf );
  var expected = { '1' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, arrayInSelf );
  var expected = { '' : 'dst', '1' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, arrayInSelf );
  var expected = { '' : [ 'dst1', 'dst2' ], '1' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstPairs_( src, arrayInSelf );
  var expected = { '/src' : '', '/src1' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'returns self with array' );

  /* - */

  test.open( 'nothing1' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDstPairs_( src, nothing1 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDstPairs_( src, nothing1 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDstPairs_( src, nothing1 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDstPairs_( src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairs_( src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairs_( src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairs_( src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstPairs_( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairs_( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstPairs_( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairs_( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairs_( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstPairs_( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing1' );

  /* - */

  test.open( 'nothing2' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDstPairs_( src, nothing2 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDstPairs_( src, nothing2 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDstPairs_( src, nothing2 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDstPairs_( src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairs_( src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairs_( src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairs_( src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstPairs_( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairs_( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstPairs_( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairs_( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairs_( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstPairs_( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing2' );

  /* - */

  test.open( 'nothing3' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDstPairs_( src, nothing3 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDstPairs_( src, nothing3 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDstPairs_( src, nothing3 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDstPairs_( src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairs_( src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairs_( src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairs_( src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstPairs_( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairs_( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstPairs_( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairs_( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairs_( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstPairs_( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing3' );

  /* - */

  test.open( 'nothing4' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDstPairs_( src, nothing4 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDstPairs_( src, nothing4 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDstPairs_( src, nothing4 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDstPairs_( src, nothing4 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairs_( src, nothing4 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairs_( src, nothing4 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairs_( src, nothing4 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstPairs_( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairs_( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstPairs_( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairs_( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairs_( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstPairs_( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing4' );

  /* - */

  test.open( 'complex map' );

  var srcMap =
  {
    '/true' : true,
    '/false' : false,
    '/string1' : '/dir1',
    '/string2' : '',
    '/null' : null,
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '' : [ '' ],
    '/emptyArray' : [],
  };

  test.case = 'double';
  var src = _.entity.make( srcMap );
  var got = _.path.filterDstPairs_( src, double );
  var expected =
  {
    '/true/true' : true,
    '/true' : true,
    '/false/false' : false,
    '/false' : false,
    '/string1/string1' : '/dir1/dir1',
    '/string1' : '/dir1',
    '/string2/string2' : '',
    '/string2' : '',
    '/null/null' : '',
    '/null' : '',
    'nullnull' : '/dir3/dir3',
    'null' : '/dir3',
    '/array/array' : [ '/dir1/dir1', '/dir2/dir2' ],
    '/array' : [ '/dir1', '/dir2' ],
    '/emptyArray/emptyArray' : '',
    '/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly1';
  var src = _.entity.make( srcMap );
  var got = _.path.filterDstPairs_( src, srcOnly1 );
  var expected =
  {
    '/true' : '',
    '/false' : '',
    '/string1' : '',
    '/string2' : '',
    '/null' : '',
    'null' : '',
    '/array' : '',
    '/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly2';
  var src = _.entity.make( srcMap );
  var got = _.path.filterDstPairs_( src, srcOnly2 );
  var expected =
  {
    '/true' : true,
    '/false' : false,
    '/string1' : '/dir1',
    '/string2' : '',
    '/null' : '',
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly3';
  var src = _.entity.make( srcMap );
  var got = _.path.filterDstPairs_( src, srcOnly3 );
  var expected =
  {
    '/true' : true,
    '/false' : false,
    '/string1' : '/dir1',
    '/string2' : '',
    '/null' : '',
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'dstOnly';
  var src = _.entity.make( srcMap );
  var got = _.path.filterDstPairs_( src, dstOnly );
  var expected =
  {
    '' : [ '/dir1', '/dir3', '/dir2' ]
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'dstDouble';
  var src = _.entity.make( srcMap );
  var got = _.path.filterDstPairs_( src, dstDouble );
  var expected =
  {
    '' : [ '/dir1', '/dir3', '/dir2' ]
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing1';
  var src = _.entity.make( srcMap );
  var got = _.path.filterDstPairs_( src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing2';
  var src = _.entity.make( srcMap );
  var got = _.path.filterDstPairs_( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing3';
  var src = _.entity.make( srcMap );
  var got = _.path.filterDstPairs_( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing4';
  var src = _.entity.make( srcMap );
  var got = _.path.filterDstPairs_( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'complex map' );

  /* - */

  test.case = 'duplicates';
  var src = { '' : [ '/b', null, null, '', '', '/b' ] };
  var got = _.path.filterDstPairs_( src, duplicates );
  var expected = { '' : '/b' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates, onEach return array';
  var src = [ '/b', null, null, '', '', '/b' ];
  var got = _.path.filterDstPairs_( src, ( it ) => [ it.src, '/file', '/dst', '', null, '', null, undefined ] );
  var expected = { '/file' : '/b', '/dst' : '/b' };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'duplicates, onEach return array';
  var src = { 'dir' : [ '/b', null, null, '', '', '/b' ] };
  var got = _.path.filterDstPairs_( src, ( it ) => [ it.src, '/file', '/dst', '', null, '', null, undefined ] );
  var expected = { 'dir' : '/b', '/file' : '/b', '/dst' : '/b' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates';
  var src = { '/dir1' : '/dir2', '/a' : '/b' };
  var got = _.path.filterDstPairs_( src, duplicates );
  var expected = { '/dir1' : '/dir2', '/a' : '/b' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in map';
  var src = { '/dir1' : '/dir2', '/a' : '/b', '/empty' : '', '' : '/file', '/null' : null };
  var got = _.path.filterDstPairs_( src, duplicates );
  var expected = { '/dir1' : '/dir2', '/a' : '/b', '/empty' : '', '' : '/file', '/null' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in map';
  var src = { '/dir1' : '/dir2', '/a' : '/b', '/empty' : '', '/null' : null };
  var got = _.path.filterDstPairs_( src, duplicates );
  var expected = { '/dir1' : '/dir2', '/a' : '/b', '/empty' : '', '/null' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/dir1', '/a', null, '', '', null ];
  var got = _.path.filterDstPairs_( src, duplicates2 );
  var expected = { '1' : [ '/dir1', '/a' ] };
  test.identical( got, expected );
  test.true( got !== src );

  /* - */

  test.case = 'boolean values';
  var src = [ '/dir1', true, null, '', '', null ];
  var got = _.path.filterDstPairs_( src, duplicates2 );
  var expected = { '1' : '/dir1' };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'boolean values';
  var src = { '/dir' : true, '/a' : null, '/b' : '', '' : null };
  var got = _.path.filterDstPairs_( src, duplicates );
  var expected = { '/dir' : true, '/a' : '', '/b' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'boolean in callback, bool and null values in src';
  var src = { '/dir' : true, '/a' : null, '/b' : '', '' : null };
  var got = _.path.filterDstPairs_( src, bool );
  var expected = { '/dir' : true, '/a' : true, '/b' : true, '' : true };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'boolean in callback, str value in src';
  var src = { '/dir' : false, '/a' : '/dir', '/b' : '', '' : null };
  var got = _.path.filterDstPairs_( src, bool );
  var expected = { '/dir' : true, '/a' : true, '/b' : true, '' : true };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'boolean in callback, bool and null values in src';
  var src = { '/dir' : true, '/a' : null, '/b' : '', '' : null };
  var got = _.path.filterDstPairs_( src, bool2 );
  var expected = { '/dir' : false, '/a' : false, '/b' : false, '' : false };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'boolean in callback, str value in src';
  var src = { '/dir' : false, '/a' : '/dir', '/b' : '', '' : null };
  var got = _.path.filterDstPairs_( src, bool2 );
  var expected = { '/dir' : false, '/a' : false, '/b' : false, '' : false };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'boolean in callback, str value in src';
  var src = { '/dir' : true, '/a' : false, '/b' : '' };
  var got = _.path.filterDstPairs_( src, uncorrectMap );
  var expected = { '/dir' : '/dst', '/a' : false, '/b' : false };
  test.identical( got, expected );
  test.true( got === src );

  /* - */

  if( Config.debug )
  {
    test.open( 'throwing' );

    test.case = 'without arguments';
    test.shouldThrowErrorSync( () => _.path.filterDstPairs_() );

    test.case = 'extra arguments';
    test.shouldThrowErrorSync( () => _.path.filterDstPairs_( '/src', double, nothing1 ) );

    test.case = 'onEach is not a routine';
    test.shouldThrowErrorSync( () => _.path.filterDstPairs_( '/src', [ double ] ) );

    test.case = 'wrong type of filePath';
    test.shouldThrowErrorSync( () => _.path.filterDstPairs_( 1, double ) );
    test.shouldThrowErrorSync( () => _.path.filterDstPairs_( { '/path' : {} }, double ) );
    test.shouldThrowErrorSync( () => _.path.filterDstPairs_( { '/path' : undefined }, double ) );

    test.case = 'wrong type of onEach';
    test.shouldThrowErrorSync( () => _.path.filterDstPairs_( '/path', '/path' ) );

    test.close( 'throwing' );
  }

  /*  */

  /*
  qqq : use all callbacks in the test routine
  Dmytro : all callbacks is used
  */

  function duplicates2( it )
  {
    return [ it.src, it.src, it.src + 1, '', '', null ];
  }

  function duplicates( it )
  {
    return { [ it.src ] : [ it.dst, it.dst, it.dst, '', '', null ] };
  }

  function bool( it )
  {
    return { [ it.src ] : true };
  }

  function bool2( it )
  {
    return { [ it.src ] : false };
  }

  function uncorrectMap( it )
  {
    if( it.dst === true )
    return { [ it.src ] : [ true, false, '', null, true, false, '', null, '/dst', true ] };
    if( it.dst === false )
    return { [ it.src ] : [ true, false, '', null, true, false, '', null, '/dst', false ] };
    else
    return { [ it.src ] : [ true, false, '', null, true, false, '', null, '/dst', true, false ] };
  }

  function double( it )
  {
    if( it.src === null )
    _.assert( 0 );
    if( it.src === '' )
    return { [ it.src ] : [ it.dst + it.dst, it.dst ] };
    else
    return { [ it.src + it.src ] : _.strIs( it.dst ) ? it.dst + it.dst : it.dst, [ it.src ] : it.dst };
  }

  function srcOnly1( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return { [ it.src ] : '' };
  }

  function srcOnly2( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return it.src;
  }

  function srcOnly3( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return [ it.src ];
  }

  function dstOnly( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return { '' : it.dst };
  }

  function dstDouble( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return { '' : [ it.dst, it.dst ] };
  }

  function nothing1( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return {};
  }

  function nothing2( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return [];
  }

  function nothing3( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return '';
  }

  function nothing4( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return null;
  }

  function returnSelf( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return it;
  }

  function arrayInSelf( it )
  {
    if( it.src === null )
    _.assert( 0 );
    it.src = [ it.src, it.src + 1 ];
    return it;
  }

}

//

function filterPairsInplace_( test )
{
  test.open( 'instance' );

  function constructor( val )
  {
    this.value = val;
    return this;
  }
  var obj = new constructor;

  test.case = 'double';
  var src = { '/path' : obj };
  var got = _.path.filterPairs_( src, src, double );
  var expected =
  {
    '/path/path' : obj,
    '/path' : obj
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly1';
  var src = { '/path' : obj };
  var got = _.path.filterPairs_( src, src, srcOnly1 );
  var expected = { '/path' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly2';
  var src = { '/path' : obj };
  var got = _.path.filterPairs_( src, src, srcOnly2 );
  var expected = { '/path' : obj };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly3';
  var src = { '/path' : obj };
  var got = _.path.filterPairs_( src, src, srcOnly3 );
  var expected = { '/path' : obj };
  test.identical( got, expected );
  test.true( got === src );

  var src = { '/path' : [ obj, obj ] };
  var got = _.path.filterPairs_( src, src, srcOnly3 );
  var expected = { '/path' : obj };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'dstOnly';
  var src = { '/path' : obj };
  var got = _.path.filterPairs_( src, src, dstOnly );
  var expected = { '' : obj };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'dstDouble';
  var src = { '/path' : obj };
  var got = _.path.filterPairs_( src, src, dstDouble );
  var expected = { '' : obj };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing1';
  var src = { '/path' : obj };
  var got = _.path.filterPairs_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing2';
  var src = { '/path' : obj };
  var got = _.path.filterPairs_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing3';
  var src = { '/path' : obj };
  var got = _.path.filterPairs_( src, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing4';
  var src = { '/path' : obj };
  var got = _.path.filterPairs_( src, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'instance' );

  /* - */

  test.open( 'double' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterPairs_( src, src, double );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterPairs_( src, src, double );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterPairs_( src, src, double );
  var expected = [ '/a/b/a/b', '/a/b' ];
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterPairs_( src, src, double );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterPairs_( src, src, double );
  var expected = [ '/a/b/a/b', '/a/b' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairs_( src, src, double );
  var expected = [ '/a/b/a/b', '/a/b', '/cd/cd', '/cd' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairs_( src, src, double );
  var expected = [ '/a/b/a/b', '/a/b', '/c/d/c/d', '/c/d' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterPairs_( src, src, double );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairs_( src, src, double );
  var expected = { '/src/src' : 'dstdst', '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterPairs_( src, src, double );
  var expected = { '/src/src' : '', '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, src, double );
  var expected = { '/src/src' : 'dstdst', '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, src, double );
  var expected = { '/src/src' : [ 'dst1dst1', 'dst2dst2' ], '/src' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterPairs_( src, src, double );
  var expected = { '' : [ 'dstdst', 'dst' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterPairs_( src, src, double );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, src, double );
  var expected = { '' : [ 'dstdst', 'dst' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, src, double );
  var expected = { '' : [ 'dst1dst1', 'dst1', 'dst2dst2', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterPairs_( src, src, double );
  var expected = { '/src/src' : '', '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'double' );

  /* - */

  test.open( 'srcOnly1' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterPairs_( src, src, srcOnly1 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterPairs_( src, src, srcOnly1 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterPairs_( src, src, srcOnly1 );
  var expected = '/a/b';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterPairs_( src, src, srcOnly1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterPairs_( src, src, srcOnly1 );
  var expected = [ '/a/b' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairs_( src, src, srcOnly1 );
  var expected = [ '/a/b', '/cd' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairs_( src, src, srcOnly1 );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterPairs_( src, src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairs_( src, src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterPairs_( src, src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterPairs_( src, src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterPairs_( src, src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterPairs_( src, src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'srcOnly1' );

  /* - */

  test.open( 'srcOnly2' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterPairs_( src, src, srcOnly2 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterPairs_( src, src, srcOnly2 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterPairs_( src, src, srcOnly2 );
  var expected = '/a/b';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterPairs_( src, src, srcOnly2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterPairs_( src, src, srcOnly2 );
  var expected = [ '/a/b' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairs_( src, src, srcOnly2 );
  var expected = [ '/a/b', '/cd' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairs_( src, src, srcOnly2 );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterPairs_( src, src, srcOnly2 );
  var expected = {};
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairs_( src, src, srcOnly2 );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterPairs_( src, src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, src, srcOnly2 );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, src, srcOnly2 );
  var expected = { '/src' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterPairs_( src, src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterPairs_( src, src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterPairs_( src, src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'srcOnly2' );

  /* - */

  test.open( 'srcOnly3' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterPairs_( src, src, srcOnly3 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterPairs_( src, src, srcOnly3 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterPairs_( src, src, srcOnly3 );
  var expected = '/a/b';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterPairs_( src, src, srcOnly3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterPairs_( src, src, srcOnly3 );
  var expected = [ '/a/b' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairs_( src, src, srcOnly3 );
  var expected = [ '/a/b', '/cd' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairs_( src, src, srcOnly3 );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterPairs_( src, src, srcOnly3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairs_( src, src, srcOnly3 );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterPairs_( src, src, srcOnly3 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, src, srcOnly3 );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, src, srcOnly3 );
  var expected = { '/src' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterPairs_( src, src, srcOnly3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterPairs_( src, src, srcOnly3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, src, srcOnly3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, src, srcOnly3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterPairs_( src, src, srcOnly3 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'srcOnly3' );

  /* - */

  test.open( 'dstOnly' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterPairs_( src, src, dstOnly );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterPairs_( src, src, dstOnly );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterPairs_( src, src, dstOnly );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterPairs_( src, src, dstOnly );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterPairs_( src, src, dstOnly );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairs_( src, src, dstOnly );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairs_( src, src, dstOnly );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterPairs_( src, src, dstOnly );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairs_( src, src, dstOnly );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterPairs_( src, src, dstOnly );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, src, dstOnly );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, src, dstOnly );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterPairs_( src, src, dstOnly );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterPairs_( src, src, dstOnly );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, src, dstOnly );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, src, dstOnly );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterPairs_( src, src, dstOnly );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'dstOnly' );

  /* - */

  test.open( 'dstDouble' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterPairs_( src, src, dstDouble );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterPairs_( src, src, dstDouble );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterPairs_( src, src, dstDouble );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterPairs_( src, src, dstDouble );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterPairs_( src, src, dstDouble );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairs_( src, src, dstDouble );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairs_( src, src, dstDouble );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterPairs_( src, src, dstDouble );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairs_( src, src, dstDouble );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterPairs_( src, src, dstDouble );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, src, dstDouble );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, src, dstDouble );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterPairs_( src, src, dstDouble );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterPairs_( src, src, dstDouble );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, src, dstDouble );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, src, dstDouble );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterPairs_( src, src, dstDouble );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'dstDouble' );

  /* - */

  test.open( 'returns self' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterPairs_( src, src, returnSelf );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterPairs_( src, src, returnSelf );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterPairs_( src, src, returnSelf );
  var expected = '/a/b';
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterPairs_( src, src, returnSelf );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterPairs_( src, src, returnSelf );
  var expected = [ '/a/b' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairs_( src, src, returnSelf );
  var expected = [ '/a/b', '/cd' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairs_( src, src, returnSelf );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterPairs_( src, src, returnSelf );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairs_( src, src, returnSelf );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterPairs_( src, src, returnSelf );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, src, returnSelf );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, src, returnSelf );
  var expected = { '/src' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterPairs_( src, src, returnSelf );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterPairs_( src, src, returnSelf );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, src, returnSelf );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, src, returnSelf );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterPairs_( src, src, returnSelf );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'returns self' );

  /* - */

  test.open( 'returns self with array' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterPairs_( src, src, arrayInSelf );
  var expected = '1';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterPairs_( src, src, arrayInSelf );
  var expected = [ '1' ];
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterPairs_( src, src, arrayInSelf );
  var expected = [ '/a/b', '/a/b1' ];
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterPairs_( src, src, arrayInSelf );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterPairs_( src, src, arrayInSelf );
  var expected = [ '/a/b', '/a/b1' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairs_( src, src, arrayInSelf );
  var expected = [ '/a/b', '/a/b1', '/cd', '/cd1' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairs_( src, src, arrayInSelf );
  var expected = [ '/a/b', '/a/b1', '/c/d', '/c/d1' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterPairs_( src, src, arrayInSelf );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairs_( src, src, arrayInSelf );
  var expected = { '/src' : 'dst', '/src1' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterPairs_( src, src, arrayInSelf );
  var expected = { '/src' : '', '/src1' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, src, arrayInSelf );
  var expected = { '/src' : 'dst', '/src1' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, src, arrayInSelf );
  var expected = { '/src' : [ 'dst1', 'dst2' ], '/src1' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterPairs_( src, src, arrayInSelf );
  var expected = { '' : 'dst', '1' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterPairs_( src, src, arrayInSelf );
  var expected = { '1' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, src, arrayInSelf );
  var expected = { '' : 'dst', '1' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, src, arrayInSelf );
  var expected = { '' : [ 'dst1', 'dst2' ], '1' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterPairs_( src, src, arrayInSelf );
  var expected = { '/src' : '', '/src1' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'returns self with array' );

  /* - */

  test.open( 'nothing1' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterPairs_( src, src, nothing1 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterPairs_( src, src, nothing1 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterPairs_( src, src, nothing1 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterPairs_( src, src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterPairs_( src, src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairs_( src, src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairs_( src, src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterPairs_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairs_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterPairs_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterPairs_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterPairs_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterPairs_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing1' );

  /* - */

  test.open( 'nothing2' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterPairs_( src, src, nothing2 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterPairs_( src, src, nothing2 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterPairs_( src, src, nothing2 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterPairs_( src, src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterPairs_( src, src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairs_( src, src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairs_( src, src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterPairs_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairs_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterPairs_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterPairs_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterPairs_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterPairs_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing2' );

  /* - */

  test.open( 'nothing3' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterPairs_( src, src, nothing3 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterPairs_( src, src, nothing3 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterPairs_( src, src, nothing3 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterPairs_( src, src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterPairs_( src, src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairs_( src, src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairs_( src, src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterPairs_( src, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairs_( src, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterPairs_( src, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterPairs_( src, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterPairs_( src, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterPairs_( src, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing3' );

  /* - */

  test.open( 'nothing4' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterPairs_( src, src, nothing4 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterPairs_( src, src, nothing4 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterPairs_( src, src, nothing4 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterPairs_( src, src, nothing4 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterPairs_( src, src, nothing4 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairs_( src, src, nothing4 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairs_( src, src, nothing4 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterPairs_( src, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairs_( src, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterPairs_( src, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterPairs_( src, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterPairs_( src, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairs_( src, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( src, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterPairs_( src, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing4' );

  /* - */

  test.open( 'complex map' );

  var srcMap =
  {
    '/true' : true,
    '/false' : false,
    '/string1' : '/dir1',
    '/string2' : '',
    '/null' : null,
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '' : [ '/dir1', '/dir2', '', null ],
    '/emptyArray' : [],
  };

  test.case = 'double';
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterPairs_( src, src, double );
  var expected =
  {
    '/true/true' : true,
    '/true' : true,
    '/false/false' : false,
    '/false' : false,
    '/string1/string1' : '/dir1/dir1',
    '/string1' : '/dir1',
    '/string2/string2' : '',
    '/string2' : '',
    '/null/null' : '',
    '/null' : '',
    '' : [ '/dir1/dir1', '/dir1', '/dir2/dir2', '/dir2' ],
    'nullnull' : '/dir3/dir3',
    'null' : '/dir3',
    '/array/array' : [ '/dir1/dir1', '/dir2/dir2' ],
    '/array' : [ '/dir1', '/dir2' ],
    '/emptyArray/emptyArray' : '',
    '/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly1';
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterPairs_( src, src, srcOnly1 );
  var expected =
  {
    '/true' : '',
    '/false' : '',
    '/string1' : '',
    '/string2' : '',
    '/null' : '',
    'null' : '',
    '/array' : '',
    '/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly2';
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterPairs_( src, src, srcOnly2 );
  var expected =
  {
    '/true' : true,
    '/false' : false,
    '/string1' : '/dir1',
    '/string2' : '',
    '/null' : '',
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly3';
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterPairs_( src, src, srcOnly3 );
  var expected =
  {
    '/true' : true,
    '/false' : false,
    '/string1' : '/dir1',
    '/string2' : '',
    '/null' : '',
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'dstOnly';
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterPairs_( src, src, dstOnly );
  var expected =
  {
    '' : [ '/dir1', '/dir3', '/dir2' ]
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'dstDouble';
  var src = _.props.supplement( {}, srcMap );
  delete src[ '' ];
  var got = _.path.filterPairs_( src, src, dstDouble );
  var expected = { '' : [ '/dir1', '/dir3', '/dir2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing1';
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterPairs_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing2';
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterPairs_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing3';
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterPairs_( src, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing4';
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterPairs_( src, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'complex map' );

  /* - */

  test.case = 'duplicates';
  var src = { '' : [ '/b', null, null, '', '', '/b' ] };
  var got = _.path.filterPairs_( src, src, duplicates );
  var expected = { '' : '/b' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates, onEach return array';
  var src = [ '/b', null, null, '', '', '/b' ];
  var got = _.path.filterPairs_( src, src, ( it ) => [ it.src, '/file', '/dst', '', null, '', null, undefined ] );
  var expected = [ '/b', '/file', '/dst' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates, onEach return array';
  var src = { 'dir' : [ '/b', null, null, '', '', '/b' ] };
  var got = _.path.filterPairs_( src, src, ( it ) => [ it.src, '/file', '/dst', '', null, '', null, undefined ] );
  var expected = { 'dir' : '/b', '/file' : '/b', '/dst' : '/b' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates';
  var src = { '/dir1' : '/dir2', '/a' : '/b' };
  var got = _.path.filterPairs_( src, src, duplicates );
  var expected = { '/dir1' : '/dir2', '/a' : '/b' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in map';
  var src = { '/dir1' : '/dir2', '/a' : '/b', '/empty' : '', '' : '/file', '/null' : null };
  var got = _.path.filterPairs_( src, src, duplicates );
  var expected = { '/dir1' : '/dir2', '/a' : '/b', '/empty' : '', '' : '/file', '/null' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in map';
  var src = { '/dir1' : '/dir2', '/a' : '/b', '/empty' : '', '/null' : null };
  var got = _.path.filterPairs_( src, src, duplicates );
  var expected = { '/dir1' : '/dir2', '/a' : '/b', '/empty' : '', '/null' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/dir1', '/a', null, '', '', null ];
  var got = _.path.filterPairs_( src, src, duplicates2 );
  var expected = [ '1', '/dir1', '/dir11', '/a', '/a1' ];
  test.identical( got, expected );
  test.true( got === src );

  /* - */

  test.case = 'boolean values';
  var src = [ '/dir1', true, null, '', '', null ];
  var got = _.path.filterPairs_( src, src, duplicates2 );
  var expected = [ '1', '/dir1', '/dir11' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'boolean values';
  var src = { '/dir' : true, '/a' : null, '/b' : '', '' : null };
  var got = _.path.filterPairs_( src, src, duplicates );
  var expected = { '/dir' : true, '/a' : '', '/b' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'boolean in callback, bool and null values in src';
  var src = { '/dir' : true, '/a' : null, '/b' : '', '' : null };
  var got = _.path.filterPairs_( src, src, bool );
  var expected = { '/dir' : true, '/a' : true, '/b' : true, '' : true };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'boolean in callback, str value in src';
  var src = { '/dir' : false, '/a' : '/dir', '/b' : '', '' : null };
  var got = _.path.filterPairs_( src, src, bool );
  var expected = { '/dir' : true, '/a' : true, '/b' : true, '' : true };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'boolean in callback, bool and null values in src';
  var src = { '/dir' : true, '/a' : null, '/b' : '', '' : null };
  var got = _.path.filterPairs_( src, src, bool2 );
  var expected = { '/dir' : false, '/a' : false, '/b' : false, '' : false };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'boolean in callback, str value in src';
  var src = { '/dir' : false, '/a' : '/dir', '/b' : '', '' : null };
  var got = _.path.filterPairs_( src, src, bool2 );
  var expected = { '/dir' : false, '/a' : false, '/b' : false, '' : false };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'boolean in callback, str value in src';
  var src = { '/dir' : true, '/a' : false, '/b' : '' };
  var got = _.path.filterPairs_( src, src, uncorrectMap );
  var expected = { '/dir' : '/dst', '/a' : false, '/b' : false };
  test.identical( got, expected );
  test.true( got === src );

  /* - */

  if( Config.debug )
  {
    test.open( 'throwing' );

    test.case = 'without arguments';
    test.shouldThrowErrorSync( () => _.path.filterPairs_() );

    test.case = 'extra arguments';
    test.shouldThrowErrorSync( () => _.path.filterPairs_( '/src', double, nothing1 ) );

    test.case = 'onEach is not a routine';
    test.shouldThrowErrorSync( () => _.path.filterPairs_( '/src', [ double ] ) );

    test.case = 'wrong type of filePath';
    test.shouldThrowErrorSync( () => _.path.filterPairs_( 1, double ) );
    test.shouldThrowErrorSync( () => _.path.filterPairs_( { '/path' : {} }, double ) );
    test.shouldThrowErrorSync( () => _.path.filterPairs_( { '/path' : undefined }, double ) );

    test.case = 'wrong type of onEach';
    test.shouldThrowErrorSync( () => _.path.filterPairs_( '/path', '/path' ) );

    test.close( 'throwing' );
  }

  /* - */

  function duplicates2( it )
  {
    return [ it.src, it.src, it.src + 1, '', '', null ];
  }

  function duplicates( it )
  {
    return { [ it.src ] : [ it.dst, it.dst, it.dst, '', '', null ] };
  }

  function bool( it )
  {
    return { [ it.src ] : true };
  }

  function bool2( it )
  {
    return { [ it.src ] : false };
  }

  function uncorrectMap( it )
  {
    if( it.dst === true )
    return { [ it.src ] : [ true, false, '', null, true, false, '', null, '/dst', true ] };
    if( it.dst === false )
    return { [ it.src ] : [ true, false, '', null, true, false, '', null, '/dst', false ] };
    else
    return { [ it.src ] : [ true, false, '', null, true, false, '', null, '/dst', true, false ] };
  }

  function double( it )
  {
    if( it.src === null )
    _.assert( 0 );
    if( it.src === '' )
    return { [ it.src ] : [ it.dst + it.dst, it.dst ] };
    else
    return { [ it.src + it.src ] : _.strIs( it.dst ) ? it.dst + it.dst : it.dst, [ it.src ] : it.dst };
  }

  function srcOnly1( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return { [ it.src ] : '' };
  }

  function srcOnly2( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return it.src;
  }

  function srcOnly3( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return [ it.src ];
  }

  function dstOnly( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return { '' : it.dst };
  }

  function dstDouble( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return { '' : [ it.dst, it.dst ] };
  }

  function nothing1( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return {};
  }

  function nothing2( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return [];
  }

  function nothing3( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return '';
  }

  function nothing4( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return null;
  }

  function returnSelf( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return it;
  }

  function arrayInSelf( it )
  {
    if( it.src === null )
    _.assert( 0 );
    it.src = [ it.src, it.src + 1 ];
    return it;
  }

}

//

function filterDstPairsInplace_( test )
{
  test.open( 'instance' );

  function constructor( val )
  {
    this.value = val;
    return this;
  }
  var obj = new constructor;

  test.case = 'double';
  var src = { '/path' : obj };
  var got = _.path.filterDstPairs_( src, src, double );
  var expected =
  {
    '/path/path' : obj,
    '/path' : obj
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly1';
  var src = { '/path' : obj };
  var got = _.path.filterDstPairs_( src, src, srcOnly1 );
  var expected = { '/path' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly2';
  var src = { '/path' : obj };
  var got = _.path.filterDstPairs_( src, src, srcOnly2 );
  var expected = { '/path' : obj };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly3';
  var src = { '/path' : obj };
  var got = _.path.filterDstPairs_( src, src, srcOnly3 );
  var expected = { '/path' : obj };
  test.identical( got, expected );
  test.true( got === src );

  var src = { '/path' : [ obj, obj ] };
  var got = _.path.filterDstPairs_( src, src, srcOnly3 );
  var expected = { '/path' : obj };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'dstOnly';
  var src = { '/path' : obj };
  var got = _.path.filterDstPairs_( src, src, dstOnly );
  var expected = { '' : obj };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'dstDouble';
  var src = { '/path' : obj };
  var got = _.path.filterDstPairs_( src, src, dstDouble );
  var expected = { '' : obj };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing1';
  var src = { '/path' : obj };
  var got = _.path.filterDstPairs_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing2';
  var src = { '/path' : obj };
  var got = _.path.filterDstPairs_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing3';
  var src = { '/path' : obj };
  var got = _.path.filterDstPairs_( src, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing4';
  var src = { '/path' : obj };
  var got = _.path.filterDstPairs_( src, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'instance' );

  /* - */

  test.open( 'double' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDstPairs_( src, src, double );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDstPairs_( src, src, double );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDstPairs_( src, src, double );
  var expected = [ '/a/b/a/b', '/a/b' ];
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDstPairs_( src, src, double );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairs_( src, src, double );
  var expected = [ '/a/b/a/b', '/a/b' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairs_( src, src, double );
  var expected = [ '/a/b/a/b', '/a/b', '/cd/cd', '/cd' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairs_( src, src, double );
  var expected = [ '/a/b/a/b', '/a/b', '/c/d/c/d', '/c/d' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstPairs_( src, src, double );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairs_( src, src, double );
  var expected = { '/src/src' : 'dstdst', '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstPairs_( src, src, double );
  var expected = { '/src/src' : '', '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, src, double );
  var expected = { '/src/src' : 'dstdst', '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, src, double );
  var expected = { '/src/src' : [ 'dst1dst1', 'dst2dst2' ], '/src' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairs_( src, src, double );
  var expected = { '' : [ 'dstdst', 'dst' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairs_( src, src, double );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, src, double );
  var expected = { '' : [ 'dstdst', 'dst' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, src, double );
  var expected = { '' : [ 'dst1dst1', 'dst1', 'dst2dst2', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstPairs_( src, src, double );
  var expected = { '/src/src' : '', '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'double' );

  /* - */

  test.open( 'srcOnly1' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDstPairs_( src, src, srcOnly1 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDstPairs_( src, src, srcOnly1 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDstPairs_( src, src, srcOnly1 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDstPairs_( src, src, srcOnly1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairs_( src, src, srcOnly1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairs_( src, src, srcOnly1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairs_( src, src, srcOnly1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstPairs_( src, src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairs_( src, src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstPairs_( src, src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairs_( src, src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairs_( src, src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstPairs_( src, src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'srcOnly1' );

  /* - */

  test.open( 'srcOnly2' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDstPairs_( src, src, srcOnly2 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDstPairs_( src, src, srcOnly2 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDstPairs_( src, src, srcOnly2 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDstPairs_( src, src, srcOnly2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [];
  var got = _.path.filterDstPairs_( src, src, srcOnly2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [];
  var got = _.path.filterDstPairs_( src, src, srcOnly2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairs_( src, src, srcOnly2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterDstPairs_( src, src, srcOnly2 );
  var expected = {};
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairs_( src, src, srcOnly2 );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstPairs_( src, src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, src, srcOnly2 );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, src, srcOnly2 );
  var expected = { '/src' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairs_( src, src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairs_( src, src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstPairs_( src, src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'srcOnly2' );

  /* - */

  test.open( 'srcOnly3' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDstPairs_( src, src, srcOnly3 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDstPairs_( src, src, srcOnly3 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDstPairs_( src, src, srcOnly3 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDstPairs_( src, src, srcOnly3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairs_( src, src, srcOnly3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairs_( src, src, srcOnly3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairs_( src, src, srcOnly3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstPairs_( src, src, srcOnly3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairs_( src, src, srcOnly3 );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstPairs_( src, src, srcOnly3 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, src, srcOnly3 );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, src, srcOnly3 );
  var expected = { '/src' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairs_( src, src, srcOnly3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairs_( src, src, srcOnly3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, src, srcOnly3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, src, srcOnly3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstPairs_( src, src, srcOnly3 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'srcOnly3' );

  /* - */

  test.open( 'dstOnly' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDstPairs_( src, src, dstOnly );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDstPairs_( src, src, dstOnly );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDstPairs_( src, src, dstOnly );
  var expected = '/a/b';
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDstPairs_( src, src, dstOnly );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairs_( src, src, dstOnly );
  var expected = [ '/a/b' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairs_( src, src, dstOnly );
  var expected = [ '/a/b', '/cd' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairs_( src, src, dstOnly );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstPairs_( src, src, dstOnly );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairs_( src, src, dstOnly );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstPairs_( src, src, dstOnly );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, src, dstOnly );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, src, dstOnly );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairs_( src, src, dstOnly );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairs_( src, src, dstOnly );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, src, dstOnly );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, src, dstOnly );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstPairs_( src, src, dstOnly );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'dstOnly' );

  /* - */

  test.open( 'dstDouble' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDstPairs_( src, src, dstDouble );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDstPairs_( src, src, dstDouble );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDstPairs_( src, src, dstDouble );
  var expected = '/a/b';
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDstPairs_( src, src, dstDouble );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairs_( src, src, dstDouble );
  var expected = [ '/a/b' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairs_( src, src, dstDouble );
  var expected = [ '/a/b', '/cd' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairs_( src, src, dstDouble );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstPairs_( src, src, dstDouble );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairs_( src, src, dstDouble );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstPairs_( src, src, dstDouble );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, src, dstDouble );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, src, dstDouble );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairs_( src, src, dstDouble );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairs_( src, src, dstDouble );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, src, dstDouble );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, src, dstDouble );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstPairs_( src, src, dstDouble );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'dstDouble' );

  /* - */

  test.open( 'returns self' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDstPairs_( src, src, returnSelf );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDstPairs_( src, src, returnSelf );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDstPairs_( src, src, returnSelf );
  var expected = '/a/b';
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDstPairs_( src, src, returnSelf );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairs_( src, src, returnSelf );
  var expected = [ '/a/b' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairs_( src, src, returnSelf );
  var expected = [ '/a/b', '/cd' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairs_( src, src, returnSelf );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstPairs_( src, src, returnSelf );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairs_( src, src, returnSelf );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstPairs_( src, src, returnSelf );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, src, returnSelf );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, src, returnSelf );
  var expected = { '/src' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairs_( src, src, returnSelf );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairs_( src, src, returnSelf );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, src, returnSelf );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, src, returnSelf );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstPairs_( src, src, returnSelf );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'returns self' );

  /* - */

  test.open( 'returns self with array' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDstPairs_( src, src, arrayInSelf );
  var expected = { '1' : '' };
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDstPairs_( src, src, arrayInSelf );
  var expected = { '1' : '' };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDstPairs_( src, src, arrayInSelf );
  var expected = { '1' : '/a/b', '' : '/a/b' };
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDstPairs_( src, src, arrayInSelf );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairs_( src, src, arrayInSelf );
  var expected = { '1' : '/a/b', '' : '/a/b' };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairs_( src, src, arrayInSelf );
  var expected = { '1' : [ '/a/b', '/cd' ], '' : [ '/a/b', '/cd' ] };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairs_( src, src, arrayInSelf );
  var expected = { '1' : [ '/a/b', '/c/d' ], '' : [ '/a/b', '/c/d' ] };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstPairs_( src, src, arrayInSelf );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairs_( src, src, arrayInSelf );
  var expected = { '/src' : 'dst', '/src1' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstPairs_( src, src, arrayInSelf );
  var expected = { '/src' : '', '/src1' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, src, arrayInSelf );
  var expected = { '/src' : 'dst', '/src1' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, src, arrayInSelf );
  var expected = { '/src' : [ 'dst1', 'dst2' ], '/src1' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairs_( src, src, arrayInSelf );
  var expected = { '' : 'dst', '1' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairs_( src, src, arrayInSelf );
  var expected = { '1' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, src, arrayInSelf );
  var expected = { '' : 'dst', '1' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, src, arrayInSelf );
  var expected = { '' : [ 'dst1', 'dst2' ], '1' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstPairs_( src, src, arrayInSelf );
  var expected = { '/src' : '', '/src1' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'returns self with array' );

  /* - */

  test.open( 'nothing1' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDstPairs_( src, src, nothing1 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDstPairs_( src, src, nothing1 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDstPairs_( src, src, nothing1 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDstPairs_( src, src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairs_( src, src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairs_( src, src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairs_( src, src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstPairs_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairs_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstPairs_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairs_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairs_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstPairs_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing1' );

  /* - */

  test.open( 'nothing2' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDstPairs_( src, src, nothing2 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDstPairs_( src, src, nothing2 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDstPairs_( src, src, nothing2 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDstPairs_( src, src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairs_( src, src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairs_( src, src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairs_( src, src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstPairs_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairs_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstPairs_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairs_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairs_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstPairs_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing2' );

  /* - */

  test.open( 'nothing3' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDstPairs_( src, src, nothing3 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDstPairs_( src, src, nothing3 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDstPairs_( src, src, nothing3 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDstPairs_( src, src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairs_( src, src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairs_( src, src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairs_( src, src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstPairs_( src, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairs_( src, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstPairs_( src, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairs_( src, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairs_( src, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstPairs_( src, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing3' );

  /* - */

  test.open( 'nothing4' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDstPairs_( src, src, nothing4 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDstPairs_( src, src, nothing4 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDstPairs_( src, src, nothing4 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDstPairs_( src, src, nothing4 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairs_( src, src, nothing4 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairs_( src, src, nothing4 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairs_( src, src, nothing4 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstPairs_( src, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairs_( src, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstPairs_( src, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairs_( src, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairs_( src, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( src, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( src, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstPairs_( src, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing4' );

  /* - */

  test.open( 'complex map' );

  var srcMap =
  {
    '/true' : true,
    '/false' : false,
    '/string1' : '/dir1',
    '/string2' : '',
    '/null' : null,
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '' : [ '/dir1', '/dir2', '', null ],
    '/emptyArray' : [],
  };

  test.case = 'double';
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterDstPairs_( src, src, double );
  var expected =
  {
    '/true/true' : true,
    '/true' : true,
    '/false/false' : false,
    '/false' : false,
    '/string1/string1' : '/dir1/dir1',
    '/string1' : '/dir1',
    '/string2/string2' : '',
    '/string2' : '',
    '/null/null' : '',
    '/null' : '',
    '' : [ '/dir1/dir1', '/dir1', '/dir2/dir2', '/dir2' ],
    'nullnull' : '/dir3/dir3',
    'null' : '/dir3',
    '/array/array' : [ '/dir1/dir1', '/dir2/dir2' ],
    '/array' : [ '/dir1', '/dir2' ],
    '/emptyArray/emptyArray' : '',
    '/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly1';
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterDstPairs_( src, src, srcOnly1 );
  var expected =
  {
    '/true' : '',
    '/false' : '',
    '/string1' : '',
    '/string2' : '',
    '/null' : '',
    'null' : '',
    '/array' : '',
    '/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly2';
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterDstPairs_( src, src, srcOnly2 );
  var expected =
  {
    '/true' : true,
    '/false' : false,
    '/string1' : '/dir1',
    '/string2' : '',
    '/null' : '',
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly3';
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterDstPairs_( src, src, srcOnly3 );
  var expected =
  {
    '/true' : true,
    '/false' : false,
    '/string1' : '/dir1',
    '/string2' : '',
    '/null' : '',
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'dstOnly';
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterDstPairs_( src, src, dstOnly );
  var expected =
  {
    '' : [ '/dir1', '/dir3', '/dir2' ]
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'dstDouble';
  var src = _.props.supplement( {}, srcMap );
  delete src[ '' ];
  var got = _.path.filterDstPairs_( src, src, dstDouble );
  var expected = { '' : [ '/dir1', '/dir3', '/dir2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing1';
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterDstPairs_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing2';
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterDstPairs_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing3';
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterDstPairs_( src, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing4';
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterDstPairs_( src, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'complex map' );

  /* - */

  test.case = 'duplicates';
  var src = { '' : [ '/b', null, null, '', '', '/b' ] };
  var got = _.path.filterDstPairs_( src, src, duplicates );
  var expected = { '' : '/b' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates, onEach return array';
  var src = [ '/b', null, null, '', '', '/b' ];
  var got = _.path.filterDstPairs_( src, src, ( it ) => [ it.src, '/file', '/dst', '', null, '', null, undefined ] );
  var expected = { '/file' : '/b', '/dst' : '/b' };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'duplicates, onEach return array';
  var src = { 'dir' : [ '/b', null, null, '', '', '/b' ] };
  var got = _.path.filterDstPairs_( src, src, ( it ) => [ it.src, '/file', '/dst', '', null, '', null, undefined ] );
  var expected = { 'dir' : '/b', '/file' : '/b', '/dst' : '/b' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates';
  var src = { '/dir1' : '/dir2', '/a' : '/b' };
  var got = _.path.filterDstPairs_( src, src, duplicates );
  var expected = { '/dir1' : '/dir2', '/a' : '/b' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in map';
  var src = { '/dir1' : '/dir2', '/a' : '/b', '/empty' : '', '' : '/file', '/null' : null };
  var got = _.path.filterDstPairs_( src, src, duplicates );
  var expected = { '/dir1' : '/dir2', '/a' : '/b', '/empty' : '', '' : '/file', '/null' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in map';
  var src = { '/dir1' : '/dir2', '/a' : '/b', '/empty' : '', '/null' : null };
  var got = _.path.filterDstPairs_( src, src, duplicates );
  var expected = { '/dir1' : '/dir2', '/a' : '/b', '/empty' : '', '/null' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/dir1', '/a', null, '', '', null ];
  var got = _.path.filterDstPairs_( src, src, duplicates2 );
  var expected = { '1' : [ '/dir1', '/a' ] };
  test.identical( got, expected );
  test.true( got !== src );

  /* - */

  test.case = 'boolean values';
  var src = [ '/dir1', true, null, '', '', null ];
  var got = _.path.filterDstPairs_( src, src, duplicates2 );
  var expected = { '1' : '/dir1' };
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'boolean values';
  var src = { '/dir' : true, '/a' : null, '/b' : '', '' : null };
  var got = _.path.filterDstPairs_( src, src, duplicates );
  var expected = { '/dir' : true, '/a' : '', '/b' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'boolean in callback, bool and null values in src';
  var src = { '/dir' : true, '/a' : null, '/b' : '', '' : null };
  var got = _.path.filterDstPairs_( src, src, bool );
  var expected = { '/dir' : true, '/a' : true, '/b' : true, '' : true };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'boolean in callback, str value in src';
  var src = { '/dir' : false, '/a' : '/dir', '/b' : '', '' : null };
  var got = _.path.filterDstPairs_( src, src, bool );
  var expected = { '/dir' : true, '/a' : true, '/b' : true, '' : true };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'boolean in callback, bool and null values in src';
  var src = { '/dir' : true, '/a' : null, '/b' : '', '' : null };
  var got = _.path.filterDstPairs_( src, src, bool2 );
  var expected = { '/dir' : false, '/a' : false, '/b' : false, '' : false };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'boolean in callback, str value in src';
  var src = { '/dir' : false, '/a' : '/dir', '/b' : '', '' : null };
  var got = _.path.filterDstPairs_( src, src, bool2 );
  var expected = { '/dir' : false, '/a' : false, '/b' : false, '' : false };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'boolean in callback, str value in src';
  var src = { '/dir' : true, '/a' : false, '/b' : '' };
  var got = _.path.filterDstPairs_( src, src, uncorrectMap );
  var expected = { '/dir' : '/dst', '/a' : false, '/b' : false };
  test.identical( got, expected );
  test.true( got === src );

  /* - */

  if( Config.debug )
  {
    test.open( 'throwing' );

    test.case = 'without arguments';
    test.shouldThrowErrorSync( () => _.path.filterDstPairs_() );

    test.case = 'extra arguments';
    test.shouldThrowErrorSync( () => _.path.filterDstPairs_( '/src', double, nothing1 ) );

    test.case = 'onEach is not a routine';
    test.shouldThrowErrorSync( () => _.path.filterDstPairs_( '/src', [ double ] ) );

    test.case = 'wrong type of filePath';
    test.shouldThrowErrorSync( () => _.path.filterDstPairs_( 1, double ) );
    test.shouldThrowErrorSync( () => _.path.filterDstPairs_( { '/path' : {} }, double ) );
    test.shouldThrowErrorSync( () => _.path.filterDstPairs_( { '/path' : undefined }, double ) );

    test.case = 'wrong type of onEach';
    test.shouldThrowErrorSync( () => _.path.filterDstPairs_( '/path', '/path' ) );

    test.close( 'throwing' );
  }

  /* - */

  function duplicates2( it )
  {
    return [ it.src, it.src, it.src + 1, '', '', null ];
  }

  function duplicates( it )
  {
    return { [ it.src ] : [ it.dst, it.dst, it.dst, '', '', null ] };
  }

  function bool( it )
  {
    return { [ it.src ] : true };
  }

  function bool2( it )
  {
    return { [ it.src ] : false };
  }

  function uncorrectMap( it )
  {
    if( it.dst === true )
    return { [ it.src ] : [ true, false, '', null, true, false, '', null, '/dst', true ] };
    if( it.dst === false )
    return { [ it.src ] : [ true, false, '', null, true, false, '', null, '/dst', false ] };
    else
    return { [ it.src ] : [ true, false, '', null, true, false, '', null, '/dst', true, false ] };
  }

  function double( it )
  {
    if( it.src === null )
    _.assert( 0 );
    if( it.src === '' )
    return { [ it.src ] : [ it.dst + it.dst, it.dst ] };
    else
    return { [ it.src + it.src ] : _.strIs( it.dst ) ? it.dst + it.dst : it.dst, [ it.src ] : it.dst };
  }

  function srcOnly1( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return { [ it.src ] : '' };
  }

  function srcOnly2( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return it.src;
  }

  function srcOnly3( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return [ it.src ];
  }

  function dstOnly( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return { '' : it.dst };
  }

  function dstDouble( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return { '' : [ it.dst, it.dst ] };
  }

  function nothing1( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return {};
  }

  function nothing2( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return [];
  }

  function nothing3( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return '';
  }

  function nothing4( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return null;
  }

  function returnSelf( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return it;
  }

  function arrayInSelf( it )
  {
    if( it.src === null )
    _.assert( 0 );
    it.src = [ it.src, it.src + 1 ];
    return it;
  }

}

//

function filterPairsWithDst_( test )
{
  test.open( 'instance' );

  function constructor ( val )
  {
    this.value = val;
    return this;
  }
  var obj = new constructor;

  test.case = 'double';
  var dst = [];
  var src = { '/path' : obj };
  var got = _.path.filterPairs_( dst, src, double );
  var expected = [ '/path/path', '/path' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'srcOnly1';
  var dst = {};
  var src = { '/path' : obj };
  var got = _.path.filterPairs_( dst, src, srcOnly1 );
  var expected = { '/path' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'srcOnly2';
  var dst = { 'a' : 'b' };
  var src = { '/path' : obj };
  var got = _.path.filterPairs_( dst, src, srcOnly2 );
  var expected = { 'a' : 'b', '/path' : obj };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'srcOnly3';
  var dst = {};
  var src = { '/path' : obj };
  var got = _.path.filterPairs_( dst, src, srcOnly3 );
  var expected = { '/path' : obj };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  var src = { '/path' : [ obj, obj ] };
  var dst = {};
  var got = _.path.filterPairs_( dst, src, srcOnly3 );
  var expected = { '/path' : obj };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'dstOnly';
  var dst = {};
  var src = { '/path' : obj };
  var got = _.path.filterPairs_( dst, src, dstOnly );
  var expected = { '' : obj };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'dstDouble';
  var dst = {};
  var src = { '/path' : obj };
  var got = _.path.filterPairs_( dst, src, dstDouble );
  var expected = { '' : obj };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'nothing1';
  var dst = {};
  var src = { '/path' : obj };
  var got = _.path.filterPairs_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'nothing2';
  var dst = {};
  var src = { '/path' : obj };
  var got = _.path.filterPairs_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'nothing3';
  var dst = {};
  var src = { '/path' : obj };
  var got = _.path.filterPairs_( dst, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'nothing4';
  var dst = {};
  var src = { '/path' : obj };
  var got = _.path.filterPairs_( dst, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.close( 'instance' );

  /* - */

  test.open( 'double' );

  test.case = 'null';
  var dst = {};
  var src = null;
  var got = _.path.filterPairs_( dst, src, double );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty';
  var dst = [];
  var src = '';
  var got = _.path.filterPairs_( dst, src, double );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'string';
  var dst = [];
  var src = '/a/b';
  var got = _.path.filterPairs_( dst, src, double );
  var expected = [ '/a/b/a/b', '/a/b' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty array';
  var dst = [ '/path' ];
  var src = [];
  var got = _.path.filterPairs_( dst, src, double );
  var expected = [ '/path' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element array';
  var dst = [];
  var src = [ '/a/b' ];
  var got = _.path.filterPairs_( dst, src, double );
  var expected = [ '/a/b/a/b', '/a/b' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'several elements array';
  var dst = [];
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairs_( dst, src, double );
  var expected = [ '/a/b/a/b', '/a/b', '/cd/cd', '/cd' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'duplicates in array';
  var dst = {};
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairs_( dst, src, double );
  var expected = { '/a/b/a/b' : '', '/a/b' : '', '/c/d/c/d' : '', '/c/d' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty map';
  var dst = [];
  var src = {};
  var got = _.path.filterPairs_( dst, src, double );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst and src';
  var dst = {};
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairs_( dst, src, double );
  var expected = { '/src/src' : 'dstdst', '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single empty array and src';
  var dst = {};
  var src = { '/src' : [] };
  var got = _.path.filterPairs_( dst, src, double );
  var expected = { '/src/src' : '', '/src' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairs_( dst, src, double );
  var expected = { '/src/src' : 'dstdst', '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in multiple element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( dst, src, double );
  var expected = { '/src/src' : [ 'dst1dst1', 'dst2dst2' ], '/src' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst';
  var dst = {};
  var src = { '' : 'dst' };
  var got = _.path.filterPairs_( dst, src, double );
  var expected = { '' : [ 'dstdst', 'dst' ] };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in empty array';
  var dst = {};
  var src = { '' : [ '' ] };
  var got = _.path.filterPairs_( dst, src, double );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in single element array';
  var dst = {};
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairs_( dst, src, double );
  var expected = { '' : [ 'dstdst', 'dst' ] };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in multiple element array';
  var dst = {};
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( dst, src, double );
  var expected = { '' : [ 'dst1dst1', 'dst1', 'dst2dst2', 'dst2' ] };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only src';
  var dst = [];
  var src = { '/src' : '' };
  var got = _.path.filterPairs_( dst, src, double );
  var expected = [ '/src/src', '/src' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.close( 'double' );

  /* - */

  test.open( 'srcOnly1' );

  test.case = 'null';
  var dst = [];
  var src = null;
  var got = _.path.filterPairs_( dst, src, srcOnly1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty';
  var dst = {};
  var src = '';
  var got = _.path.filterPairs_( dst, src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'string';
  var dst = null;
  var src = '/a/b';
  var got = _.path.filterPairs_( dst, src, srcOnly1 );
  var expected = '/a/b';
  test.identical( got, expected );
  test.true( got === src );
  test.true( got !== dst );

  test.case = 'empty array';
  var dst = null;
  var src = [];
  var got = _.path.filterPairs_( dst, src, srcOnly1 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got !== dst );

  test.case = 'single element array';
  var dst = null;
  var src = [ '/a/b' ];
  var got = _.path.filterPairs_( dst, src, srcOnly1 );
  var expected = '/a/b';
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got !== dst );

  test.case = 'several elements array';
  var dst = {};
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairs_( dst, src, srcOnly1 );
  var expected = { '/a/b' : '', '/cd' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'duplicates in array';
  var dst = [ '/a/b', '/c/d' ];
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairs_( dst, src, srcOnly1 );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty map';
  var dst = {};
  var src = {};
  var got = _.path.filterPairs_( dst, src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst and src';
  var dst = {};
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairs_( dst, src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single empty array and src';
  var dst = { '' : '/dst' };
  var src = { '/src' : [] };
  var got = _.path.filterPairs_( dst, src, srcOnly1 );
  var expected = { '' : '/dst', '/src' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairs_( dst, src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in multiple element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( dst, src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst';
  var dst = {};
  var src = { '' : 'dst' };
  var got = _.path.filterPairs_( dst, src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in empty array';
  var dst = {};
  var src = { '' : [ '' ] };
  var got = _.path.filterPairs_( dst, src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in single element array';
  var dst = {};
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairs_( dst, src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in multiple element array';
  var dst = {};
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( dst, src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only src';
  var dst = {};
  var src = { '/src' : '' };
  var got = _.path.filterPairs_( dst, src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.close( 'srcOnly1' );

  /* - */

  test.open( 'srcOnly2' );

  test.case = 'null';
  var dst = [ '/path', false, '' ];
  var src = null;
  var got = _.path.filterPairs_( dst, src, srcOnly2 );
  var expected = [ '/path', false ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty';
  var dst = [ false, 1, undefined, [] ];
  var src = '';
  var got = _.path.filterPairs_( dst, src, srcOnly2 );
  var expected = [ false, 1, undefined, [] ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'string';
  var dst = [];
  var src = '/a/b';
  var got = _.path.filterPairs_( dst, src, srcOnly2 );
  var expected = [ '/a/b' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty array';
  var dst = {};
  var src = [];
  var got = _.path.filterPairs_( dst, src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element array';
  var dst = {};
  var src = [ '/a/b' ];
  var got = _.path.filterPairs_( dst, src, srcOnly2 );
  var expected = { '/a/b' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'several elements array';
  var dst = [ 1, 2, 3 ];
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairs_( dst, src, srcOnly2 );
  var expected = [ 1, 2, 3, '/a/b', '/cd' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'duplicates in array';
  var dst = [];
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairs_( dst, src, srcOnly2 );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty map';
  var dst = {};
  var src = {};
  var got = _.path.filterPairs_( dst, src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst and src';
  var dst = {};
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairs_( dst, src, srcOnly2 );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single empty array and src';
  var dst = {};
  var src = { '/src' : [] };
  var got = _.path.filterPairs_( dst, src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairs_( dst, src, srcOnly2 );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in multiple element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( dst, src, srcOnly2 );
  var expected = { '/src' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst';
  var dst = {};
  var src = { '' : 'dst' };
  var got = _.path.filterPairs_( dst, src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in empty array';
  var dst = {};
  var src = { '' : [ '' ] };
  var got = _.path.filterPairs_( dst, src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in single element array';
  var dst = {};
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairs_( dst, src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in multiple element array';
  var dst = {};
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( dst, src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only src';
  var dst = {};
  var src = { '/src' : '' };
  var got = _.path.filterPairs_( dst, src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.close( 'srcOnly2' );

  /* - */

  test.open( 'srcOnly3' );

  test.case = 'null';
  var dst = [ '/a', '/b' ];
  var src = null;
  var got = _.path.filterPairs_( dst, src, srcOnly3 );
  var expected = [ '/a', '/b' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty';
  var dst = { 'a' : '/b' };
  var src = '';
  var got = _.path.filterPairs_( dst, src, srcOnly3 );
  var expected = { 'a' : '/b' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'string';
  var dst = { '/a/b' : '/c/d' };
  var src = '/a/b';
  var got = _.path.filterPairs_( dst, src, srcOnly3 );
  var expected = { '/a/b' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty array';
  var dst = [];
  var src = [];
  var got = _.path.filterPairs_( dst, src, srcOnly3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element array';
  var dst = [];
  var src = [ '/a/b' ];
  var got = _.path.filterPairs_( dst, src, srcOnly3 );
  var expected = [ '/a/b' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'several elements array';
  var dst = [];
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairs_( dst, src, srcOnly3 );
  var expected = [ '/a/b', '/cd' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'duplicates in array';
  var dst = [];
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairs_( dst, src, srcOnly3 );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty map';
  var dst = {};
  var src = {};
  var got = _.path.filterPairs_( dst, src, srcOnly3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst and src';
  var dst = {};
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairs_( dst, src, srcOnly3 );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single empty array and src';
  var dst = {};
  var src = { '/src' : [] };
  var got = _.path.filterPairs_( dst, src, srcOnly3 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairs_( dst, src, srcOnly3 );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in multiple element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( dst, src, srcOnly3 );
  var expected = { '/src' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst';
  var dst = {};
  var src = { '' : 'dst' };
  var got = _.path.filterPairs_( dst, src, srcOnly3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in empty array';
  var dst = {};
  var src = { '' : [ '' ] };
  var got = _.path.filterPairs_( dst, src, srcOnly3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in single element array';
  var dst = {};
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairs_( dst, src, srcOnly3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in multiple element array';
  var dst = {};
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( dst, src, srcOnly3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only src';
  var dst = {};
  var src = { '/src' : '' };
  var got = _.path.filterPairs_( dst, src, srcOnly3 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.close( 'srcOnly3' );

  /* - */

  test.open( 'dstOnly' );

  test.case = 'null';
  var dst = null;
  var src = null;
  var got = _.path.filterPairs_( dst, src, dstOnly );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got !== dst );

  test.case = 'empty';
  var dst = {};
  var src = '';
  var got = _.path.filterPairs_( dst, src, dstOnly );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'string';
  var dst = {};
  var src = '/a/b';
  var got = _.path.filterPairs_( dst, src, dstOnly );
  var expected = {};
  test.identical( got, expected );

  test.case = 'empty array';
  var dst = null;
  var src = [];
  var got = _.path.filterPairs_( dst, src, dstOnly );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got !== dst );

  test.case = 'single element array';
  var dst = [ '/cd' ]
  var src = [ '/a/b' ];
  var got = _.path.filterPairs_( dst, src, dstOnly );
  var expected = [ '/cd' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'several elements array';
  var dst = [];
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairs_( dst, src, dstOnly );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'duplicates in array';
  var dst = { 'a' : '/b' };
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairs_( dst, src, dstOnly );
  var expected = { 'a' : '/b' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty map';
  var dst = [];
  var src = {};
  var got = _.path.filterPairs_( dst, src, dstOnly );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst and src';
  var dst = [];
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairs_( dst, src, dstOnly );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single empty array and src';
  var dst = {};
  var src = { '/src' : [] };
  var got = _.path.filterPairs_( dst, src, dstOnly );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairs_( dst, src, dstOnly );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in multiple element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( dst, src, dstOnly );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst';
  var dst = {};
  var src = { '' : 'dst' };
  var got = _.path.filterPairs_( dst, src, dstOnly );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in empty array';
  var dst = {};
  var src = { '' : [ '' ] };
  var got = _.path.filterPairs_( dst, src, dstOnly );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in single element array';
  var dst = {};
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairs_( dst, src, dstOnly );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in multiple element array';
  var dst = {};
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( dst, src, dstOnly );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only src';
  var dst = {};
  var src = { '/src' : '' };
  var got = _.path.filterPairs_( dst, src, dstOnly );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.close( 'dstOnly' );

  /* - */

  test.open( 'dstDouble' );

  test.case = 'null';
  var dst = [];
  var src = null;
  var got = _.path.filterPairs_( dst, src, dstDouble );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty';
  var dst = {};
  var src = '';
  var got = _.path.filterPairs_( dst, src, dstDouble );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'string';
  var dst = {};
  var src = '/a/b';
  var got = _.path.filterPairs_( dst, src, dstDouble );
  var expected = {};
  test.identical( got, expected );

  test.case = 'empty array';
  var dst = {};
  var src = [];
  var got = _.path.filterPairs_( dst, src, dstDouble );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element array';
  var dst = { '/c' : '/d' };
  var src = [ '/a/b' ];
  var got = _.path.filterPairs_( dst, src, dstDouble );
  var expected = { '/c' : '/d' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'several elements array';
  var dst = {};
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairs_( dst, src, dstDouble );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'duplicates in array';
  var dst = {};
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairs_( dst, src, dstDouble );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty map';
  var dst = [ '/a/b' ];
  var src = {};
  var got = _.path.filterPairs_( dst, src, dstDouble );
  var expected = [ '/a/b' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst and src';
  var dst = {};
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairs_( dst, src, dstDouble );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single empty array and src';
  var dst = {};
  var src = { '/src' : [] };
  var got = _.path.filterPairs_( dst, src, dstDouble );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairs_( dst, src, dstDouble );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in multiple element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( dst, src, dstDouble );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst';
  var dst = {};
  var src = { '' : 'dst' };
  var got = _.path.filterPairs_( dst, src, dstDouble );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in empty array';
  var dst = {};
  var src = { '' : [ '' ] };
  var got = _.path.filterPairs_( dst, src, dstDouble );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in single element array';
  var dst = {};
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairs_( dst, src, dstDouble );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in multiple element array';
  var dst = {};
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( dst, src, dstDouble );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only src';
  var dst = {};
  var src = { '/src' : '' };
  var got = _.path.filterPairs_( dst, src, dstDouble );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.close( 'dstDouble' );

  /* - */

  test.open( 'returns self' );

  test.case = 'null';
  var dst = [];
  var src = null;
  var got = _.path.filterPairs_( dst, src, returnSelf );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty';
  var dst = {};
  var src = '';
  var got = _.path.filterPairs_( dst, src, returnSelf );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'string';
  var dst = {};
  var src = '/a/b';
  var got = _.path.filterPairs_( dst, src, returnSelf );
  var expected = { '/a/b' : '' };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty array';
  var dst = [ '/a/b' ];
  var src = [];
  var got = _.path.filterPairs_( dst, src, returnSelf );
  var expected = [ '/a/b' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element array';
  var dst = [];
  var src = [ '/a/b' ];
  var got = _.path.filterPairs_( dst, src, returnSelf );
  var expected = [ '/a/b' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'several elements array';
  var dst = {};
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairs_( dst, src, returnSelf );
  var expected = { '/a/b' : '', '/cd' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'duplicates in array';
  var dst = [];
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairs_( dst, src, returnSelf );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty map';
  var dst = { 'src' : 'dst' };
  var src = {};
  var got = _.path.filterPairs_( dst, src, returnSelf );
  var expected = { 'src' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst and src';
  var dst = {};
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairs_( dst, src, returnSelf );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single empty array and src';
  var dst = [];
  var src = { '/src' : [] };
  var got = _.path.filterPairs_( dst, src, returnSelf );
  var expected = [ '/src' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single element array and src';
  var dst = [];
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairs_( dst, src, returnSelf );
  var expected = [ '/src' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in multiple element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( dst, src, returnSelf );
  var expected = { '/src' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst';
  var dst = {};
  var src = { '' : 'dst' };
  var got = _.path.filterPairs_( dst, src, returnSelf );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in empty array';
  var dst = null;
  var src = { '' : [ '' ] };
  var got = _.path.filterPairs_( dst, src, returnSelf );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got !== dst );

  test.case = 'single element map with only dst in single element array';
  var dst = [];
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairs_( dst, src, returnSelf );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in multiple element array';
  var dst = {};
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( dst, src, returnSelf );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only src';
  var dst = {};
  var src = { '/src' : '' };
  var got = _.path.filterPairs_( dst, src, returnSelf );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.close( 'returns self' );

  /* - */

  test.open( 'returns self with array' );

  test.case = 'null';
  var dst = [];
  var src = null;
  var got = _.path.filterPairs_( dst, src, arrayInSelf );
  var expected = [ '1' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty';
  var dst = {};
  var src = '';
  var got = _.path.filterPairs_( dst, src, arrayInSelf );
  var expected = { '1' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'string';
  var dst = [];
  var src = '/a/b';
  var got = _.path.filterPairs_( dst, src, arrayInSelf );
  var expected = [ '/a/b', '/a/b1' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty array';
  var dst = [];
  var src = [];
  var got = _.path.filterPairs_( dst, src, arrayInSelf );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element array';
  var dst = {};
  var src = [ '/a/b' ];
  var got = _.path.filterPairs_( dst, src, arrayInSelf );
  var expected = { '/a/b' : '', '/a/b1' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'several elements array';
  var dst = [];
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairs_( dst, src, arrayInSelf );
  var expected = [ '/a/b', '/a/b1', '/cd', '/cd1' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'duplicates in array';
  var dst = [];
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairs_( dst, src, arrayInSelf );
  var expected = [ '/a/b', '/a/b1', '/c/d', '/c/d1' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty map';
  var dst = {};
  var src = {};
  var got = _.path.filterPairs_( dst, src, arrayInSelf );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst and src';
  var dst = [];
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairs_( dst, src, arrayInSelf );
  var expected = [ '/src', '/src1' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single empty array and src';
  var dst = {};
  var src = { '/src' : [] };
  var got = _.path.filterPairs_( dst, src, arrayInSelf );
  var expected = { '/src' : '', '/src1' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairs_( dst, src, arrayInSelf );
  var expected = { '/src' : 'dst', '/src1' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in multiple element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( dst, src, arrayInSelf );
  var expected = { '/src' : [ 'dst1', 'dst2' ], '/src1' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst';
  var dst = {};
  var src = { '' : 'dst' };
  var got = _.path.filterPairs_( dst, src, arrayInSelf );
  var expected = { '' : 'dst', '1' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in empty array';
  var dst = {};
  var src = { '' : [ '' ] };
  var got = _.path.filterPairs_( dst, src, arrayInSelf );
  var expected = { '1' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in single element array';
  var dst = {};
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairs_( dst, src, arrayInSelf );
  var expected = { '' : 'dst', '1' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in multiple element array';
  var dst = {};
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( dst, src, arrayInSelf );
  var expected = { '' : [ 'dst1', 'dst2' ], '1' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only src';
  var dst = {};
  var src = { '/src' : '' };
  var got = _.path.filterPairs_( dst, src, arrayInSelf );
  var expected = { '/src' : '', '/src1' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.close( 'returns self with array' );

  /* - */

  test.open( 'nothing1' );

  test.case = 'null';
  var dst = {};
  var src = null;
  var got = _.path.filterPairs_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty';
  var dst = [];
  var src = '';
  var got = _.path.filterPairs_( dst, src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'string';
  var dst = {};
  var src = '/a/b';
  var got = _.path.filterPairs_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );

  test.case = 'empty array';
  var dst = [];
  var src = [];
  var got = _.path.filterPairs_( dst, src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element array';
  var dst = [];
  var src = [ '/a/b' ];
  var got = _.path.filterPairs_( dst, src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'several elements array';
  var dst = {};
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairs_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'duplicates in array';
  var dst = [];
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairs_( dst, src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty map';
  var dst = {};
  var src = {};
  var got = _.path.filterPairs_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst and src';
  var dst = {};
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairs_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single empty array and src';
  var dst = {};
  var src = { '/src' : [] };
  var got = _.path.filterPairs_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairs_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in multiple element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst';
  var dst = {};
  var src = { '' : 'dst' };
  var got = _.path.filterPairs_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in empty array';
  var dst = {};
  var src = { '' : [ '' ] };
  var got = _.path.filterPairs_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in single element array';
  var dst = {};
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairs_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in multiple element array';
  var dst = {};
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only src';
  var dst = {};
  var src = { '/src' : '' };
  var got = _.path.filterPairs_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.close( 'nothing1' );

  /* - */

  test.open( 'nothing2' );

  test.case = 'null';
  var dst = [];
  var src = null;
  var got = _.path.filterPairs_( dst, src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty';
  var dst = {};
  var src = '';
  var got = _.path.filterPairs_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'string';
  var dst = {};
  var src = '/a/b';
  var got = _.path.filterPairs_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty array';
  var dst = [];
  var src = [];
  var got = _.path.filterPairs_( dst, src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element array';
  var dst = [];
  var src = [ '/a/b' ];
  var got = _.path.filterPairs_( dst, src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'several elements array';
  var dst = {};
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairs_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'duplicates in array';
  var dst = [];
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairs_( dst, src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty map';
  var dst = {};
  var src = {};
  var got = _.path.filterPairs_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst and src';
  var dst = [];
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairs_( dst, src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single empty array and src';
  var dst = {};
  var src = { '/src' : [] };
  var got = _.path.filterPairs_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairs_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in multiple element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst';
  var dst = {};
  var src = { '' : 'dst' };
  var got = _.path.filterPairs_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in empty array';
  var dst = {};
  var src = { '' : [ '' ] };
  var got = _.path.filterPairs_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in single element array';
  var dst = {};
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairs_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in multiple element array';
  var dst = {};
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only src';
  var dst = {};
  var src = { '/src' : '' };
  var got = _.path.filterPairs_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.close( 'nothing2' );

  /* - */

  test.open( 'nothing3' );

  test.case = 'null';
  var dst = {};
  var src = null;
  var got = _.path.filterPairs_( dst, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty';
  var dst = {};
  var src = '';
  var got = _.path.filterPairs_( dst, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'string';
  var dst = [];
  var src = '/a/b';
  var got = _.path.filterPairs_( dst, src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty array';
  var dst = [];
  var src = [];
  var got = _.path.filterPairs_( dst, src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element array';
  var dst = [ '/c/d' ];
  var src = [ '/a/b' ];
  var got = _.path.filterPairs_( dst, src, nothing3 );
  var expected = [ '/c/d' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'several elements array';
  var dst = { 'a' : '/b' };
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairs_( dst, src, nothing3 );
  var expected = { 'a' : '/b' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'duplicates in array';
  var dst = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairs_( dst, src, nothing3 );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty map';
  var dst = {};
  var src = {};
  var got = _.path.filterPairs_( dst, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst and src';
  var dst = [];
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairs_( dst, src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single empty array and src';
  var dst = {};
  var src = { '/src' : [] };
  var got = _.path.filterPairs_( dst, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairs_( dst, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in multiple element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( dst, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst';
  var dst = {};
  var src = { '' : 'dst' };
  var got = _.path.filterPairs_( dst, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in empty array';
  var dst = {};
  var src = { '' : [ '' ] };
  var got = _.path.filterPairs_( dst, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in single element array';
  var dst = {};
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairs_( dst, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in multiple element array';
  var dst = {};
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( dst, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only src';
  var dst = {};
  var src = { '/src' : '' };
  var got = _.path.filterPairs_( dst, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.close( 'nothing3' );

  /* - */

  test.open( 'nothing4' );

  test.case = 'null';
  var dst = null;
  var src = null;
  var got = _.path.filterPairs_( dst, src, nothing4 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got !== dst );

  test.case = 'empty';
  var dst = {};
  var src = '';
  var got = _.path.filterPairs_( dst, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'string';
  var dst = {};
  var src = '/a/b';
  var got = _.path.filterPairs_( dst, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty array';
  var dst = null;
  var src = [];
  var got = _.path.filterPairs_( dst, src, nothing4 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got !== dst );

  test.case = 'single element array';
  var dst = null;
  var src = [ '/a/b' ];
  var got = _.path.filterPairs_( dst, src, nothing4 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got !== dst );

  test.case = 'several elements array';
  var dst = [];
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterPairs_( dst, src, nothing4 );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'duplicates in array';
  var dst = [];
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterPairs_( dst, src, nothing4 );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty map';
  var dst = {};
  var src = {};
  var got = _.path.filterPairs_( dst, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst and src';
  var dst = {};
  var src = { '/src' : 'dst' };
  var got = _.path.filterPairs_( dst, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single empty array and src';
  var dst = {};
  var src = { '/src' : [] };
  var got = _.path.filterPairs_( dst, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single element array and src';
  var dst = null;
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterPairs_( dst, src, nothing4 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got !== dst );

  test.case = 'single element map with dst in multiple element array and src';
  var dst = null;
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( dst, src, nothing4 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got !== dst );

  test.case = 'single element map with only dst';
  var dst = {};
  var src = { '' : 'dst' };
  var got = _.path.filterPairs_( dst, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in empty array';
  var dst = {};
  var src = { '' : [ '' ] };
  var got = _.path.filterPairs_( dst, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in single element array';
  var dst = {};
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterPairs_( dst, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in multiple element array';
  var dst = {};
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterPairs_( dst, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only src';
  var dst = {};
  var src = { '/src' : '' };
  var got = _.path.filterPairs_( dst, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.close( 'nothing4' );

  /* - */

  test.open( 'complex map' );

  var srcMap =
  {
    '/true' : true,
    '/false' : false,
    '/string1' : '/dir1',
    '/string2' : '',
    '/null' : null,
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '' : [ '/dir1', '/dir2', '', null ],
    '/emptyArray' : [],
  };

  test.case = 'double';
  var dst = {};
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterPairs_( dst, src, double );
  var expected =
  {
    '/true/true' : true,
    '/true' : true,
    '/false/false' : false,
    '/false' : false,
    '/string1/string1' : '/dir1/dir1',
    '/string1' : '/dir1',
    '/string2/string2' : '',
    '/string2' : '',
    '/null/null' : '',
    '/null' : '',
    '' : [ '/dir1/dir1', '/dir1', '/dir2/dir2', '/dir2' ],
    'nullnull' : '/dir3/dir3',
    'null' : '/dir3',
    '/array/array' : [ '/dir1/dir1', '/dir2/dir2' ],
    '/array' : [ '/dir1', '/dir2' ],
    '/emptyArray/emptyArray' : '',
    '/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'srcOnly1';
  var dst = {};
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterPairs_( dst, src, srcOnly1 );
  var expected =
  {
    '/true' : '',
    '/false' : '',
    '/string1' : '',
    '/string2' : '',
    '/null' : '',
    'null' : '',
    '/array' : '',
    '/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'srcOnly2';
  var dst = {};
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterPairs_( dst, src, srcOnly2 );
  var expected =
  {
    '/true' : true,
    '/false' : false,
    '/string1' : '/dir1',
    '/string2' : '',
    '/null' : '',
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'srcOnly3';
  var dst = {};
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterPairs_( dst, src, srcOnly3 );
  var expected =
  {
    '/true' : true,
    '/false' : false,
    '/string1' : '/dir1',
    '/string2' : '',
    '/null' : '',
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'dstOnly';
  var dst = {};
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterPairs_( dst, src, dstOnly );
  var expected =
  {
    '' : [ '/dir1', '/dir3', '/dir2' ]
  };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'dstDouble';
  var dst = {};
  var src = _.props.supplement( {}, srcMap );
  delete src[ '' ];
  var got = _.path.filterPairs_( dst, src, dstDouble );
  var expected = { '' : [ '/dir1', '/dir3', '/dir2' ] };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'nothing1';
  var dst = {};
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterPairs_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'nothing2';
  var dst = {};
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterPairs_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'nothing3';
  var dst = [];
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterPairs_( dst, src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'nothing4';
  var dst = [];
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterPairs_( dst, src, nothing4 );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.close( 'complex map' );

  /* - */

  test.case = 'duplicates';
  var dst = {};
  var src = { '' : [ '/b', null, null, '', '', '/b' ] };
  var got = _.path.filterPairs_( dst, src, duplicates );
  var expected = { '' : '/b' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'duplicates, onEach return array';
  var dst = {};
  var src = [ '/b', null, null, '', '', '/b' ];
  var got = _.path.filterPairs_( dst, src, ( it ) => [ it.src, '/file', '/dst', '', null, '', null, undefined ] );
  var expected = { '/b' : '', '/file' : '', '/dst' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'duplicates, onEach return array';
  var dst = {};
  var src = { 'dir' : [ '/b', null, null, '', '', '/b' ] };
  var got = _.path.filterPairs_( dst, src, ( it ) => [ it.src, '/file', '/dst', '', null, '', null, undefined ] );
  var expected = { 'dir' : '/b', '/file' : '/b', '/dst' : '/b' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'duplicates';
  var dst = [];
  var src = { '/dir1' : '/dir2', '/a' : '/b' };
  var got = _.path.filterPairs_( dst, src, duplicates );
  var expected = [ '/dir1', '/a' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'duplicates in map';
  var dst = {};
  var src = { '/dir1' : '/dir2', '/a' : '/b', '/empty' : '', '' : '/file', '/null' : null };
  var got = _.path.filterPairs_( dst, src, duplicates );
  var expected = { '/dir1' : '/dir2', '/a' : '/b', '/empty' : '', '' : '/file', '/null' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'duplicates in map';
  var dst = {};
  var src = { '/dir1' : '/dir2', '/a' : '/b', '/empty' : '', '/null' : null };
  var got = _.path.filterPairs_( dst, src, duplicates );
  var expected = { '/dir1' : '/dir2', '/a' : '/b', '/empty' : '', '/null' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'duplicates in array';
  var dst = {};
  var src = [ '/dir1', '/a', null, '', '', null ];
  var got = _.path.filterPairs_( dst, src, duplicates2 );
  var expected = { '1' : '', '/dir1' : '', '/dir11' : '', '/a' : '', '/a1' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  /* - */

  test.case = 'boolean values';
  var dst = [];
  var src = [ '/dir1', true, null, '', '', null ];
  var got = _.path.filterPairs_( dst, src, duplicates2 );
  var expected = [ '1', '/dir1', '/dir11' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'boolean values';
  var dst = {};
  var src = { '/dir' : true, '/a' : null, '/b' : '', '' : null };
  var got = _.path.filterPairs_( dst, src, duplicates );
  var expected = { '/dir' : true, '/a' : '', '/b' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'boolean in callback, bool and null values in src';
  var dst = {};
  var src = { '/dir' : true, '/a' : null, '/b' : '', '' : null };
  var got = _.path.filterPairs_( dst, src, bool );
  var expected = { '/dir' : true, '/a' : true, '/b' : true, '' : true };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'boolean in callback, str value in src';
  var dst = {};
  var src = { '/dir' : false, '/a' : '/dir', '/b' : '', '' : null };
  var got = _.path.filterPairs_( dst, src, bool );
  var expected = { '/dir' : true, '/a' : true, '/b' : true, '' : true };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'boolean in callback, bool and null values in src';
  var dst = {};
  var src = { '/dir' : true, '/a' : null, '/b' : '', '' : null };
  var got = _.path.filterPairs_( dst, src, bool2 );
  var expected = { '/dir' : false, '/a' : false, '/b' : false, '' : false };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'boolean in callback, str value in src';
  var dst = {};
  var src = { '/dir' : false, '/a' : '/dir', '/b' : '', '' : null };
  var got = _.path.filterPairs_( dst, src, bool2 );
  var expected = { '/dir' : false, '/a' : false, '/b' : false, '' : false };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'boolean in callback, str value in src';
  var dst = {};
  var src = { '/dir' : true, '/a' : false, '/b' : '' };
  var got = _.path.filterPairs_( dst, src, uncorrectMap );
  var expected = { '/dir' : '/dst', '/a' : false, '/b' : false };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  /* - */

  if( Config.debug )
  {
    test.open( 'throwing' );

    test.case = 'without arguments';
    test.shouldThrowErrorSync( () => _.path.filterPairs_() );

    test.case = 'extra arguments';
    test.shouldThrowErrorSync( () => _.path.filterPairs_( '/src', double, nothing1 ) );

    test.case = 'onEach is not a routine';
    test.shouldThrowErrorSync( () => _.path.filterPairs_( '/src', [ double ] ) );

    test.case = 'wrong type of filePath';
    test.shouldThrowErrorSync( () => _.path.filterPairs_( 1, double ) );
    test.shouldThrowErrorSync( () => _.path.filterPairs_( { '/path' : {} }, double ) );
    test.shouldThrowErrorSync( () => _.path.filterPairs_( { '/path' : undefined }, double ) );

    test.case = 'wrong type of onEach';
    test.shouldThrowErrorSync( () => _.path.filterPairs_( '/path', '/path' ) );

    test.close( 'throwing' );
  }

  /* - */

  function duplicates2( it )
  {
    return [ it.src, it.src, it.src + 1, '', '', null ];
  }

  function duplicates( it )
  {
    return { [ it.src ] : [ it.dst, it.dst, it.dst, '', '', null ] };
  }

  function bool( it )
  {
    return { [ it.src ] : true };
  }

  function bool2( it )
  {
    return { [ it.src ] : false };
  }

  function uncorrectMap( it )
  {
    if( it.dst === true )
    return { [ it.src ] : [ true, false, '', null, true, false, '', null, '/dst', true ] };
    if( it.dst === false )
    return { [ it.src ] : [ true, false, '', null, true, false, '', null, '/dst', false ] };
    else
    return { [ it.src ] : [ true, false, '', null, true, false, '', null, '/dst', true, false ] };
  }

  function double( it )
  {
    if( it.src === null )
    _.assert( 0 );
    if( it.src === '' )
    return { [ it.src ] : [ it.dst + it.dst, it.dst ] };
    else
    return { [ it.src + it.src ] : _.strIs( it.dst ) ? it.dst + it.dst : it.dst, [ it.src ] : it.dst };
  }

  function srcOnly1( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return { [ it.src ] : '' };
  }

  function srcOnly2( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return it.src;
  }

  function srcOnly3( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return [ it.src ];
  }

  function dstOnly( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return { '' : it.dst };
  }

  function dstDouble( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return { '' : [ it.dst, it.dst ] };
  }

  function nothing1( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return {};
  }

  function nothing2( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return [];
  }

  function nothing3( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return '';
  }

  function nothing4( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return null;
  }

  function returnSelf( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return it;
  }

  function arrayInSelf( it )
  {
    if( it.src === null )
    _.assert( 0 );
    it.src = [ it.src, it.src + 1 ];
    return it;
  }

}
filterPairsWithDst_.timeOut = 20000;

//

function filterDstPairsWithDst_( test )
{
  test.open( 'instance' );

  function constructor ( val )
  {
    this.value = val;
    return this;
  }
  var obj = new constructor;

  test.case = 'double';
  var dst = [];
  var src = { '/path' : obj };
  var got = _.path.filterDstPairs_( dst, src, double );
  var expected = [ obj ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'srcOnly1';
  var dst = {};
  var src = { '/path' : obj };
  var got = _.path.filterDstPairs_( dst, src, srcOnly1 );
  var expected = { '/path' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'srcOnly2';
  var dst = { 'a' : 'b' };
  var src = { '/path' : obj };
  var got = _.path.filterDstPairs_( dst, src, srcOnly2 );
  var expected = { 'a' : 'b', '/path' : obj };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'srcOnly3';
  var dst = {};
  var src = { '/path' : obj };
  var got = _.path.filterDstPairs_( dst, src, srcOnly3 );
  var expected = { '/path' : obj };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  var src = { '/path' : [ obj, obj ] };
  var dst = {};
  var got = _.path.filterDstPairs_( dst, src, srcOnly3 );
  var expected = { '/path' : obj };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'dstOnly';
  var dst = {};
  var src = { '/path' : obj };
  var got = _.path.filterDstPairs_( dst, src, dstOnly );
  var expected = { '' : obj };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'dstDouble';
  var dst = {};
  var src = { '/path' : obj };
  var got = _.path.filterDstPairs_( dst, src, dstDouble );
  var expected = { '' : obj };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'nothing1';
  var dst = {};
  var src = { '/path' : obj };
  var got = _.path.filterDstPairs_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'nothing2';
  var dst = {};
  var src = { '/path' : obj };
  var got = _.path.filterDstPairs_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'nothing3';
  var dst = {};
  var src = { '/path' : obj };
  var got = _.path.filterDstPairs_( dst, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'nothing4';
  var dst = {};
  var src = { '/path' : obj };
  var got = _.path.filterDstPairs_( dst, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.close( 'instance' );

  /* - */

  test.open( 'double' );

  test.case = 'null';
  var dst = {};
  var src = null;
  var got = _.path.filterDstPairs_( dst, src, double );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty';
  var dst = [];
  var src = '';
  var got = _.path.filterDstPairs_( dst, src, double );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'string';
  var dst = [];
  var src = '/a/b';
  var got = _.path.filterDstPairs_( dst, src, double );
  var expected = [ '/a/b/a/b', '/a/b' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty array';
  var dst = [ '/path' ];
  var src = [];
  var got = _.path.filterDstPairs_( dst, src, double );
  var expected = [ '/path' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element array';
  var dst = [];
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairs_( dst, src, double );
  var expected = [ '/a/b/a/b', '/a/b' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'several elements array';
  var dst = [];
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairs_( dst, src, double );
  var expected = [ '/a/b/a/b', '/a/b', '/cd/cd', '/cd' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'duplicates in array';
  var dst = {};
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairs_( dst, src, double );
  var expected = { '' : [ '/a/b/a/b', '/a/b', '/c/d/c/d', '/c/d' ] };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty map';
  var dst = [];
  var src = {};
  var got = _.path.filterDstPairs_( dst, src, double );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst and src';
  var dst = {};
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairs_( dst, src, double );
  var expected = { '/src/src' : 'dstdst', '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single empty array and src';
  var dst = {};
  var src = { '/src' : [] };
  var got = _.path.filterDstPairs_( dst, src, double );
  var expected = { '/src/src' : '', '/src' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( dst, src, double );
  var expected = { '/src/src' : 'dstdst', '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in multiple element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( dst, src, double );
  var expected = { '/src/src' : [ 'dst1dst1', 'dst2dst2' ], '/src' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst';
  var dst = {};
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairs_( dst, src, double );
  var expected = { '' : [ 'dstdst', 'dst' ] };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in empty array';
  var dst = {};
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairs_( dst, src, double );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in single element array';
  var dst = {};
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( dst, src, double );
  var expected = { '' : [ 'dstdst', 'dst' ] };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in multiple element array';
  var dst = {};
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( dst, src, double );
  var expected = { '' : [ 'dst1dst1', 'dst1', 'dst2dst2', 'dst2' ] };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only src';
  var dst = [];
  var src = { '/src' : '' };
  var got = _.path.filterDstPairs_( dst, src, double );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.close( 'double' );

  /* - */

  test.open( 'srcOnly1' );

  test.case = 'null';
  var dst = [];
  var src = null;
  var got = _.path.filterDstPairs_( dst, src, srcOnly1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty';
  var dst = {};
  var src = '';
  var got = _.path.filterDstPairs_( dst, src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'string';
  var dst = null;
  var src = '/a/b';
  var got = _.path.filterDstPairs_( dst, src, srcOnly1 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got !== dst );

  test.case = 'empty array';
  var dst = null;
  var src = [];
  var got = _.path.filterDstPairs_( dst, src, srcOnly1 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got !== dst );

  test.case = 'single element array';
  var dst = null;
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairs_( dst, src, srcOnly1 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got !== dst );

  test.case = 'several elements array';
  var dst = {};
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairs_( dst, src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'duplicates in array';
  var dst = [ '/a/b', '/c/d' ];
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairs_( dst, src, srcOnly1 );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty map';
  var dst = {};
  var src = {};
  var got = _.path.filterDstPairs_( dst, src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst and src';
  var dst = {};
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairs_( dst, src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single empty array and src';
  var dst = { '' : '/dst' };
  var src = { '/src' : [] };
  var got = _.path.filterDstPairs_( dst, src, srcOnly1 );
  var expected = { '' : '/dst', '/src' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( dst, src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in multiple element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( dst, src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst';
  var dst = {};
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairs_( dst, src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in empty array';
  var dst = {};
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairs_( dst, src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in single element array';
  var dst = {};
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( dst, src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in multiple element array';
  var dst = {};
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( dst, src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only src';
  var dst = {};
  var src = { '/src' : '' };
  var got = _.path.filterDstPairs_( dst, src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.close( 'srcOnly1' );

  /* - */

  test.open( 'srcOnly2' );

  test.case = 'null';
  var dst = [ '/path', false, '' ];
  var src = null;
  var got = _.path.filterDstPairs_( dst, src, srcOnly2 );
  var expected = [ '/path', false ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty';
  var dst = [ false, 1, undefined, [] ];
  var src = '';
  var got = _.path.filterDstPairs_( dst, src, srcOnly2 );
  var expected = [ false, 1, undefined, [] ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'string';
  var dst = [];
  var src = '/a/b';
  var got = _.path.filterDstPairs_( dst, src, srcOnly2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty array';
  var dst = {};
  var src = [];
  var got = _.path.filterDstPairs_( dst, src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element array';
  var dst = {};
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairs_( dst, src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'several elements array';
  var dst = [ 1, 2, 3 ];
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairs_( dst, src, srcOnly2 );
  var expected = [ 1, 2, 3 ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'duplicates in array';
  var dst = [];
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairs_( dst, src, srcOnly2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty map';
  var dst = {};
  var src = {};
  var got = _.path.filterDstPairs_( dst, src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst and src';
  var dst = {};
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairs_( dst, src, srcOnly2 );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single empty array and src';
  var dst = {};
  var src = { '/src' : [] };
  var got = _.path.filterDstPairs_( dst, src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( dst, src, srcOnly2 );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in multiple element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( dst, src, srcOnly2 );
  var expected = { '/src' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst';
  var dst = {};
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairs_( dst, src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in empty array';
  var dst = {};
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairs_( dst, src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in single element array';
  var dst = {};
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( dst, src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in multiple element array';
  var dst = {};
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( dst, src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only src';
  var dst = {};
  var src = { '/src' : '' };
  var got = _.path.filterDstPairs_( dst, src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.close( 'srcOnly2' );

  /* - */

  test.open( 'srcOnly3' );

  test.case = 'null';
  var dst = [ '/a', '/b' ];
  var src = null;
  var got = _.path.filterDstPairs_( dst, src, srcOnly3 );
  var expected = [ '/a', '/b' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty';
  var dst = { 'a' : '/b' };
  var src = '';
  var got = _.path.filterDstPairs_( dst, src, srcOnly3 );
  var expected = { 'a' : '/b' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'string';
  var dst = { '/a/b' : '/c/d' };
  var src = '/a/b';
  var got = _.path.filterDstPairs_( dst, src, srcOnly3 );
  var expected = { '/a/b' : '/c/d' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty array';
  var dst = [];
  var src = [];
  var got = _.path.filterDstPairs_( dst, src, srcOnly3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element array';
  var dst = [];
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairs_( dst, src, srcOnly3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'several elements array';
  var dst = [];
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairs_( dst, src, srcOnly3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'duplicates in array';
  var dst = [];
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairs_( dst, src, srcOnly3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty map';
  var dst = {};
  var src = {};
  var got = _.path.filterDstPairs_( dst, src, srcOnly3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst and src';
  var dst = {};
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairs_( dst, src, srcOnly3 );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single empty array and src';
  var dst = {};
  var src = { '/src' : [] };
  var got = _.path.filterDstPairs_( dst, src, srcOnly3 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( dst, src, srcOnly3 );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in multiple element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( dst, src, srcOnly3 );
  var expected = { '/src' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst';
  var dst = {};
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairs_( dst, src, srcOnly3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in empty array';
  var dst = {};
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairs_( dst, src, srcOnly3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in single element array';
  var dst = {};
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( dst, src, srcOnly3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in multiple element array';
  var dst = {};
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( dst, src, srcOnly3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only src';
  var dst = {};
  var src = { '/src' : '' };
  var got = _.path.filterDstPairs_( dst, src, srcOnly3 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.close( 'srcOnly3' );

  /* - */

  test.open( 'dstOnly' );

  test.case = 'null';
  var dst = null;
  var src = null;
  var got = _.path.filterDstPairs_( dst, src, dstOnly );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got !== dst );

  test.case = 'empty';
  var dst = {};
  var src = '';
  var got = _.path.filterDstPairs_( dst, src, dstOnly );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'string';
  var dst = {};
  var src = '/a/b';
  var got = _.path.filterDstPairs_( dst, src, dstOnly );
  var expected = { '' : '/a/b' };
  test.identical( got, expected );

  test.case = 'empty array';
  var dst = null;
  var src = [];
  var got = _.path.filterDstPairs_( dst, src, dstOnly );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got !== dst );

  test.case = 'single element array';
  var dst = [ '/cd' ]
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairs_( dst, src, dstOnly );
  var expected = [ '/cd', '/a/b' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'several elements array';
  var dst = [];
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairs_( dst, src, dstOnly );
  var expected = [ '/a/b', '/cd' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'duplicates in array';
  var dst = { 'a' : '/b' };
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairs_( dst, src, dstOnly );
  var expected = { 'a' : '/b', '' : [ '/a/b', '/c/d' ] };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty map';
  var dst = [];
  var src = {};
  var got = _.path.filterDstPairs_( dst, src, dstOnly );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst and src';
  var dst = [];
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairs_( dst, src, dstOnly );
  var expected = [ 'dst' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single empty array and src';
  var dst = {};
  var src = { '/src' : [] };
  var got = _.path.filterDstPairs_( dst, src, dstOnly );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( dst, src, dstOnly );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in multiple element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( dst, src, dstOnly );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst';
  var dst = {};
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairs_( dst, src, dstOnly );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in empty array';
  var dst = {};
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairs_( dst, src, dstOnly );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in single element array';
  var dst = {};
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( dst, src, dstOnly );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in multiple element array';
  var dst = {};
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( dst, src, dstOnly );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only src';
  var dst = {};
  var src = { '/src' : '' };
  var got = _.path.filterDstPairs_( dst, src, dstOnly );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.close( 'dstOnly' );

  /* - */

  test.open( 'dstDouble' );

  test.case = 'null';
  var dst = [];
  var src = null;
  var got = _.path.filterDstPairs_( dst, src, dstDouble );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty';
  var dst = {};
  var src = '';
  var got = _.path.filterDstPairs_( dst, src, dstDouble );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'string';
  var dst = {};
  var src = '/a/b';
  var got = _.path.filterDstPairs_( dst, src, dstDouble );
  var expected = { '' : '/a/b' };
  test.identical( got, expected );

  test.case = 'empty array';
  var dst = {};
  var src = [];
  var got = _.path.filterDstPairs_( dst, src, dstDouble );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element array';
  var dst = { '/c' : '/d' };
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairs_( dst, src, dstDouble );
  var expected = { '/c' : '/d', '' : '/a/b' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'several elements array';
  var dst = {};
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairs_( dst, src, dstDouble );
  var expected = { '' : [ '/a/b', '/cd' ] };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'duplicates in array';
  var dst = {};
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairs_( dst, src, dstDouble );
  var expected = { '' : [ '/a/b', '/c/d' ] };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty map';
  var dst = [ '/a/b' ];
  var src = {};
  var got = _.path.filterDstPairs_( dst, src, dstDouble );
  var expected = [ '/a/b' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst and src';
  var dst = {};
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairs_( dst, src, dstDouble );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single empty array and src';
  var dst = {};
  var src = { '/src' : [] };
  var got = _.path.filterDstPairs_( dst, src, dstDouble );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( dst, src, dstDouble );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in multiple element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( dst, src, dstDouble );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst';
  var dst = {};
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairs_( dst, src, dstDouble );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in empty array';
  var dst = {};
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairs_( dst, src, dstDouble );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in single element array';
  var dst = {};
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( dst, src, dstDouble );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in multiple element array';
  var dst = {};
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( dst, src, dstDouble );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only src';
  var dst = {};
  var src = { '/src' : '' };
  var got = _.path.filterDstPairs_( dst, src, dstDouble );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.close( 'dstDouble' );

  /* - */

  test.open( 'returns self' );

  test.case = 'null';
  var dst = [];
  var src = null;
  var got = _.path.filterDstPairs_( dst, src, returnSelf );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty';
  var dst = {};
  var src = '';
  var got = _.path.filterDstPairs_( dst, src, returnSelf );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'string';
  var dst = {};
  var src = '/a/b';
  var got = _.path.filterDstPairs_( dst, src, returnSelf );
  var expected = { '' : '/a/b' };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty array';
  var dst = [ '/a/b' ];
  var src = [];
  var got = _.path.filterDstPairs_( dst, src, returnSelf );
  var expected = [ '/a/b' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element array';
  var dst = [];
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairs_( dst, src, returnSelf );
  var expected = [ '/a/b' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'several elements array';
  var dst = {};
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairs_( dst, src, returnSelf );
  var expected = { '' : [ '/a/b', '/cd' ] };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'duplicates in array';
  var dst = [];
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairs_( dst, src, returnSelf );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty map';
  var dst = { 'src' : 'dst' };
  var src = {};
  var got = _.path.filterDstPairs_( dst, src, returnSelf );
  var expected = { 'src' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst and src';
  var dst = {};
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairs_( dst, src, returnSelf );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single empty array and src';
  var dst = [];
  var src = { '/src' : [] };
  var got = _.path.filterDstPairs_( dst, src, returnSelf );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single element array and src';
  var dst = [];
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( dst, src, returnSelf );
  var expected = [ 'dst' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in multiple element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( dst, src, returnSelf );
  var expected = { '/src' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst';
  var dst = {};
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairs_( dst, src, returnSelf );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in empty array';
  var dst = null;
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairs_( dst, src, returnSelf );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got !== dst );

  test.case = 'single element map with only dst in single element array';
  var dst = [];
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( dst, src, returnSelf );
  var expected = [ 'dst' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in multiple element array';
  var dst = {};
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( dst, src, returnSelf );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only src';
  var dst = {};
  var src = { '/src' : '' };
  var got = _.path.filterDstPairs_( dst, src, returnSelf );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.close( 'returns self' );

  /* - */

  test.open( 'returns self with array' );

  test.case = 'null';
  var dst = [];
  var src = null;
  var got = _.path.filterDstPairs_( dst, src, arrayInSelf );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty';
  var dst = {};
  var src = '';
  var got = _.path.filterDstPairs_( dst, src, arrayInSelf );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'string';
  var dst = [];
  var src = '/a/b';
  var got = _.path.filterDstPairs_( dst, src, arrayInSelf );
  var expected = [ '/a/b' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty array';
  var dst = [];
  var src = [];
  var got = _.path.filterDstPairs_( dst, src, arrayInSelf );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element array';
  var dst = {};
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairs_( dst, src, arrayInSelf );
  var expected = { '' : '/a/b' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'several elements array';
  var dst = [];
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairs_( dst, src, arrayInSelf );
  var expected = [ '/a/b', '/cd' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'duplicates in array';
  var dst = [];
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairs_( dst, src, arrayInSelf );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty map';
  var dst = {};
  var src = {};
  var got = _.path.filterDstPairs_( dst, src, arrayInSelf );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst and src';
  var dst = [];
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairs_( dst, src, arrayInSelf );
  var expected = [ 'dst' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single empty array and src';
  var dst = {};
  var src = { '/src' : [] };
  var got = _.path.filterDstPairs_( dst, src, arrayInSelf );
  var expected = { '/src' : '', '/src1' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( dst, src, arrayInSelf );
  var expected = { '/src' : 'dst', '/src1' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in multiple element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( dst, src, arrayInSelf );
  var expected = { '/src' : [ 'dst1', 'dst2' ], '/src1' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst';
  var dst = {};
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairs_( dst, src, arrayInSelf );
  var expected = { '' : 'dst', '1' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in empty array';
  var dst = {};
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairs_( dst, src, arrayInSelf );
  var expected = { '1' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in single element array';
  var dst = {};
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( dst, src, arrayInSelf );
  var expected = { '' : 'dst', '1' : 'dst' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in multiple element array';
  var dst = {};
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( dst, src, arrayInSelf );
  var expected = { '' : [ 'dst1', 'dst2' ], '1' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only src';
  var dst = {};
  var src = { '/src' : '' };
  var got = _.path.filterDstPairs_( dst, src, arrayInSelf );
  var expected = { '/src' : '', '/src1' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.close( 'returns self with array' );

  /* - */

  test.open( 'nothing1' );

  test.case = 'null';
  var dst = {};
  var src = null;
  var got = _.path.filterDstPairs_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty';
  var dst = [];
  var src = '';
  var got = _.path.filterDstPairs_( dst, src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'string';
  var dst = {};
  var src = '/a/b';
  var got = _.path.filterDstPairs_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );

  test.case = 'empty array';
  var dst = [];
  var src = [];
  var got = _.path.filterDstPairs_( dst, src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element array';
  var dst = [];
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairs_( dst, src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'several elements array';
  var dst = {};
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairs_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'duplicates in array';
  var dst = [];
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairs_( dst, src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty map';
  var dst = {};
  var src = {};
  var got = _.path.filterDstPairs_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst and src';
  var dst = {};
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairs_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single empty array and src';
  var dst = {};
  var src = { '/src' : [] };
  var got = _.path.filterDstPairs_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in multiple element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst';
  var dst = {};
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairs_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in empty array';
  var dst = {};
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairs_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in single element array';
  var dst = {};
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in multiple element array';
  var dst = {};
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only src';
  var dst = {};
  var src = { '/src' : '' };
  var got = _.path.filterDstPairs_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.close( 'nothing1' );

  /* - */

  test.open( 'nothing2' );

  test.case = 'null';
  var dst = [];
  var src = null;
  var got = _.path.filterDstPairs_( dst, src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty';
  var dst = {};
  var src = '';
  var got = _.path.filterDstPairs_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'string';
  var dst = {};
  var src = '/a/b';
  var got = _.path.filterDstPairs_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty array';
  var dst = [];
  var src = [];
  var got = _.path.filterDstPairs_( dst, src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element array';
  var dst = [];
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairs_( dst, src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'several elements array';
  var dst = {};
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairs_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'duplicates in array';
  var dst = [];
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairs_( dst, src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty map';
  var dst = {};
  var src = {};
  var got = _.path.filterDstPairs_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst and src';
  var dst = [];
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairs_( dst, src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single empty array and src';
  var dst = {};
  var src = { '/src' : [] };
  var got = _.path.filterDstPairs_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in multiple element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst';
  var dst = {};
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairs_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in empty array';
  var dst = {};
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairs_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in single element array';
  var dst = {};
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in multiple element array';
  var dst = {};
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only src';
  var dst = {};
  var src = { '/src' : '' };
  var got = _.path.filterDstPairs_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.close( 'nothing2' );

  /* - */

  test.open( 'nothing3' );

  test.case = 'null';
  var dst = {};
  var src = null;
  var got = _.path.filterDstPairs_( dst, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty';
  var dst = {};
  var src = '';
  var got = _.path.filterDstPairs_( dst, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'string';
  var dst = [];
  var src = '/a/b';
  var got = _.path.filterDstPairs_( dst, src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty array';
  var dst = [];
  var src = [];
  var got = _.path.filterDstPairs_( dst, src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element array';
  var dst = [ '/c/d' ];
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairs_( dst, src, nothing3 );
  var expected = [ '/c/d' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'several elements array';
  var dst = { 'a' : '/b' };
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairs_( dst, src, nothing3 );
  var expected = { 'a' : '/b' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'duplicates in array';
  var dst = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairs_( dst, src, nothing3 );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty map';
  var dst = {};
  var src = {};
  var got = _.path.filterDstPairs_( dst, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst and src';
  var dst = [];
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairs_( dst, src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single empty array and src';
  var dst = {};
  var src = { '/src' : [] };
  var got = _.path.filterDstPairs_( dst, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( dst, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in multiple element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( dst, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst';
  var dst = {};
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairs_( dst, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in empty array';
  var dst = {};
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairs_( dst, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in single element array';
  var dst = {};
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( dst, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in multiple element array';
  var dst = {};
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( dst, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only src';
  var dst = {};
  var src = { '/src' : '' };
  var got = _.path.filterDstPairs_( dst, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.close( 'nothing3' );

  /* - */

  test.open( 'nothing4' );

  test.case = 'null';
  var dst = null;
  var src = null;
  var got = _.path.filterDstPairs_( dst, src, nothing4 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got !== dst );

  test.case = 'empty';
  var dst = {};
  var src = '';
  var got = _.path.filterDstPairs_( dst, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'string';
  var dst = {};
  var src = '/a/b';
  var got = _.path.filterDstPairs_( dst, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty array';
  var dst = null;
  var src = [];
  var got = _.path.filterDstPairs_( dst, src, nothing4 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got !== dst );

  test.case = 'single element array';
  var dst = null;
  var src = [ '/a/b' ];
  var got = _.path.filterDstPairs_( dst, src, nothing4 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got !== dst );

  test.case = 'several elements array';
  var dst = [];
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstPairs_( dst, src, nothing4 );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'duplicates in array';
  var dst = [];
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstPairs_( dst, src, nothing4 );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'empty map';
  var dst = {};
  var src = {};
  var got = _.path.filterDstPairs_( dst, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst and src';
  var dst = {};
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstPairs_( dst, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single empty array and src';
  var dst = {};
  var src = { '/src' : [] };
  var got = _.path.filterDstPairs_( dst, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with dst in single element array and src';
  var dst = null;
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( dst, src, nothing4 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got !== dst );

  test.case = 'single element map with dst in multiple element array and src';
  var dst = null;
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( dst, src, nothing4 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got !== dst );

  test.case = 'single element map with only dst';
  var dst = {};
  var src = { '' : 'dst' };
  var got = _.path.filterDstPairs_( dst, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in empty array';
  var dst = {};
  var src = { '' : [ '' ] };
  var got = _.path.filterDstPairs_( dst, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in single element array';
  var dst = {};
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstPairs_( dst, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only dst in multiple element array';
  var dst = {};
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstPairs_( dst, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'single element map with only src';
  var dst = {};
  var src = { '/src' : '' };
  var got = _.path.filterDstPairs_( dst, src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.close( 'nothing4' );

  /* - */

  test.open( 'complex map' );

  var srcMap =
  {
    '/true' : true,
    '/false' : false,
    '/string1' : '/dir1',
    '/string2' : '',
    '/null' : null,
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '' : [ '/dir1', '/dir2', '', null ],
    '/emptyArray' : [],
  };

  test.case = 'double';
  var dst = {};
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterDstPairs_( dst, src, double );
  var expected =
  {
    '/true/true' : true,
    '/true' : true,
    '/false/false' : false,
    '/false' : false,
    '/string1/string1' : '/dir1/dir1',
    '/string1' : '/dir1',
    '/string2/string2' : '',
    '/string2' : '',
    '/null/null' : '',
    '/null' : '',
    '' : [ '/dir1/dir1', '/dir1', '/dir2/dir2', '/dir2' ],
    'nullnull' : '/dir3/dir3',
    'null' : '/dir3',
    '/array/array' : [ '/dir1/dir1', '/dir2/dir2' ],
    '/array' : [ '/dir1', '/dir2' ],
    '/emptyArray/emptyArray' : '',
    '/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'srcOnly1';
  var dst = {};
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterDstPairs_( dst, src, srcOnly1 );
  var expected =
  {
    '/true' : '',
    '/false' : '',
    '/string1' : '',
    '/string2' : '',
    '/null' : '',
    'null' : '',
    '/array' : '',
    '/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'srcOnly2';
  var dst = {};
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterDstPairs_( dst, src, srcOnly2 );
  var expected =
  {
    '/true' : true,
    '/false' : false,
    '/string1' : '/dir1',
    '/string2' : '',
    '/null' : '',
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'srcOnly3';
  var dst = {};
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterDstPairs_( dst, src, srcOnly3 );
  var expected =
  {
    '/true' : true,
    '/false' : false,
    '/string1' : '/dir1',
    '/string2' : '',
    '/null' : '',
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'dstOnly';
  var dst = {};
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterDstPairs_( dst, src, dstOnly );
  var expected =
  {
    '' : [ '/dir1', '/dir3', '/dir2' ]
  };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'dstDouble';
  var dst = {};
  var src = _.props.supplement( {}, srcMap );
  delete src[ '' ];
  var got = _.path.filterDstPairs_( dst, src, dstDouble );
  var expected = { '' : [ '/dir1', '/dir3', '/dir2' ] };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'nothing1';
  var dst = {};
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterDstPairs_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'nothing2';
  var dst = {};
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterDstPairs_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'nothing3';
  var dst = [];
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterDstPairs_( dst, src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'nothing4';
  var dst = [];
  var src = _.props.supplement( {}, srcMap );
  var got = _.path.filterDstPairs_( dst, src, nothing4 );
  var expected = [];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.close( 'complex map' );

  /* - */

  test.case = 'duplicates';
  var dst = {};
  var src = { '' : [ '/b', null, null, '', '', '/b' ] };
  var got = _.path.filterDstPairs_( dst, src, duplicates );
  var expected = { '' : '/b' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'duplicates, onEach return array';
  var dst = {};
  var src = [ '/b', null, null, '', '', '/b' ];
  var got = _.path.filterDstPairs_( dst, src, ( it ) => [ it.src, '/file', '/dst', '', null, '', null, undefined ] );
  var expected = { '' : '/b' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'duplicates, onEach return array';
  var dst = {};
  var src = { 'dir' : [ '/b', null, null, '', '', '/b' ] };
  var got = _.path.filterDstPairs_( dst, src, ( it ) => [ it.src, '/file', '/dst', '', null, '', null, undefined ] );
  var expected = { 'dir' : '/b', '/file' : '/b', '/dst' : '/b' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'duplicates';
  var dst = [];
  var src = { '/dir1' : '/dir2', '/a' : '/b' };
  var got = _.path.filterDstPairs_( dst, src, duplicates );
  var expected = [ '/dir2', '/b' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'duplicates in map';
  var dst = {};
  var src = { '/dir1' : '/dir2', '/a' : '/b', '/empty' : '', '' : '/file', '/null' : null };
  var got = _.path.filterDstPairs_( dst, src, duplicates );
  var expected = { '/dir1' : '/dir2', '/a' : '/b', '/empty' : '', '' : '/file', '/null' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'duplicates in map';
  var dst = {};
  var src = { '/dir1' : '/dir2', '/a' : '/b', '/empty' : '', '/null' : null };
  var got = _.path.filterDstPairs_( dst, src, duplicates );
  var expected = { '/dir1' : '/dir2', '/a' : '/b', '/empty' : '', '/null' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'duplicates in array';
  var dst = {};
  var src = [ '/dir1', '/a', null, '', '', null ];
  var got = _.path.filterDstPairs_( dst, src, duplicates2 );
  var expected = { '' : [ '/dir1', '/a' ] };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  /* - */

  test.case = 'boolean values';
  var dst = [];
  var src = [ '/dir1', true, null, '', '', null ];
  var got = _.path.filterDstPairs_( dst, src, duplicates2 );
  var expected = [ '/dir1' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'boolean values';
  var dst = {};
  var src = { '/dir' : true, '/a' : null, '/b' : '', '' : null };
  var got = _.path.filterDstPairs_( dst, src, duplicates );
  var expected = { '/dir' : true, '/a' : '', '/b' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'boolean in callback, bool and null values in src';
  var dst = {};
  var src = { '/dir' : true, '/a' : null, '/b' : '', '' : null };
  var got = _.path.filterDstPairs_( dst, src, bool );
  var expected = { '/dir' : true, '/a' : true, '/b' : true, '' : true };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'boolean in callback, str value in src';
  var dst = {};
  var src = { '/dir' : false, '/a' : '/dir', '/b' : '', '' : null };
  var got = _.path.filterDstPairs_( dst, src, bool );
  var expected = { '/dir' : true, '/a' : true, '/b' : true, '' : true };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'boolean in callback, bool and null values in src';
  var dst = {};
  var src = { '/dir' : true, '/a' : null, '/b' : '', '' : null };
  var got = _.path.filterDstPairs_( dst, src, bool2 );
  var expected = { '/dir' : false, '/a' : false, '/b' : false, '' : false };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'boolean in callback, str value in src';
  var dst = {};
  var src = { '/dir' : false, '/a' : '/dir', '/b' : '', '' : null };
  var got = _.path.filterDstPairs_( dst, src, bool2 );
  var expected = { '/dir' : false, '/a' : false, '/b' : false, '' : false };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'boolean in callback, str value in src';
  var dst = {};
  var src = { '/dir' : true, '/a' : false, '/b' : '' };
  var got = _.path.filterDstPairs_( dst, src, uncorrectMap );
  var expected = { '/dir' : '/dst', '/a' : false, '/b' : false };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  /* - */

  if( Config.debug )
  {
    test.open( 'throwing' );

    test.case = 'without arguments';
    test.shouldThrowErrorSync( () => _.path.filterDstPairs_() );

    test.case = 'extra arguments';
    test.shouldThrowErrorSync( () => _.path.filterDstPairs_( '/src', double, nothing1 ) );

    test.case = 'onEach is not a routine';
    test.shouldThrowErrorSync( () => _.path.filterDstPairs_( '/src', [ double ] ) );

    test.case = 'wrong type of filePath';
    test.shouldThrowErrorSync( () => _.path.filterDstPairs_( 1, double ) );
    test.shouldThrowErrorSync( () => _.path.filterDstPairs_( { '/path' : {} }, double ) );
    test.shouldThrowErrorSync( () => _.path.filterDstPairs_( { '/path' : undefined }, double ) );

    test.case = 'wrong type of onEach';
    test.shouldThrowErrorSync( () => _.path.filterDstPairs_( '/path', '/path' ) );

    test.close( 'throwing' );
  }

  /* - */

  function duplicates2( it )
  {
    return [ it.src, it.src, it.src + 1, '', '', null ];
  }

  function duplicates( it )
  {
    return { [ it.src ] : [ it.dst, it.dst, it.dst, '', '', null ] };
  }

  function bool( it )
  {
    return { [ it.src ] : true };
  }

  function bool2( it )
  {
    return { [ it.src ] : false };
  }

  function uncorrectMap( it )
  {
    if( it.dst === true )
    return { [ it.src ] : [ true, false, '', null, true, false, '', null, '/dst', true ] };
    if( it.dst === false )
    return { [ it.src ] : [ true, false, '', null, true, false, '', null, '/dst', false ] };
    else
    return { [ it.src ] : [ true, false, '', null, true, false, '', null, '/dst', true, false ] };
  }

  function double( it )
  {
    if( it.src === null )
    _.assert( 0 );
    if( it.src === '' )
    return { [ it.src ] : [ it.dst + it.dst, it.dst ] };
    else
    return { [ it.src + it.src ] : _.strIs( it.dst ) ? it.dst + it.dst : it.dst, [ it.src ] : it.dst };
  }

  function srcOnly1( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return { [ it.src ] : '' };
  }

  function srcOnly2( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return it.src;
  }

  function srcOnly3( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return [ it.src ];
  }

  function dstOnly( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return { '' : it.dst };
  }

  function dstDouble( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return { '' : [ it.dst, it.dst ] };
  }

  function nothing1( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return {};
  }

  function nothing2( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return [];
  }

  function nothing3( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return '';
  }

  function nothing4( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return null;
  }

  function returnSelf( it )
  {
    if( it.src === null )
    _.assert( 0 );
    return it;
  }

  function arrayInSelf( it )
  {
    if( it.src === null )
    _.assert( 0 );
    it.src = [ it.src, it.src + 1 ];
    return it;
  }

}
filterDstPairsWithDst_.timeOut = 20000;

//

function filterInplace( test )
{
  test.open( 'callback returns array' );

  test.case = 'null';
  var got = _.path.filterInplace( null, ( e, it ) => [ e ] );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty string';
  var got = _.path.filterInplace( '', ( e, it ) => [ e ] );
  var expected = '';
  test.identical( got, expected );

  test.case = 'not empty strings';
  var got = _.path.filterInplace( '/dir', ( e, it ) => [ e ] );
  var expected = '/dir';
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterInplace( src, ( e, it ) => [ e ] );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'array has one element';
  var src = [ '/dir' ];
  var got = _.path.filterInplace( src, ( e, it ) => [ e ] );
  var expected = [ '/dir' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'array has a few elements';
  var src = [ '/dir', '/dir2', '/dir2', '/dir3' ]
  var got = _.path.filterInplace( src, ( e, it ) => [ e ] );
  var expected = [ '/dir', '/dir2', '/dir3' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterInplace( src, ( e, it ) => [ e ] );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty dst in map';
  var src = { '/dir' : [] };
  var got = _.path.filterInplace( src, ( e, it ) => [ e ] );
  var expected = { '/dir' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'map, dst has one element';
  var src = { '/dir' : [ '/a/b' ] };
  var got = _.path.filterInplace( src, ( e, it ) => [ e ] );
  var expected = { '/dir' : '/a/b' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'map, map has a few elements';
  var src = { '/dir' : [ '/a/b', '/cd' ] };
  var got = _.path.filterInplace( src, ( e, it ) => [ e ] );
  var expected = { '/dir' : [ '/a/b', '/cd' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'callback returns array' );

  /* - */

  test.open( 'old tests' );

  test.case = 'drop string';
  var src = '/a/b/c';
  var got = _.path.filterInplace( src, drop );
  var expected = '';
  test.identical( got, expected );

  test.case = 'drop array';
  var src = [ '/dst' ];
  var got = _.path.filterInplace( src, drop );
  var expected = [];
  test.identical( got, expected );
  test.identical( got.length, 0 );

  test.case = 'drop map';
  var src = { '/src' : 'dst' };
  var got = _.path.filterInplace( src, drop );
  var expected = {};
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b/c';
  var got = _.path.filterInplace( src, onEach );
  var expected = '/prefix/a/b/c';
  test.identical( got, expected );

  test.case = 'array';
  var src = [ '/a', '/b' ];
  var got = _.path.filterInplace( src, onEach );
  var expected = [ '/prefix/a', '/prefix/b' ];
  test.identical( got, expected );
  test.identical( got, src );

  test.case = 'array filter';
  var src = [ '/a', 'b' ];
  var got = _.path.filterInplace( src, onEachFilter );
  var expected = [ '/a' ];
  test.identical( got, expected );

  test.case = 'map';
  var src = { '/src' : '/dst' };
  var got = _.path.filterInplace( src, onEach );
  var expected = { '/prefix/src' : '/prefix/dst' };
  test.identical( got, expected );

  test.case = 'map filter';
  var src = { '/src' : 'dst' };
  var got = _.path.filterInplace( src, onEachFilter );
  var expected = {};
  test.identical( got, expected );

  test.case = 'map filter';
  var src = { '/a' : [ '/b', 'c', null, undefined ] };
  var got = _.path.filterInplace( src, onEachStructure );
  var expected = { '/src/a' : [ '/dst/b', '/dst/c', '/dst' ] };
  test.identical( got, expected );
  test.identical( src, expected );

  test.case = 'map filter keys, onEach returns array with undefined';
  var src = { '/a' : '/b' };
  var got = _.path.filterInplace( src, onEachStructureKeys );
  var expected = { '/src/a' : '/b' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'map with multiple keys';
  var original = { '/src1' : 'dst1', '/src2' : 'dst2' };
  var src = { '/src1' : 'dst1', '/src2' : 'dst2' };
  var got = _.path.filterInplace( src, onEach );
  var expected = { '/prefix/src1' : '/prefix/dst1', '/prefix/src2' : '/prefix/dst2' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'null';
  var src = null;
  var got = _.path.filterInplace( src, onEach );
  var expected = '/prefix';
  test.identical( got, expected );

  /*  */

  function drop( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    return;
  }

  function onEach( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    return _.path.reroot( '/prefix', filePath );
  }

  function onEachFilter( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    if( _.path.isAbsolute( filePath ) )
    return filePath;
  }

  function onEachStructure( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    if( _.arrayIs( filePath ) )
    return filePath.map( onPath );
    return onPath( filePath );

    function onPath( path )
    {
      let prefix = it.side === 'src' ? '/src' : '/dst';
      if( path === null || path === undefined )
      return prefix;
      return _.path.reroot( prefix, path );
    }
  }

  function onEachStructureKeys( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    if( it.side === 'src' )
    return _.path.reroot( '/src', filePath );
    return filePath;
  }

  test.close( 'old tests' );

  /* main tests */

  test.open( 'double' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, double );
  var expected = '/a/b/a/b';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, double );
  var expected = [];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterInplace( src, double );
  var expected = [ '/a/b/a/b' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterInplace( src, double );
  var expected = [ '/a/b/a/b', '/cd/cd' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterInplace( src, double );
  var expected = [ '/a/b/a/b', '/c/d/c/d' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, double );
  var expected = {};
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterInplace( src, double );
  var expected = { '/src/src' : 'dstdst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterInplace( src, double );
  var expected = { '/src/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterInplace( src, double );
  var expected = { '/src/src' : 'dstdst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterInplace( src, double );
  var expected = { '/src/src' : [ 'dst1dst1', 'dst2dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterInplace( src, double );
  var expected = { '' : 'dstdst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterInplace( src, double );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterInplace( src, double );
  var expected = { '' : 'dstdst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterInplace( src, double );
  var expected = { '' : [ 'dst1dst1', 'dst2dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterInplace( src, double );
  var expected = { '/src/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'double' );

  /* - */

  test.open( 'srcOnly1' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, srcOnly1 );
  var expected = '/a/b';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, srcOnly1 );
  var expected = [];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, srcOnly1 );
  var expected = [ '/a/b' ];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, srcOnly1 );
  var expected = [ '/a/b', '/cd' ];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterInplace( src, srcOnly1 );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, srcOnly1 );
  var expected = {};
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterInplace( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterInplace( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterInplace( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterInplace( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterInplace( src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterInplace( src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterInplace( src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterInplace( src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterInplace( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'srcOnly1' );

  /* - */

  test.open( 'srcOnly2' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, srcOnly2 );
  var expected = '/a/b';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, srcOnly2 );
  var expected = [];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, srcOnly2 );
  var expected = [ '/a/b' ];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, srcOnly2 );
  var expected = [ '/a/b', '/cd' ];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterInplace( src, srcOnly2 );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, srcOnly2 );
  var expected = {};
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterInplace( src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterInplace( src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterInplace( src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterInplace( src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterInplace( src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterInplace( src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterInplace( src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterInplace( src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterInplace( src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'srcOnly2' );

  /* - */

  test.open( 'nothing2' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, nothing2 );
  var expected = [];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterInplace( src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterInplace( src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterInplace( src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing2' );

  /* - */

  test.open( 'nothing3' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, nothing3 );
  var expected = [];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterInplace( src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterInplace( src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterInplace( src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing3' );

  /* - */

  test.open( 'nothing4' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, nothing4 );
  var expected = [];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterInplace( src, nothing4 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterInplace( src, nothing4 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterInplace( src, nothing4 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterInplace( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing4' );

  /* - */

  test.open( 'complex map' );

  var srcMap =
  {
    '/true' : true,
    '/false' : false,
    '/null' : null,
    '/string1' : '/dir1',
    '/string2' : '',
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '' : [ '' ],
    '/emptyArray' : [],
  };

  test.case = 'double';
  var src = _.entity.make( srcMap );
  var got = _.path.filterInplace( src, double );
  var expected =
  {
    '/true/true' : true,
    '/false/false' : '',
    '/null/null' : '',
    '/string1/string1' : '/dir1/dir1',
    '/string2/string2' : '',
    'nullnull' : '/dir3/dir3',
    '/array/array' : [ '/dir1/dir1', '/dir2/dir2' ],
    '/emptyArray/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly1';
  var src = _.entity.make( srcMap );
  var got = _.path.filterInplace( src, srcOnly1 );
  var expected =
  {
    '/true' : '',
    '/false' : '',
    '/null' : '',
    '/string2' : '',
    '/emptyArray' : '',
    '/string1' : '',
    'null' : '',
    '/array' : ''
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly2';
  var src = _.entity.make( srcMap );
  var got = _.path.filterInplace( src, srcOnly2 );
  var expected =
  {
    '/true' : '',
    '/false' : '',
    '/null' : '',
    '/string1' : '',
    '/string2' : '',
    'null' : '',
    '/array' : '',
    '/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing2';
  var src = _.entity.make( srcMap );
  var got = _.path.filterInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing3'
  var src = _.entity.make( srcMap );
  var got = _.path.filterInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'complex map' );

  /* - */

  if( Config.debug )
  {
    test.case = 'without arguments';
    test.shouldThrowErrorSync( () => _.path.filterInplace() );

    test.case = 'one argument';
    test.shouldThrowErrorSync( () => _.path.filterInplace( '/path' ) );

    test.case = 'extra arguments';
    test.shouldThrowErrorSync( () => _.path.filterInplace( '/a/b', drop, 'abs' ) );

    test.case = 'wrong type of filePath';
    test.shouldThrowErrorSync( () => _.path.filterInplace( 1, double ) );

    test.case = 'wrong type of onEach';
    test.shouldThrowErrorSync( () => _.path.filterInplace( '/path', '/path' ) );
  }

  /* callbacks */

  function double( filePath )
  {
    if( filePath === null )
    _.assert( 0 );
    if( filePath )
    return _.strIs( filePath ) ? filePath + filePath : filePath;
    else
    return '';
  }

  function srcOnly1( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'dst' )
    return '';
    return filePath;
  }

  function srcOnly2( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'dst' )
    return '';
    return [ filePath ];
  }

  function nothing2( filePath )
  {
    if( filePath === null )
    _.assert( 0 );
    return [];
  }

  function nothing3( filePath )
  {
    if( filePath === null )
    _.assert( 0 );
    return '';
  }

  function nothing4( filePath )
  {
    if( filePath === null )
    _.assert( 0 );
    return null;
  }

}

//

function filterDstInplace( test )
{
  test.open( 'callback returns array' );

  test.case = 'null';
  var got = _.path.filterDstInplace( null, ( e, it ) => [ e ] );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty string';
  var got = _.path.filterDstInplace( '', ( e, it ) => [ e ] );
  var expected = '';
  test.identical( got, expected );

  test.case = 'not empty strings';
  var got = _.path.filterDstInplace( '/dir', ( e, it ) => [ e ] );
  var expected = '/dir';
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDstInplace( src, ( e, it ) => [ e ] );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'array has one element';
  var src = [ '/dir' ];
  var got = _.path.filterDstInplace( src, ( e, it ) => [ e ] );
  var expected = [ '/dir' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'array has a few elements';
  var src = [ '/dir', '/dir2', '/dir2', '/dir3' ]
  var got = _.path.filterDstInplace( src, ( e, it ) => [ e ] );
  var expected = [ '/dir', '/dir2', '/dir3' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstInplace( src, ( e, it ) => [ e ] );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty dst in map';
  var src = { '/dir' : [] };
  var got = _.path.filterDstInplace( src, ( e, it ) => [ e ] );
  var expected = { '/dir' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'map, dst has one element';
  var src = { '/dir' : [ '/a/b' ] };
  var got = _.path.filterDstInplace( src, ( e, it ) => [ e ] );
  var expected = { '/dir' : '/a/b' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'map, map has a few elements';
  var src = { '/dir' : [ '/a/b', '/cd' ] };
  var got = _.path.filterDstInplace( src, ( e, it ) => [ e ] );
  var expected = { '/dir' : [ '/a/b', '/cd' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'callback returns array' );

  /* - */

  test.open( 'old tests' );

  test.case = 'drop string';
  var src = '/a/b/c';
  var got = _.path.filterDstInplace( src, drop );
  var expected = '';
  test.identical( got, expected );

  test.case = 'drop array';
  var src = [ '/dst' ];
  var got = _.path.filterDstInplace( src, drop );
  var expected = [];
  test.identical( got, expected );
  test.identical( got.length, 0 );

  test.case = 'drop map';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstInplace( src, drop );
  var expected = {};
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b/c';
  var got = _.path.filterDstInplace( src, onEach );
  var expected = '/prefix/a/b/c';
  test.identical( got, expected );

  test.case = 'array';
  var src = [ '/a', '/b' ];
  var got = _.path.filterDstInplace( src, onEach );
  var expected = [ '/prefix/a', '/prefix/b' ];
  test.identical( got, expected );
  test.identical( got, src );

  test.case = 'array filter';
  var src = [ '/a', 'b' ];
  var got = _.path.filterDstInplace( src, onEachFilter );
  var expected = [ '/a' ];
  test.identical( got, expected );

  test.case = 'map';
  var src = { '/src' : '/dst' };
  var got = _.path.filterDstInplace( src, onEach );
  var expected = { '/prefix/src' : '/prefix/dst' };
  test.identical( got, expected );

  test.case = 'map filter';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstInplace( src, onEachFilter );
  var expected = {};
  test.identical( got, expected );

  test.case = 'map filter';
  var src = { '/a' : [ '/b', 'c', null, undefined ] };
  var got = _.path.filterDstInplace( src, onEachStructure );
  var expected = { '/src/a' : [ '/dst/b', '/dst/c', '/dst' ] };
  test.identical( got, expected );
  test.identical( src, expected );

  test.case = 'map filter keys, onEach returns array with undefined';
  var src = { '/a' : '/b' };
  var got = _.path.filterDstInplace( src, onEachStructureKeys );
  var expected = { '/src/a' : '/b' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'map with multiple keys';
  var original = { '/src1' : 'dst1', '/src2' : 'dst2' };
  var src = { '/src1' : 'dst1', '/src2' : 'dst2' };
  var got = _.path.filterDstInplace( src, onEach );
  var expected = { '/prefix/src1' : '/prefix/dst1', '/prefix/src2' : '/prefix/dst2' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDstInplace( src, onEach );
  var expected = '/prefix';
  test.identical( got, expected );

  /*  */

  function drop( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    return;
  }

  function onEach( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    return _.path.reroot( '/prefix', filePath );
  }

  function onEachFilter( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    if( _.path.isAbsolute( filePath ) )
    return filePath;
  }

  function onEachStructure( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    if( _.arrayIs( filePath ) )
    return filePath.map( onPath );
    return onPath( filePath );

    function onPath( path )
    {
      let prefix = it.side === 'src' ? '/src' : '/dst';
      if( path === null || path === undefined )
      return prefix;
      return _.path.reroot( prefix, path );
    }
  }

  function onEachStructureKeys( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    if( it.side === 'src' )
    return _.path.reroot( '/src', filePath );
    return filePath;
  }

  test.close( 'old tests' );

  /* main tests */

  test.open( 'double' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, double );
  var expected = '/a/b/a/b';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, double );
  var expected = [];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstInplace( src, double );
  var expected = [ '/a/b/a/b' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstInplace( src, double );
  var expected = [ '/a/b/a/b', '/cd/cd' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstInplace( src, double );
  var expected = [ '/a/b/a/b', '/c/d/c/d' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, double );
  var expected = {};
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstInplace( src, double );
  var expected = { '/src/src' : 'dstdst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstInplace( src, double );
  var expected = { '/src/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstInplace( src, double );
  var expected = { '/src/src' : 'dstdst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstInplace( src, double );
  var expected = { '/src/src' : [ 'dst1dst1', 'dst2dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstInplace( src, double );
  var expected = { '' : 'dstdst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstInplace( src, double );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstInplace( src, double );
  var expected = { '' : 'dstdst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstInplace( src, double );
  var expected = { '' : [ 'dst1dst1', 'dst2dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstInplace( src, double );
  var expected = { '/src/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'double' );

  /* - */

  test.open( 'srcOnly1' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, srcOnly1 );
  var expected = [];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/src' ];
  var got = _.path.filterDstInplace( src, srcOnly1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstInplace( src, srcOnly1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstInplace( src, srcOnly1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, srcOnly1 );
  var expected = {};
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstInplace( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstInplace( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstInplace( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstInplace( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstInplace( src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstInplace( src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstInplace( src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstInplace( src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstInplace( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'srcOnly1' );

  /* - */

  test.open( 'srcOnly2' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, srcOnly2 );
  var expected = [];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstInplace( src, srcOnly2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstInplace( src, srcOnly2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstInplace( src, srcOnly2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, srcOnly2 );
  var expected = {};
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstInplace( src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstInplace( src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstInplace( src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstInplace( src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstInplace( src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstInplace( src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstInplace( src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstInplace( src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstInplace( src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'srcOnly2' );

  /* - */

  test.open( 'nothing2' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, nothing2 );
  var expected = [];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstInplace( src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstInplace( src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstInplace( src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing2' );

  /* - */

  test.open( 'nothing3' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = [];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing3' );

  /* - */

  test.open( 'nothing4' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, nothing4 );
  var expected = [];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstInplace( src, nothing4 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstInplace( src, nothing4 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstInplace( src, nothing4 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstInplace( src, nothing4 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing4' );

  /* - */

  test.open( 'complex map' );

  var srcMap =
  {
    '/true' : true,
    '/false' : false,
    '/null' : null,
    '/string1' : '/dir1',
    '/string2' : '',
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '' : [ '' ],
    '/emptyArray' : [],
  };

  test.case = 'double';
  var src = _.entity.make( srcMap );
  var got = _.path.filterDstInplace( src, double );
  var expected =
  {
    '/true/true' : true,
    '/false/false' : '',
    '/null/null' : '',
    '/string1/string1' : '/dir1/dir1',
    '/string2/string2' : '',
    'nullnull' : '/dir3/dir3',
    '/array/array' : [ '/dir1/dir1', '/dir2/dir2' ],
    '/emptyArray/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly1';
  var src = _.entity.make( srcMap );
  var got = _.path.filterDstInplace( src, srcOnly1 );
  var expected =
  {
    '/true' : '',
    '/false' : '',
    '/null' : '',
    '/string2' : '',
    '/emptyArray' : '',
    '/string1' : '',
    'null' : '',
    '/array' : ''
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly2';
  var src = _.entity.make( srcMap );
  var got = _.path.filterDstInplace( src, srcOnly2 );
  var expected =
  {
    '/true' : '',
    '/false' : '',
    '/null' : '',
    '/string1' : '',
    '/string2' : '',
    'null' : '',
    '/array' : '',
    '/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing2';
  var src = _.entity.make( srcMap );
  var got = _.path.filterDstInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing3'
  var src = _.entity.make( srcMap );
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'complex map' );

  /* - */

  if( Config.debug )
  {
    test.case = 'without arguments';
    test.shouldThrowErrorSync( () => _.path.filterDstInplace() );

    test.case = 'one argument';
    test.shouldThrowErrorSync( () => _.path.filterDstInplace( '/path' ) );

    test.case = 'extra arguments';
    test.shouldThrowErrorSync( () => _.path.filterDstInplace( '/a/b', drop, 'abs' ) );

    test.case = 'wrong type of filePath';
    test.shouldThrowErrorSync( () => _.path.filterDstInplace( 1, double ) );

    test.case = 'wrong type of onEach';
    test.shouldThrowErrorSync( () => _.path.filterDstInplace( '/path', '/path' ) );
  }

  /* callbacks */

  function double( filePath )
  {
    if( filePath === null )
    _.assert( 0 );
    if( filePath )
    return _.strIs( filePath ) ? filePath + filePath : filePath;
    else
    return '';
  }

  function srcOnly1( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'dst' )
    return '';
    return filePath;
  }

  function srcOnly2( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'dst' )
    return '';
    return [ filePath ];
  }

  function nothing2( filePath )
  {
    if( filePath === null )
    _.assert( 0 );
    return [];
  }

  function nothing3( filePath )
  {
    if( filePath === null )
    _.assert( 0 );
    return '';
  }

  function nothing4( filePath )
  {
    if( filePath === null )
    _.assert( 0 );
    return null;
  }

}

//

function filterInplaceExtendedCallbacks( test )
{
  test.open( 'callback returns array' );

  test.case = 'null';
  var got = _.path.filterInplace( null, ( e, it ) => [ e ] );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty string';
  var got = _.path.filterInplace( '', ( e, it ) => [ e ] );
  var expected = '';
  test.identical( got, expected );

  test.case = 'not empty strings';
  var got = _.path.filterInplace( '/dir', ( e, it ) => [ e ] );
  var expected = '/dir';
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterInplace( src, ( e, it ) => [ e ] );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'array has one element';
  var src = [ '/dir' ];
  var got = _.path.filterInplace( src, ( e, it ) => [ e ] );
  var expected = [ '/dir' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'array has a few elements';
  var src = [ '/dir', '/dir2', '/dir2', '/dir3' ]
  var got = _.path.filterInplace( src, ( e, it ) => [ e ] );
  var expected = [ '/dir', '/dir2', '/dir3' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterInplace( src, ( e, it ) => [ e ] );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty dst in map';
  var src = { '/dir' : [] };
  var got = _.path.filterInplace( src, ( e, it ) => [ e ] );
  var expected = { '/dir' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'map, dst has one element';
  var src = { '/dir' : [ '/a/b' ] };
  var got = _.path.filterInplace( src, ( e, it ) => [ e ] );
  var expected = { '/dir' : '/a/b' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'map, map has a few elements';
  var src = { '/dir' : [ '/a/b', '/cd' ] };
  var got = _.path.filterInplace( src, ( e, it ) => [ e ] );
  var expected = { '/dir' : [ '/a/b', '/cd' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'callback returns array' );

  /* - */

  test.open( 'old tests' );

  test.case = 'drop string';
  var src = '/a/b/c';
  var got = _.path.filterInplace( src, drop );
  var expected = '';
  test.identical( got, expected );

  test.case = 'drop array';
  var src = [ '/dst' ];
  var got = _.path.filterInplace( src, drop );
  var expected = [];
  test.identical( got, expected );
  test.identical( got.length, 0 );

  test.case = 'drop map';
  var src = { '/src' : 'dst' };
  var got = _.path.filterInplace( src, drop );
  var expected = {};
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b/c';
  var got = _.path.filterInplace( src, onEach );
  var expected = '/prefix/a/b/c';
  test.identical( got, expected );

  test.case = 'array';
  var src = [ '/a', '/b' ];
  var got = _.path.filterInplace( src, onEach );
  var expected = [ '/prefix/a', '/prefix/b' ];
  test.identical( got, expected );
  test.identical( got, src );

  test.case = 'array filter';
  var src = [ '/a', 'b' ];
  var got = _.path.filterInplace( src, onEachFilter );
  var expected = [ '/a' ];
  test.identical( got, expected );

  test.case = 'map';
  var src = { '/src' : '/dst' };
  var got = _.path.filterInplace( src, onEach );
  var expected = { '/prefix/src' : '/prefix/dst' };
  test.identical( got, expected );

  test.case = 'map filter';
  var src = { '/src' : 'dst' };
  var got = _.path.filterInplace( src, onEachFilter );
  var expected = {};
  test.identical( got, expected );

  test.case = 'map filter';
  var src = { '/a' : [ '/b', 'c', null, undefined ] };
  var got = _.path.filterInplace( src, onEachStructure );
  var expected = { '/src/a' : [ '/dst/b', '/dst/c', '/dst' ] };
  test.identical( got, expected );
  test.identical( src, expected );

  test.case = 'map filter keys, onEach returns array with undefined';
  var src = { '/a' : '/b' };
  var got = _.path.filterInplace( src, onEachStructureKeys );
  var expected = { '/src/a' : '/b' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'map with multiple keys';
  var original = { '/src1' : 'dst1', '/src2' : 'dst2' };
  var src = { '/src1' : 'dst1', '/src2' : 'dst2' };
  var got = _.path.filterInplace( src, onEach );
  var expected = { '/prefix/src1' : '/prefix/dst1', '/prefix/src2' : '/prefix/dst2' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'null';
  var src = null;
  var got = _.path.filterInplace( src, onEach );
  var expected = '/prefix';
  test.identical( got, expected );

  /*  */

  function drop( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    return;
  }

  function onEach( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    return _.path.reroot( '/prefix', filePath );
  }

  function onEachFilter( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    if( _.path.isAbsolute( filePath ) )
    return filePath;
  }

  function onEachStructure( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    if( _.arrayIs( filePath ) )
    return filePath.map( onPath );
    return onPath( filePath );

    function onPath( path )
    {
      let prefix = it.side === 'src' ? '/src' : '/dst';
      if( path === null || path === undefined )
      return prefix;
      return _.path.reroot( prefix, path );
    }
  }

  function onEachStructureKeys( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    if( it.side === 'src' )
    return _.path.reroot( '/src', filePath );
    return filePath;
  }

  test.close( 'old tests' );

  /* main tests */

  test.open( 'double' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, double );
  var expected = '/a/b/a/b';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, double );
  var expected = [];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterInplace( src, double );
  var expected = [ '/a/b/a/b' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterInplace( src, double );
  var expected = [ '/a/b/a/b', '/cd/cd' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterInplace( src, double );
  var expected = [ '/a/b/a/b', '/c/d/c/d' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, double );
  var expected = {};
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterInplace( src, double );
  var expected = { '/src/src' : 'dstdst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterInplace( src, double );
  var expected = { '/src/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterInplace( src, double );
  var expected = { '/src/src' : 'dstdst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterInplace( src, double );
  var expected = { '/src/src' : [ 'dst1dst1', 'dst2dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterInplace( src, double );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterInplace( src, double );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterInplace( src, double );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterInplace( src, double );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterInplace( src, double );
  var expected = { '/src/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'double' );

  /* - */

  test.open( 'srcOnly1' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, srcOnly1 );
  var expected = '/a/b';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, srcOnly1 );
  var expected = [];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, srcOnly1 );
  var expected = [ '/a/b' ];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, srcOnly1 );
  var expected = [ '/a/b', '/cd' ];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterInplace( src, srcOnly1 );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, srcOnly1 );
  var expected = {};
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterInplace( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterInplace( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterInplace( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterInplace( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterInplace( src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterInplace( src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterInplace( src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterInplace( src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterInplace( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'srcOnly1' );

  /* - */

  test.open( 'srcOnly2' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, srcOnly2 );
  var expected = '/a/b';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, srcOnly2 );
  var expected = [];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, srcOnly2 );
  var expected = [ '/a/b' ];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, srcOnly2 );
  var expected = [ '/a/b', '/cd' ];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterInplace( src, srcOnly2 );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, srcOnly2 );
  var expected = {};
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterInplace( src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterInplace( src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterInplace( src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterInplace( src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterInplace( src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterInplace( src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterInplace( src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterInplace( src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterInplace( src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'srcOnly2' );

  /* - */

  test.open( 'nothing2' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, nothing2 );
  var expected = [];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterInplace( src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterInplace( src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterInplace( src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing2' );

  /* - */

  test.open( 'nothing3' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, nothing3 );
  var expected = [];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterInplace( src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterInplace( src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterInplace( src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing3' );

  /* - */

  test.open( 'nothing3' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterInplace( src, nothing3 );
  var expected = [];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterInplace( src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterInplace( src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterInplace( src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing3' );

  /* - */

  test.open( 'complex map' );

  var srcMap =
  {
    '/true' : true,
    '/false' : false,
    '/null' : null,
    '/string1' : '/dir1',
    '/string2' : '',
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '' : [ '' ],
    '/emptyArray' : [],
  };

  test.case = 'double';
  var src = _.entity.make( srcMap );
  var got = _.path.filterInplace( src, double );
  var expected =
  {
    '/true/true' : true,
    '/false/false' : false,
    '/null/null' : '',
    '/string1/string1' : '/dir1/dir1',
    '/string2/string2' : '',
    'nullnull' : '/dir3/dir3',
    '/array/array' : [ '/dir1/dir1', '/dir2/dir2' ],
    '/emptyArray/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly1';
  var src = _.entity.make( srcMap );
  var got = _.path.filterInplace( src, srcOnly1 );
  var expected =
  {
    '/true' : '',
    '/false' : '',
    '/null' : '',
    '/string2' : '',
    '/emptyArray' : '',
    '/string1' : '',
    'null' : '',
    '/array' : ''
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly2';
  var src = _.entity.make( srcMap );
  var got = _.path.filterInplace( src, srcOnly2 );
  var expected =
  {
    '/true' : '',
    '/false' : '',
    '/null' : '',
    '/string1' : '',
    '/string2' : '',
    'null' : '',
    '/array' : '',
    '/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing2';
  var src = _.entity.make( srcMap );
  var got = _.path.filterInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing3'
  var src = _.entity.make( srcMap );
  var got = _.path.filterInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'complex map' );

  /* - */

  if( Config.debug )
  {
    test.case = 'without arguments';
    test.shouldThrowErrorSync( () => _.path.filterInplace() );

    test.case = 'one argument';
    test.shouldThrowErrorSync( () => _.path.filterInplace( '/path' ) );

    test.case = 'extra arguments';
    test.shouldThrowErrorSync( () => _.path.filterInplace( '/a/b', drop, 'abs' ) );

    test.case = 'wrong type of filePath';
    test.shouldThrowErrorSync( () => _.path.filterInplace( 1, double ) );

    test.case = 'wrong type of onEach';
    test.shouldThrowErrorSync( () => _.path.filterInplace( '/path', '/path' ) );
  }

  /* callbacks */

  function double( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'src' )
    return _.strIs( it.src ) ? it.src + it.src : it.src;
    if( it.side === 'dst' && it.src !== '' )
    return _.strIs( it.dst ) ? it.dst + it.dst : it.dst;
    if( filePath )
    return filePath;
    return '';
  }

  function srcOnly1( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'dst' )
    return '';
    return filePath;
  }

  function srcOnly2( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'dst' )
    return '';
    return [ filePath ];
  }

  function dstOnly( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'src' )
    return '';
    return filePath;
  }

  function dstDouble( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'src' )
    return '';
    return filePath + filePath;
  }

  function nothing1( filePath )
  {
    if( filePath === null )
    _.assert( 0 );
    return [];
  }

  function nothing2( filePath )
  {
    if( filePath === null )
    _.assert( 0 );
    return '';
  }

  function nothing3( filePath )
  {
    if( filePath === null )
    _.assert( 0 );
    return null;
  }

  function returnSelf( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    return it;
  }

  function arrayInSelf( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'src' )
    it.src = [ it.src, it.src + 1 ];
    else if( it.side === 'dst' )
      it.dst = [ it.dst, it.dst + 1 ];

    return it;
  }

}

//

function filterDstInplaceExtendedCallbacks( test )
{
  test.open( 'callback returns array' );

  test.case = 'null';
  var got = _.path.filterDstInplace( null, ( e, it ) => [ e ] );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty string';
  var got = _.path.filterDstInplace( '', ( e, it ) => [ e ] );
  var expected = '';
  test.identical( got, expected );

  test.case = 'not empty strings';
  var got = _.path.filterDstInplace( '/dir', ( e, it ) => [ e ] );
  var expected = '/dir';
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDstInplace( src, ( e, it ) => [ e ] );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'array has one element';
  var src = [ '/dir' ];
  var got = _.path.filterDstInplace( src, ( e, it ) => [ e ] );
  var expected = [ '/dir' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'array has a few elements';
  var src = [ '/dir', '/dir2', '/dir2', '/dir3' ]
  var got = _.path.filterDstInplace( src, ( e, it ) => [ e ] );
  var expected = [ '/dir', '/dir2', '/dir3' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstInplace( src, ( e, it ) => [ e ] );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty dst in map';
  var src = { '/dir' : [] };
  var got = _.path.filterDstInplace( src, ( e, it ) => [ e ] );
  var expected = { '/dir' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'map, dst has one element';
  var src = { '/dir' : [ '/a/b' ] };
  var got = _.path.filterDstInplace( src, ( e, it ) => [ e ] );
  var expected = { '/dir' : '/a/b' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'map, map has a few elements';
  var src = { '/dir' : [ '/a/b', '/cd' ] };
  var got = _.path.filterDstInplace( src, ( e, it ) => [ e ] );
  var expected = { '/dir' : [ '/a/b', '/cd' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'callback returns array' );

  /* - */

  test.open( 'old tests' );

  test.case = 'drop string';
  var src = '/a/b/c';
  var got = _.path.filterDstInplace( src, drop );
  var expected = '';
  test.identical( got, expected );

  test.case = 'drop array';
  var src = [ '/dst' ];
  var got = _.path.filterDstInplace( src, drop );
  var expected = [];
  test.identical( got, expected );
  test.identical( got.length, 0 );

  test.case = 'drop map';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstInplace( src, drop );
  var expected = {};
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b/c';
  var got = _.path.filterDstInplace( src, onEach );
  var expected = '/prefix/a/b/c';
  test.identical( got, expected );

  test.case = 'array';
  var src = [ '/a', '/b' ];
  var got = _.path.filterDstInplace( src, onEach );
  var expected = [ '/prefix/a', '/prefix/b' ];
  test.identical( got, expected );
  test.identical( got, src );

  test.case = 'array filter';
  var src = [ '/a', 'b' ];
  var got = _.path.filterDstInplace( src, onEachFilter );
  var expected = [ '/a' ];
  test.identical( got, expected );

  test.case = 'map';
  var src = { '/src' : '/dst' };
  var got = _.path.filterDstInplace( src, onEach );
  var expected = { '/prefix/src' : '/prefix/dst' };
  test.identical( got, expected );

  test.case = 'map filter';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstInplace( src, onEachFilter );
  var expected = {};
  test.identical( got, expected );

  test.case = 'map filter';
  var src = { '/a' : [ '/b', 'c', null, undefined ] };
  var got = _.path.filterDstInplace( src, onEachStructure );
  var expected = { '/src/a' : [ '/dst/b', '/dst/c', '/dst' ] };
  test.identical( got, expected );
  test.identical( src, expected );

  test.case = 'map filter keys, onEach returns array with undefined';
  var src = { '/a' : '/b' };
  var got = _.path.filterDstInplace( src, onEachStructureKeys );
  var expected = { '/src/a' : '/b' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'map with multiple keys';
  var original = { '/src1' : 'dst1', '/src2' : 'dst2' };
  var src = { '/src1' : 'dst1', '/src2' : 'dst2' };
  var got = _.path.filterDstInplace( src, onEach );
  var expected = { '/prefix/src1' : '/prefix/dst1', '/prefix/src2' : '/prefix/dst2' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDstInplace( src, onEach );
  var expected = '/prefix';
  test.identical( got, expected );

  /*  */

  function drop( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    return;
  }

  function onEach( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    return _.path.reroot( '/prefix', filePath );
  }

  function onEachFilter( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    if( _.path.isAbsolute( filePath ) )
    return filePath;
  }

  function onEachStructure( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    if( _.arrayIs( filePath ) )
    return filePath.map( onPath );
    return onPath( filePath );

    function onPath( path )
    {
      let prefix = it.side === 'src' ? '/src' : '/dst';
      if( path === null || path === undefined )
      return prefix;
      return _.path.reroot( prefix, path );
    }
  }

  function onEachStructureKeys( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    if( it.side === 'src' )
    return _.path.reroot( '/src', filePath );
    return filePath;
  }

  test.close( 'old tests' );

  /* main tests */

  test.open( 'double' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, double );
  var expected = '/a/b';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, double );
  var expected = [];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstInplace( src, double );
  var expected = [ '/a/b' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstInplace( src, double );
  var expected = [ '/a/b', '/cd' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstInplace( src, double );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, double );
  var expected = {};
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstInplace( src, double );
  var expected = { '/src/src' : 'dstdst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstInplace( src, double );
  var expected = { '/src/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstInplace( src, double );
  var expected = { '/src/src' : 'dstdst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstInplace( src, double );
  var expected = { '/src/src' : [ 'dst1dst1', 'dst2dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstInplace( src, double );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstInplace( src, double );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstInplace( src, double );
  var expected = { '' : 'dst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstInplace( src, double );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstInplace( src, double );
  var expected = { '/src/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'double' );

  /* - */

  test.open( 'srcOnly1' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDstInplace( src, srcOnly1 );
  var expected = '';
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDstInplace( src, srcOnly1 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, srcOnly1 );
  var expected = [];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstInplace( src, srcOnly1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstInplace( src, srcOnly1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstInplace( src, srcOnly1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, srcOnly1 );
  var expected = {};
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstInplace( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstInplace( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstInplace( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstInplace( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstInplace( src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstInplace( src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstInplace( src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstInplace( src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstInplace( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'srcOnly1' );

  /* - */

  test.open( 'srcOnly2' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDstInplace( src, srcOnly2 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, srcOnly2 );
  var expected = [];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstInplace( src, srcOnly2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstInplace( src, srcOnly2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstInplace( src, srcOnly2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, srcOnly2 );
  var expected = {};
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstInplace( src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstInplace( src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstInplace( src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstInplace( src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstInplace( src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstInplace( src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstInplace( src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstInplace( src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstInplace( src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'srcOnly2' );

  /* - */

  test.open( 'nothing2' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, nothing2 );
  var expected = [];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstInplace( src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstInplace( src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstInplace( src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing2' );

  /* - */

  test.open( 'nothing3' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = [];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing3' );

  /* - */

  test.open( 'nothing3' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = [];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing3' );

  /* - */

  test.open( 'complex map' );

  var srcMap =
  {
    '/true' : true,
    '/false' : false,
    '/null' : null,
    '/string1' : '/dir1',
    '/string2' : '',
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '' : [ '' ],
    '/emptyArray' : [],
  };

  test.case = 'double';
  var src = _.entity.make( srcMap );
  var got = _.path.filterDstInplace( src, double );
  var expected =
  {
    '/true/true' : true,
    '/false/false' : false,
    '/null/null' : '',
    '/string1/string1' : '/dir1/dir1',
    '/string2/string2' : '',
    'nullnull' : '/dir3/dir3',
    '/array/array' : [ '/dir1/dir1', '/dir2/dir2' ],
    '/emptyArray/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly1';
  var src = _.entity.make( srcMap );
  var got = _.path.filterDstInplace( src, srcOnly1 );
  var expected =
  {
    '/true' : '',
    '/false' : '',
    '/null' : '',
    '/string2' : '',
    '/emptyArray' : '',
    '/string1' : '',
    'null' : '',
    '/array' : ''
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly2';
  var src = _.entity.make( srcMap );
  var got = _.path.filterDstInplace( src, srcOnly2 );
  var expected =
  {
    '/true' : '',
    '/false' : '',
    '/null' : '',
    '/string1' : '',
    '/string2' : '',
    'null' : '',
    '/array' : '',
    '/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing2';
  var src = _.entity.make( srcMap );
  var got = _.path.filterDstInplace( src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing3'
  var src = _.entity.make( srcMap );
  var got = _.path.filterDstInplace( src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'complex map' );

  /* - */

  if( Config.debug )
  {
    test.case = 'without arguments';
    test.shouldThrowErrorSync( () => _.path.filterDstInplace() );

    test.case = 'one argument';
    test.shouldThrowErrorSync( () => _.path.filterDstInplace( '/path' ) );

    test.case = 'extra arguments';
    test.shouldThrowErrorSync( () => _.path.filterDstInplace( '/a/b', drop, 'abs' ) );

    test.case = 'wrong type of filePath';
    test.shouldThrowErrorSync( () => _.path.filterDstInplace( 1, double ) );

    test.case = 'wrong type of onEach';
    test.shouldThrowErrorSync( () => _.path.filterDstInplace( '/path', '/path' ) );
  }

  /* callbacks */

  function double( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'src' )
    return _.strIs( it.src ) ? it.src + it.src : it.src;
    if( it.side === 'dst' && it.src !== '' )
    return _.strIs( it.dst ) ? it.dst + it.dst : it.dst;
    if( filePath )
    return filePath;
    return '';
  }

  function srcOnly1( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'dst' )
    return '';
    return filePath;
  }

  function srcOnly2( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'dst' )
    return '';
    return [ filePath ];
  }

  function dstOnly( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'src' )
    return '';
    return filePath;
  }

  function dstDouble( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'src' )
    return '';
    return filePath + filePath;
  }

  function nothing1( filePath )
  {
    if( filePath === null )
    _.assert( 0 );
    return [];
  }

  function nothing2( filePath )
  {
    if( filePath === null )
    _.assert( 0 );
    return '';
  }

  function nothing3( filePath )
  {
    if( filePath === null )
    _.assert( 0 );
    return null;
  }

  function returnSelf( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    return it;
  }

  function arrayInSelf( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'src' )
    it.src = [ it.src, it.src + 1 ];
    else if( it.side === 'dst' )
      it.dst = [ it.dst, it.dst + 1 ];

    return it;
  }

}

//

function filter( test )
{
  test.open( 'callback returns array' );

  test.case = 'empty string';
  var got = _.path.filter( '', ( e, it ) => [ e ] );
  var expected = '';
  test.identical( got, expected );

  test.case = 'not empty strings';
  var got = _.path.filter( '/dir', ( e, it ) => [ e ] );
  var expected = '/dir';
  test.identical( got, expected );

  test.case = 'empty array';
  var got = _.path.filter( [], ( e, it ) => [ e ] );
  var expected = '';
  test.identical( got, expected );

  test.case = 'array has one element';
  var got = _.path.filter( [ '/dir' ], ( e, it ) => [ e ] );
  var expected = '/dir';
  test.identical( got, expected );

  test.case = 'array has a few elements';
  var got = _.path.filter( [ '/dir', '/dir2', '/dir2', '/dir3' ], ( e, it ) => [ e ] );
  var expected = [ '/dir', '/dir2', '/dir3' ];
  test.identical( got, expected );

  test.case = 'empty map';
  var got = _.path.filter( {}, ( e, it ) => [ e ] );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty dst in map';
  var got = _.path.filter( { '/dir' : [] }, ( e, it ) => [ e ] );
  var expected = '/dir';
  test.identical( got, expected );

  test.case = 'map, dst has one element';
  var got = _.path.filter( { '/dir' : [ '/a/b' ] }, ( e, it ) => [ e ] );
  var expected = { '/dir' : '/a/b' };
  test.identical( got, expected );

  test.case = 'map, map has a few elements';
  var got = _.path.filter( { '/dir' : [ '/a/b', '/cd' ] }, ( e, it ) => [ e ] );
  var expected = { '/dir' : [ '/a/b', '/cd' ] };
  test.identical( got, expected );

  test.close( 'callback returns array' );

  test.open( 'old tests' );

  test.case = 'drop string';
  var src = '/a/b/c';
  var got = _.path.filter( src, drop );
  var expected = null;
  test.identical( got, expected );

  test.case = 'drop array';
  var src = [ '/dst' ];
  var got = _.path.filter( src, drop );
  var expected = '';
  test.identical( got, expected );

  test.case = 'drop map';
  var src = { '/src' : 'dst' };
  var got = _.path.filter( src, drop );
  var expected = '';
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b/c';
  var got = _.path.filter( src, onEach );
  var expected = '/prefix/a/b/c';
  test.identical( got, expected );

  test.case = 'array';
  var src = [ '/a', '/b' ];
  var got = _.path.filter( src, onEach );
  var expected = [ '/prefix/a', '/prefix/b' ];
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'array filter';
  var original = [ '/a', 'b' ];
  var src = [ '/a', 'b' ];
  var got = _.path.filter( src, onEachFilter );
  var expected = '/a';
  test.identical( got, expected );
  test.identical( src, original );

  test.case = 'map';
  var original = { '/src' : '/dst' };
  var src = { '/src' : '/dst' };
  var got = _.path.filter( src, onEach );
  var expected = { '/prefix/src' : '/prefix/dst' };
  test.identical( got, expected );
  test.identical( src, original );

  test.case = 'map filter';
  var src = { '/src' : 'dst' };
  var got = _.path.filter( src, onEachFilter );
  var expected = '';
  test.identical( got, expected );

  test.case = 'map with multiple keys';
  var original = { '/src1' : 'dst1', '/src2' : 'dst2' };
  var src = { '/src1' : 'dst1', '/src2' : 'dst2' };
  var got = _.path.filter( src, onEach );
  var expected = { '/prefix/src1' : '/prefix/dst1', '/prefix/src2' : '/prefix/dst2' };
  test.identical( got, expected );
  test.identical( src, original );
  test.true( got !== src );

  test.case = 'map filter';
  var src = { '/a' : [ '/b', 'c', null, undefined ] };
  var got = _.path.filter( src, onEachStructure );
  var expected =
  {
    '/src/a' : [ '/dst/b', '/dst/c', '/dst' ]
  }
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'map filter keys, onEach returns array with undefined';
  var src = { '/a' : '/b' };
  var got = _.path.filter( src, onEachStructureKeys );
  var expected =
  {
    '/src/a' : '/b'
  }
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'null';
  var src = null;
  var got = _.path.filter( src, onEach );
  var expected = '/prefix';
  test.identical( got, expected );
  test.true( got !== src );

  /*  */

  function drop( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    return;
  }

  function onEach( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    return _.path.reroot( '/prefix', filePath );
  }

  function onEachFilter( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    if( _.path.isAbsolute( filePath ) )
    return filePath;
  }

  function onEachStructure( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    if( _.arrayIs( filePath ) )
    return filePath.map( onPath );
    return onPath( filePath );

    function onPath( path )
    {
      if( filePath === null )
      _.assert( 0 );
      let prefix = it.side === 'src' ? '/src' : '/dst';
      if( path === null || path === undefined )
      return prefix;
      return _.path.reroot( prefix, path );
    }
  }

  function onEachStructureKeys( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    if( it.side === 'src' )
    return [ _.path.reroot( '/src', filePath ), undefined ];
    return filePath;
  }

  test.close( 'old tests' );

  /* main tests */

  test.open( 'double' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, double );
  var expected = '/a/b/a/b';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, double );
  var expected = '/a/b/a/b';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, double );
  var expected = [ '/a/b/a/b', '/cd/cd' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, double );
  var expected = [ '/a/b/a/b', '/c/d/c/d' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, double );
  var expected = { '/src/src' : 'dstdst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, double );
  var expected = '/src/src';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, double );
  var expected = { '/src/src' : 'dstdst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, double );
  var expected = { '/src/src' : [ 'dst1dst1', 'dst2dst2' ] };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, double );
  var expected = { '' : 'dstdst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, double );
  var expected = { '' : 'dstdst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, double );
  var expected = { '' : [ 'dst1dst1', 'dst2dst2' ] };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, double );
  var expected = '/src/src';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'double' );

  /* - */

  test.open( 'srcOnly1' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly1 );
  var expected = null;
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly1 );
  var expected = null;
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly1 );
  var expected = '/a/b';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly1 );
  var expected = '/a/b';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly1 );
  var expected = [ '/a/b', '/cd' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly1 );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly1 );
  var expected = { '/src' : 'dst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly1 );
  var expected = { '/src' : 'dst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly1 );
  var expected = { '/src' : [ 'dst1', 'dst2' ] };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'srcOnly1' );

  /* - */

  test.open( 'srcOnly2' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly2 );
  var expected = null;
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly2 );
  var expected = null;
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly2 );
  var expected = '/a/b';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly2 );
  var expected = '/a/b';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly2 );
  var expected = [ '/a/b', '/cd' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly2 );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly2 );
  var expected = { '/src' : 'dst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly2 );
  var expected = { '/src' : 'dst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly2 );
  var expected = { '/src' : [ 'dst1', 'dst2' ] };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'srcOnly2' );

  /* - */

  test.open( 'nothing2' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'nothing2' );

  /* - */

  test.open( 'nothing3' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'nothing3' );

  /* - */

  test.open( 'nothing4' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'nothing4' );

  /* - */

  test.open( 'complex map' );

  var src =
  {
    '/true' : true,
    '/false' : false,
    '/null' : null,
    '/string1' : '/dir1',
    '/string2' : '',
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '' : [ '' ],
    '/emptyArray' : [],
  };

  test.case = 'double';
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, double );
  var expected =
  {
    '/true/true' : true,
    '/false/false' : '',
    '/null/null' : '',
    '/string1/string1' : '/dir1/dir1',
    '/string2/string2' : '',
    'nullnull' : '/dir3/dir3',
    '/array/array' : [ '/dir1/dir1', '/dir2/dir2' ],
    '/emptyArray/emptyArray' : ''
  };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'srcOnly1';
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly1 );
  var expected =
  {
    '/true' : true,
    '/string1' : '/dir1',
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
  };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'srcOnly2';
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly2 );
  var expected =
  {
    '/true' : true,
    '/string1' : '/dir1',
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
  };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'nothing2';
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'nothing3'
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'complex map' );

  /* - */

  if( Config.debug )
  {
    test.case = 'without arguments';
    test.shouldThrowErrorSync( () => _.path.filter() );

    test.case = 'one argument';
    test.shouldThrowErrorSync( () => _.path.filter( '/path' ) );

    test.case = 'extra arguments';
    test.shouldThrowErrorSync( () => _.path.filter( '/a/b', drop, 'abs' ) );

    test.case = 'wrong type of filePath';
    test.shouldThrowErrorSync( () => _.path.filter( 1, double ) );

    test.case = 'wrong type of onEach';
    test.shouldThrowErrorSync( () => _.path.filter( '/path', '/path' ) );
  }

  /* callbacks */

  function double( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    if( filePath )
    return _.strIs( filePath ) ? filePath + filePath : filePath;
    else
    return '';
  }

  function srcOnly1( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    if( filePath )
    return filePath;
  }

  function srcOnly2( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    if( filePath )
    return [ filePath ];
  }

  function nothing2( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    return [];
  }

  function nothing3( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    return '';
  }

  function nothing4( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    return null;
  }

}

//

function filterExtendedCallbacks( test )
{
  test.open( 'callback returns array' );

  test.case = 'empty string';
  var got = _.path.filter( '', ( e, it ) => [ e ] );
  var expected = '';
  test.identical( got, expected );

  test.case = 'not empty strings';
  var got = _.path.filter( '/dir', ( e, it ) => [ e ] );
  var expected = '/dir';
  test.identical( got, expected );

  test.case = 'empty array';
  var got = _.path.filter( [], ( e, it ) => [ e ] );
  var expected = '';
  test.identical( got, expected );

  test.case = 'array has one element';
  var got = _.path.filter( [ '/dir' ], ( e, it ) => [ e ] );
  var expected = '/dir';
  test.identical( got, expected );

  test.case = 'array has a few elements';
  var got = _.path.filter( [ '/dir', '/dir2', '/dir2', '/dir3' ], ( e, it ) => [ e ] );
  var expected = [ '/dir', '/dir2', '/dir3' ];
  test.identical( got, expected );

  test.case = 'empty map';
  var got = _.path.filter( {}, ( e, it ) => [ e ] );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty dst in map';
  var got = _.path.filter( { '/dir' : [] }, ( e, it ) => [ e ] );
  var expected = '/dir';
  test.identical( got, expected );

  test.case = 'map, dst has one element';
  var got = _.path.filter( { '/dir' : [ '/a/b' ] }, ( e, it ) => [ e ] );
  var expected = { '/dir' : '/a/b' };
  test.identical( got, expected );

  test.case = 'map, map has a few elements';
  var got = _.path.filter( { '/dir' : [ '/a/b', '/cd' ] }, ( e, it ) => [ e ] );
  var expected = { '/dir' : [ '/a/b', '/cd' ] };
  test.identical( got, expected );

  test.close( 'callback returns array' );

  test.open( 'old tests' );

  test.case = 'drop string';
  var src = '/a/b/c';
  var got = _.path.filter( src, drop );
  var expected = null;
  test.identical( got, expected );

  test.case = 'drop array';
  var src = [ '/dst' ];
  var got = _.path.filter( src, drop );
  var expected = '';
  test.identical( got, expected );

  test.case = 'drop map';
  var src = { '/src' : 'dst' };
  var got = _.path.filter( src, drop );
  var expected = '';
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b/c';
  var got = _.path.filter( src, onEach );
  var expected = '/prefix/a/b/c';
  test.identical( got, expected );

  test.case = 'array';
  var src = [ '/a', '/b' ];
  var got = _.path.filter( src, onEach );
  var expected = [ '/prefix/a', '/prefix/b' ];
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'array filter';
  var original = [ '/a', 'b' ];
  var src = [ '/a', 'b' ];
  var got = _.path.filter( src, onEachFilter );
  var expected = '/a';
  test.identical( got, expected );
  test.identical( src, original );

  test.case = 'map';
  var original = { '/src' : '/dst' };
  var src = { '/src' : '/dst' };
  var got = _.path.filter( src, onEach );
  var expected = { '/prefix/src' : '/prefix/dst' };
  test.identical( got, expected );
  test.identical( src, original );

  test.case = 'map filter';
  var src = { '/src' : 'dst' };
  var got = _.path.filter( src, onEachFilter );
  var expected = '';
  test.identical( got, expected );

  test.case = 'map with multiple keys';
  var original = { '/src1' : 'dst1', '/src2' : 'dst2' };
  var src = { '/src1' : 'dst1', '/src2' : 'dst2' };
  var got = _.path.filter( src, onEach );
  var expected = { '/prefix/src1' : '/prefix/dst1', '/prefix/src2' : '/prefix/dst2' };
  test.identical( got, expected );
  test.identical( src, original );
  test.true( got !== src );

  test.case = 'map filter';
  var src = { '/a' : [ '/b', 'c', null, undefined ] };
  var got = _.path.filter( src, onEachStructure );
  var expected =
  {
    '/src/a' : [ '/dst/b', '/dst/c', '/dst' ]
  }
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'map filter keys, onEach returns array with undefined';
  var src = { '/a' : '/b' };
  var got = _.path.filter( src, onEachStructureKeys );
  var expected =
  {
    '/src/a' : '/b'
  }
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'null';
  var src = null;
  var got = _.path.filter( src, onEach );
  var expected = '/prefix';
  test.identical( got, expected );
  test.true( got !== src );

  /*  */

  function drop( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    return;
  }

  function onEach( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    return _.path.reroot( '/prefix', filePath );
  }

  function onEachFilter( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    if( _.path.isAbsolute( filePath ) )
    return filePath;
  }

  function onEachStructure( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    if( _.arrayIs( filePath ) )
    return filePath.map( onPath );
    return onPath( filePath );

    function onPath( path )
    {
      if( filePath === null )
      _.assert( 0 );
      let prefix = it.side === 'src' ? '/src' : '/dst';
      if( path === null || path === undefined )
      return prefix;
      return _.path.reroot( prefix, path );
    }
  }

  function onEachStructureKeys( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    if( it.side === 'src' )
    return [ _.path.reroot( '/src', filePath ), undefined ];
    return filePath;
  }

  test.close( 'old tests' );

  /* main tests */

  test.open( 'double' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, double );
  var expected = '/a/b/a/b';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, double );
  var expected = '/a/b/a/b';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, double );
  var expected = [ '/a/b/a/b', '/cd/cd' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, double );
  var expected = [ '/a/b/a/b', '/c/d/c/d' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, double );
  var expected = { '/src/src' : 'dstdst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, double );
  var expected = '/src/src';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, double );
  var expected = { '/src/src' : 'dstdst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, double );
  var expected = { '/src/src' : [ 'dst1dst1', 'dst2dst2' ] };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, double );
  var expected = { '' : 'dst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, double );
  var expected = { '' : 'dst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, double );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, double );
  var expected = '/src/src';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'double' );

  /* - */

  test.open( 'srcOnly1' );

  test.case = 'null';
  var src = null;
  var got = _.path.filter( src, srcOnly1 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filter( src, srcOnly1 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filter( src, srcOnly1 );
  var expected = '/a/b';
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filter( src, srcOnly1 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filter( src, srcOnly1 );
  var expected = '/a/b';
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly1 );
  var expected = [ '/a/b', '/cd' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly1 );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly1 );
  var expected = '/src';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filter( src, srcOnly1 );
  var expected = '/src';
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filter( src, srcOnly1 );
  var expected = '/src';
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filter( src, srcOnly1 );
  var expected = '/src';
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filter( src, srcOnly1 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filter( src, srcOnly1 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filter( src, srcOnly1 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly1 );
  var expected = '/src';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'srcOnly1' );

  /* - */

  test.open( 'srcOnly2' );

  test.case = 'null';
  var src = null;
  var got = _.path.filter( src, srcOnly2 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly2 );
  var expected = '/a/b';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly2 );
  var expected = '/a/b';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly2 );
  var expected = [ '/a/b', '/cd' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly2 );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly2 );
  var expected = '/src';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly2 );
  var expected = '/src';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly2 );
  var expected = '/src';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly2 );
  var expected = '/src';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly2 );
  var expected = '/src';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'srcOnly2' );

  /* - */

  test.open( 'nothing2' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'nothing2' );

  /* - */

  test.open( 'nothing3' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'nothing3' );

  /* - */

  test.open( 'nothing4' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'nothing4' );

  /* - */

  test.open( 'complex map' );

  var src =
  {
    '/true' : true,
    '/false' : false,
    '/null' : null,
    '/string1' : '/dir1',
    '/string2' : '',
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '' : [ '' ],
    '/emptyArray' : [],
  };

  test.case = 'double';
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, double );
  var expected =
  {
    '/true/true' : true,
    '/false/false' : false,
    '/null/null' : '',
    '/string1/string1' : '/dir1/dir1',
    '/string2/string2' : '',
    'nullnull' : '/dir3/dir3',
    '/array/array' : [ '/dir1/dir1', '/dir2/dir2' ],
    '/emptyArray/emptyArray' : ''
  };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'srcOnly1';
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly1 );
  var expected =
  {
    '/true' : '',
    '/false' : '',
    '/null' : '',
    '/string1' : '',
    '/string2' : '',
    'null' : '',
    '/array' : '',
    '/emptyArray' : ''
  };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'srcOnly2';
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, srcOnly2 );
  var expected =
  {
    '/true' : '',
    '/false' : '',
    '/null' : '',
    '/string1' : '',
    '/string2' : '',
    'null' : '',
    '/array' : '',
    '/emptyArray' : ''
  };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'nothing2';
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'nothing3'
  var src2 = _.entity.make( src );
  var got = _.path.filter( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'complex map' );

  /* - */

  if( Config.debug )
  {
    test.case = 'without arguments';
    test.shouldThrowErrorSync( () => _.path.filter() );

    test.case = 'one argument';
    test.shouldThrowErrorSync( () => _.path.filter( '/path' ) );

    test.case = 'extra arguments';
    test.shouldThrowErrorSync( () => _.path.filter( '/a/b', drop, 'abs' ) );

    test.case = 'wrong type of filePath';
    test.shouldThrowErrorSync( () => _.path.filter( 1, double ) );

    test.case = 'wrong type of onEach';
    test.shouldThrowErrorSync( () => _.path.filter( '/path', '/path' ) );
  }

  /* callbacks */

  function double( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'src' )
    return _.strIs( it.src ) ? it.src + it.src : it.src;
    if( it.side === 'dst' && it.src !== '' )
    return _.strIs( it.dst ) ? it.dst + it.dst : it.dst;
    if( filePath )
    return filePath;
    return '';
  }

  function srcOnly1( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'dst' )
    return '';
    return filePath;
  }

  function srcOnly2( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'dst' )
    return '';
    return [ filePath ];
  }

  function dstOnly( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'src' )
    return '';
    return filePath;
  }

  function dstDouble( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'src' )
    return '';
    return filePath + filePath;
  }

  function nothing1( filePath )
  {
    if( filePath === null )
    _.assert( 0 );
    return [];
  }

  function nothing2( filePath )
  {
    if( filePath === null )
    _.assert( 0 );
    return '';
  }

  function nothing3( filePath )
  {
    if( filePath === null )
    _.assert( 0 );
    return null;
  }

  function nothing4( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    return null;
  }

}

//

function filterDst( test )
{
  test.open( 'callback returns array' );

  test.case = 'empty string';
  var got = _.path.filterDst( '', ( e, it ) => [ e ] );
  var expected = '';
  test.identical( got, expected );

  test.case = 'not empty strings';
  var got = _.path.filterDst( '/dir', ( e, it ) => [ e ] );
  var expected = '/dir';
  test.identical( got, expected );

  test.case = 'empty array';
  var got = _.path.filterDst( [], ( e, it ) => [ e ] );
  var expected = '';
  test.identical( got, expected );

  test.case = 'array has one element';
  var got = _.path.filterDst( [ '/dir' ], ( e, it ) => [ e ] );
  var expected = '/dir';
  test.identical( got, expected );

  test.case = 'array has a few elements';
  var got = _.path.filterDst( [ '/dir', '/dir2', '/dir2', '/dir3' ], ( e, it ) => [ e ] );
  var expected = [ '/dir', '/dir2', '/dir3' ];
  test.identical( got, expected );

  test.case = 'empty map';
  var got = _.path.filterDst( {}, ( e, it ) => [ e ] );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty dst in map';
  var got = _.path.filterDst( { '/dir' : [] }, ( e, it ) => [ e ] );
  var expected = '/dir';
  test.identical( got, expected );

  test.case = 'map, dst has one element';
  var got = _.path.filterDst( { '/dir' : [ '/a/b' ] }, ( e, it ) => [ e ] );
  var expected = { '/dir' : '/a/b' };
  test.identical( got, expected );

  test.case = 'map, map has a few elements';
  var got = _.path.filterDst( { '/dir' : [ '/a/b', '/cd' ] }, ( e, it ) => [ e ] );
  var expected = { '/dir' : [ '/a/b', '/cd' ] };
  test.identical( got, expected );

  test.close( 'callback returns array' );

  test.open( 'old tests' );

  test.case = 'drop string';
  var src = '/a/b/c';
  var got = _.path.filterDst( src, drop );
  var expected = null;
  test.identical( got, expected );

  test.case = 'drop array';
  var src = [ '/dst' ];
  var got = _.path.filterDst( src, drop );
  var expected = '';
  test.identical( got, expected );

  test.case = 'drop map';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDst( src, drop );
  var expected = '';
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b/c';
  var got = _.path.filterDst( src, onEach );
  var expected = '/prefix/a/b/c';
  test.identical( got, expected );

  test.case = 'array';
  var src = [ '/a', '/b' ];
  var got = _.path.filterDst( src, onEach );
  var expected = [ '/prefix/a', '/prefix/b' ];
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'array filterDst';
  var original = [ '/a', 'b' ];
  var src = [ '/a', 'b' ];
  var got = _.path.filterDst( src, onEachFilter );
  var expected = '/a';
  test.identical( got, expected );
  test.identical( src, original );

  test.case = 'map';
  var original = { '/src' : '/dst' };
  var src = { '/src' : '/dst' };
  var got = _.path.filterDst( src, onEach );
  var expected = { '/prefix/src' : '/prefix/dst' };
  test.identical( got, expected );
  test.identical( src, original );

  test.case = 'map filterDst';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDst( src, onEachFilter );
  var expected = '';
  test.identical( got, expected );

  test.case = 'map with multiple keys';
  var original = { '/src1' : 'dst1', '/src2' : 'dst2' };
  var src = { '/src1' : 'dst1', '/src2' : 'dst2' };
  var got = _.path.filterDst( src, onEach );
  var expected = { '/prefix/src1' : '/prefix/dst1', '/prefix/src2' : '/prefix/dst2' };
  test.identical( got, expected );
  test.identical( src, original );
  test.true( got !== src );

  test.case = 'map filter';
  var src = { '/a' : [ '/b', 'c', null, undefined ] };
  var got = _.path.filterDst( src, onEachStructure );
  var expected =
  {
    '/src/a' : [ '/dst/b', '/dst/c', '/dst' ]
  }
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'map filter keys, onEach returns array with undefined';
  var src = { '/a' : '/b' };
  var got = _.path.filterDst( src, onEachStructureKeys );
  var expected =
  {
    '/src/a' : '/b'
  }
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDst( src, onEach );
  var expected = '/prefix';
  test.identical( got, expected );
  test.true( got !== src );

  /*  */

  function drop( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    return;
  }

  function onEach( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    return _.path.reroot( '/prefix', filePath );
  }

  function onEachFilter( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    if( _.path.isAbsolute( filePath ) )
    return filePath;
  }

  function onEachStructure( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    if( _.arrayIs( filePath ) )
    return filePath.map( onPath );
    return onPath( filePath );

    function onPath( path )
    {
      if( filePath === null )
      _.assert( 0 );
      let prefix = it.side === 'src' ? '/src' : '/dst';
      if( path === null || path === undefined )
      return prefix;
      return _.path.reroot( prefix, path );
    }
  }

  function onEachStructureKeys( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    if( it.side === 'src' )
    return [ _.path.reroot( '/src', filePath ), undefined ];
    return filePath;
  }

  test.close( 'old tests' );

  /* main tests */

  test.open( 'double' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, double );
  var expected = '/a/b/a/b';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, double );
  var expected = '/a/b/a/b';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, double );
  var expected = [ '/a/b/a/b', '/cd/cd' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, double );
  var expected = [ '/a/b/a/b', '/c/d/c/d' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, double );
  var expected = { '/src/src' : 'dstdst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, double );
  var expected = '/src/src';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, double );
  var expected = { '/src/src' : 'dstdst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, double );
  var expected = { '/src/src' : [ 'dst1dst1', 'dst2dst2' ] };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, double );
  var expected = { '' : 'dstdst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, double );
  var expected = { '' : 'dstdst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, double );
  var expected = { '' : [ 'dst1dst1', 'dst2dst2' ] };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, double );
  var expected = '/src/src';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'double' );

  /* - */

  test.open( 'srcOnly1' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly1 );
  var expected = null;
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly1 );
  var expected = null;
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly1 );
  var expected = '/a/b';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly1 );
  var expected = '/a/b';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly1 );
  var expected = [ '/a/b', '/cd' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly1 );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly1 );
  var expected = { '/src' : 'dst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly1 );
  var expected = { '/src' : 'dst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly1 );
  var expected = { '/src' : [ 'dst1', 'dst2' ] };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'srcOnly1' );

  /* - */

  test.open( 'srcOnly2' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly2 );
  var expected = null;
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly2 );
  var expected = null;
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly2 );
  var expected = '/a/b';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly2 );
  var expected = '/a/b';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly2 );
  var expected = [ '/a/b', '/cd' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly2 );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly2 );
  var expected = { '/src' : 'dst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly2 );
  var expected = { '/src' : 'dst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly2 );
  var expected = { '/src' : [ 'dst1', 'dst2' ] };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'srcOnly2' );

  /* - */

  test.open( 'nothing2' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'nothing2' );

  /* - */

  test.open( 'nothing3' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'nothing3' );

  /* - */

  test.open( 'nothing4' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'nothing4' );

  /* - */

  test.open( 'complex map' );

  var src =
  {
    '/true' : true,
    '/false' : false,
    '/null' : null,
    '/string1' : '/dir1',
    '/string2' : '',
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '' : [ '' ],
    '/emptyArray' : [],
  };

  test.case = 'double';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, double );
  var expected =
  {
    '/true/true' : true,
    '/false/false' : '',
    '/null/null' : '',
    '/string1/string1' : '/dir1/dir1',
    '/string2/string2' : '',
    'nullnull' : '/dir3/dir3',
    '/array/array' : [ '/dir1/dir1', '/dir2/dir2' ],
    '/emptyArray/emptyArray' : ''
  };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'srcOnly1';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly1 );
  var expected =
  {
    '/true' : true,
    '/string1' : '/dir1',
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
  };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'srcOnly2';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly2 );
  var expected =
  {
    '/true' : true,
    '/string1' : '/dir1',
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
  };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'nothing2';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'nothing3'
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'complex map' );

  /* - */

  if( Config.debug )
  {
    test.case = 'without arguments';
    test.shouldThrowErrorSync( () => _.path.filterDst() );

    test.case = 'one argument';
    test.shouldThrowErrorSync( () => _.path.filterDst( '/path' ) );

    test.case = 'extra arguments';
    test.shouldThrowErrorSync( () => _.path.filterDst( '/a/b', drop, 'abs' ) );

    test.case = 'wrong type of filePath';
    test.shouldThrowErrorSync( () => _.path.filterDst( 1, double ) );

    test.case = 'wrong type of onEach';
    test.shouldThrowErrorSync( () => _.path.filterDst( '/path', '/path' ) );
  }

  /* callbacks */

  function double( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    if( filePath )
    return _.strIs( filePath ) ? filePath + filePath : filePath;
    else
    return '';
  }

  function srcOnly1( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    if( filePath )
    return filePath;
  }

  function srcOnly2( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    if( filePath )
    return [ filePath ];
  }

  function nothing2( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    return [];
  }

  function nothing3( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    return '';
  }

  function nothing4( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    return null;
  }

}

//

function filterDstExtendedCallbacks( test )
{
  test.open( 'callback returns array' );

  test.case = 'empty string';
  var got = _.path.filterDst( '', ( e, it ) => [ e ] );
  var expected = '';
  test.identical( got, expected );

  test.case = 'not empty strings';
  var got = _.path.filterDst( '/dir', ( e, it ) => [ e ] );
  var expected = '/dir';
  test.identical( got, expected );

  test.case = 'empty array';
  var got = _.path.filterDst( [], ( e, it ) => [ e ] );
  var expected = '';
  test.identical( got, expected );

  test.case = 'array has one element';
  var got = _.path.filterDst( [ '/dir' ], ( e, it ) => [ e ] );
  var expected = '/dir';
  test.identical( got, expected );

  test.case = 'array has a few elements';
  var got = _.path.filterDst( [ '/dir', '/dir2', '/dir2', '/dir3' ], ( e, it ) => [ e ] );
  var expected = [ '/dir', '/dir2', '/dir3' ];
  test.identical( got, expected );

  test.case = 'empty map';
  var got = _.path.filterDst( {}, ( e, it ) => [ e ] );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty dst in map';
  var got = _.path.filterDst( { '/dir' : [] }, ( e, it ) => [ e ] );
  var expected = '/dir';
  test.identical( got, expected );

  test.case = 'map, dst has one element';
  var got = _.path.filterDst( { '/dir' : [ '/a/b' ] }, ( e, it ) => [ e ] );
  var expected = { '/dir' : '/a/b' };
  test.identical( got, expected );

  test.case = 'map, map has a few elements';
  var got = _.path.filterDst( { '/dir' : [ '/a/b', '/cd' ] }, ( e, it ) => [ e ] );
  var expected = { '/dir' : [ '/a/b', '/cd' ] };
  test.identical( got, expected );

  test.close( 'callback returns array' );

  test.open( 'old tests' );

  test.case = 'drop string';
  var src = '/a/b/c';
  var got = _.path.filterDst( src, drop );
  var expected = null;
  test.identical( got, expected );

  test.case = 'drop array';
  var src = [ '/dst' ];
  var got = _.path.filterDst( src, drop );
  var expected = '';
  test.identical( got, expected );

  test.case = 'drop map';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDst( src, drop );
  var expected = '';
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b/c';
  var got = _.path.filterDst( src, onEach );
  var expected = '/prefix/a/b/c';
  test.identical( got, expected );

  test.case = 'array';
  var src = [ '/a', '/b' ];
  var got = _.path.filterDst( src, onEach );
  var expected = [ '/prefix/a', '/prefix/b' ];
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'array filterDst';
  var original = [ '/a', 'b' ];
  var src = [ '/a', 'b' ];
  var got = _.path.filterDst( src, onEachFilter );
  var expected = '/a';
  test.identical( got, expected );
  test.identical( src, original );

  test.case = 'map';
  var original = { '/src' : '/dst' };
  var src = { '/src' : '/dst' };
  var got = _.path.filterDst( src, onEach );
  var expected = { '/prefix/src' : '/prefix/dst' };
  test.identical( got, expected );
  test.identical( src, original );

  test.case = 'map filterDst';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDst( src, onEachFilter );
  var expected = '';
  test.identical( got, expected );

  test.case = 'map with multiple keys';
  var original = { '/src1' : 'dst1', '/src2' : 'dst2' };
  var src = { '/src1' : 'dst1', '/src2' : 'dst2' };
  var got = _.path.filterDst( src, onEach );
  var expected = { '/prefix/src1' : '/prefix/dst1', '/prefix/src2' : '/prefix/dst2' };
  test.identical( got, expected );
  test.identical( src, original );
  test.true( got !== src );

  test.case = 'map filterDst';
  var src = { '/a' : [ '/b', 'c', null, undefined ] };
  var got = _.path.filterDst( src, onEachStructure );
  var expected =
  {
    '/src/a' : [ '/dst/b', '/dst/c', '/dst' ]
  }
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'map filterDst keys, onEach returns array with undefined';
  var src = { '/a' : '/b' };
  var got = _.path.filterDst( src, onEachStructureKeys );
  var expected =
  {
    '/src/a' : '/b'
  }
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDst( src, onEach );
  var expected = '/prefix';
  test.identical( got, expected );
  test.true( got !== src );

  /*  */

  function drop( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    return;
  }

  function onEach( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    return _.path.reroot( '/prefix', filePath );
  }

  function onEachFilter( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    if( _.path.isAbsolute( filePath ) )
    return filePath;
  }

  function onEachStructure( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    if( _.arrayIs( filePath ) )
    return filePath.map( onPath );
    return onPath( filePath );

    function onPath( path )
    {
      if( filePath === null )
      _.assert( 0 );
      let prefix = it.side === 'src' ? '/src' : '/dst';
      if( path === null || path === undefined )
      return prefix;
      return _.path.reroot( prefix, path );
    }
  }

  function onEachStructureKeys( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    if( it.side === 'src' )
    return [ _.path.reroot( '/src', filePath ), undefined ];
    return filePath;
  }

  test.close( 'old tests' );

  /* main tests */

  test.open( 'double' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, double );
  var expected = '/a/b';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, double );
  var expected = '/a/b';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, double );
  var expected = [ '/a/b', '/cd' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, double );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, double );
  var expected = { '/src/src' : 'dstdst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, double );
  var expected = '/src/src';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, double );
  var expected = { '/src/src' : 'dstdst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, double );
  var expected = { '/src/src' : [ 'dst1dst1', 'dst2dst2' ] };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, double );
  var expected = { '' : 'dst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, double );
  var expected = { '' : 'dst' };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, double );
  var expected = { '' : [ 'dst1', 'dst2' ] };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, double );
  var expected = '/src/src';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'double' );

  /* - */

  test.open( 'srcOnly1' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDst( src, srcOnly1 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDst( src, srcOnly1 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDst( src, srcOnly1 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDst( src, srcOnly1 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDst( src, srcOnly1 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly1 );
  var expected = '/src';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDst( src, srcOnly1 );
  var expected = '/src';
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDst( src, srcOnly1 );
  var expected = '/src';
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDst( src, srcOnly1 );
  var expected = '/src';
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDst( src, srcOnly1 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDst( src, srcOnly1 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDst( src, srcOnly1 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly1 );
  var expected = '/src';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'srcOnly1' );

  /* - */

  test.open( 'srcOnly2' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDst( src, srcOnly2 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly2 );
  var expected = '/src';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly2 );
  var expected = '/src';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly2 );
  var expected = '/src';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly2 );
  var expected = '/src';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly2 );
  var expected = '/src';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'srcOnly2' );

  /* - */

  test.open( 'nothing2' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'nothing2' );

  /* - */

  test.open( 'nothing3' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'nothing3' );

  /* - */

  test.open( 'nothing4' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing4 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'nothing4' );

  /* - */

  test.open( 'complex map' );

  var src =
  {
    '/true' : true,
    '/false' : false,
    '/null' : null,
    '/string1' : '/dir1',
    '/string2' : '',
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '' : [ '' ],
    '/emptyArray' : [],
  };

  test.case = 'double';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, double );
  var expected =
  {
    '/true/true' : true,
    '/false/false' : false,
    '/null/null' : '',
    '/string1/string1' : '/dir1/dir1',
    '/string2/string2' : '',
    'nullnull' : '/dir3/dir3',
    '/array/array' : [ '/dir1/dir1', '/dir2/dir2' ],
    '/emptyArray/emptyArray' : ''
  };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'srcOnly1';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly1 );
  var expected =
  {
    '/true' : '',
    '/false' : '',
    '/null' : '',
    '/string1' : '',
    '/string2' : '',
    'null' : '',
    '/array' : '',
    '/emptyArray' : ''
  };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'srcOnly2';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, srcOnly2 );
  var expected =
  {
    '/true' : '',
    '/false' : '',
    '/null' : '',
    '/string1' : '',
    '/string2' : '',
    'null' : '',
    '/array' : '',
    '/emptyArray' : ''
  };
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'nothing2';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'nothing3'
  var src2 = _.entity.make( src );
  var got = _.path.filterDst( src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.close( 'complex map' );

  /* - */

  if( Config.debug )
  {
    test.case = 'without arguments';
    test.shouldThrowErrorSync( () => _.path.filterDst() );

    test.case = 'one argument';
    test.shouldThrowErrorSync( () => _.path.filterDst( '/path' ) );

    test.case = 'extra arguments';
    test.shouldThrowErrorSync( () => _.path.filterDst( '/a/b', drop, 'abs' ) );

    test.case = 'wrong type of filePath';
    test.shouldThrowErrorSync( () => _.path.filterDst( 1, double ) );

    test.case = 'wrong type of onEach';
    test.shouldThrowErrorSync( () => _.path.filterDst( '/path', '/path' ) );
  }

  /* callbacks */

  function double( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'src' )
    return _.strIs( it.src ) ? it.src + it.src : it.src;
    if( it.side === 'dst' && it.src !== '' )
    return _.strIs( it.dst ) ? it.dst + it.dst : it.dst;
    if( filePath )
    return filePath;
    return '';
  }

  function srcOnly1( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'dst' )
    return '';
    return filePath;
  }

  function srcOnly2( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'dst' )
    return '';
    return [ filePath ];
  }

  function dstOnly( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'src' )
    return '';
    return filePath;
  }

  function dstDouble( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'src' )
    return '';
    return filePath + filePath;
  }

  function nothing1( filePath )
  {
    if( filePath === null )
    _.assert( 0 );
    return [];
  }

  function nothing2( filePath )
  {
    if( filePath === null )
    _.assert( 0 );
    return '';
  }

  function nothing3( filePath )
  {
    if( filePath === null )
    _.assert( 0 );
    return null;
  }

  function nothing4( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );
    return null;
  }

}

//

function filter_( test )
{
  test.open( 'callback returns array' );

  test.case = 'empty string';
  var src = '';
  var got = _.path.filter_( src, ( e, it ) => [ e ] );
  var expected = '';
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'not empty strings';
  var src = '/dir';
  var got = _.path.filter_( src, ( e, it ) => [ e ] );
  var expected = '/dir';
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filter_( src, ( e, it ) => [ e ] );
  var expected = [];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'empty array, dst is null';
  var src = [];
  var got = _.path.filter_( null, src, ( e, it ) => [ e ] );
  var expected = '';
  test.true( got !== src );
  test.identical( got, expected );

  test.case = 'array has one element';
  var src = [ '/dir' ];
  var got = _.path.filter_( src, ( e, it ) => [ e ] );
  var expected = [ '/dir' ];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'array has a few elements';
  var src = [ '/dir', '/dir2', '/dir2', '/dir3' ];
  var got = _.path.filter_( src, ( e, it ) => [ e ] );
  var expected = [ '/dir', '/dir2', '/dir3' ];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'array has a few elements, dst is null';
  var src = [ '/dir', '/dir2', '/dir2', '/dir3' ];
  var got = _.path.filter_( null, src, ( e, it ) => [ e ] );
  var expected = [ '/dir', '/dir2', '/dir3' ];
  test.true( got !== src );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filter_( src, ( e, it ) => [ e ] );
  var expected = {};
  test.true( got === src );

  test.case = 'empty map, dst is null';
  var src = {};
  var got = _.path.filter_( null, src, ( e, it ) => [ e ] );
  var expected = '';
  test.true( got !== src );
  test.identical( got, expected );

  test.case = 'empty dst in map';
  var src = { '/dir' : '' };
  var got = _.path.filter_( src, ( e, it ) => [ e ] );
  var expected = { '/dir' : '' };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'map, dst has one element';
  var src = { '/dir' : [ '/a/b' ] };
  var got = _.path.filter_( src, ( e, it ) => [ e ] );
  var expected = { '/dir' : '/a/b' };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'map, map has a few elements';
  var src = { '/dir' : [ '/a/b', '/cd' ] };
  var got = _.path.filter_( src, ( e, it ) => [ e ] );
  var expected = { '/dir' : [ '/a/b', '/cd' ] };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'map, map has a few elements, dst is null';
  var src = { '/dir' : [ '/a/b', '/cd' ] };
  var got = _.path.filter_( null, src, ( e, it ) => [ e ] );
  var expected = { '/dir' : [ '/a/b', '/cd' ] };
  test.true( got !== src );
  test.identical( got, expected );

  test.close( 'callback returns array' );

  /* main tests */

  test.open( 'double' );

  test.case = 'null';
  var src = null;
  var got = _.path.filter_( src, double );
  var expected = '';
  test.true( got !== src );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filter_( src, double );
  var expected = '';
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filter_( src, double );
  var expected = '/a/b/a/b';
  test.true( got !== src );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filter_( src, double );
  var expected = [];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filter_( src, double );
  var expected = [ '/a/b/a/b' ];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filter_( src, double );
  var expected = [ '/a/b/a/b', '/cd/cd' ];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filter_( src, double );
  var expected = [ '/a/b/a/b', '/c/d/c/d' ];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filter_( src, double );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filter_( src, double );
  var expected = { '/src/src' : 'dstdst' };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filter_( src, double );
  var expected = { '/src/src' : '' };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filter_( src, double );
  var expected = { '/src/src' : 'dstdst' };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filter_( src, double );
  var expected = { '/src/src' : [ 'dst1dst1', 'dst2dst2' ] };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filter_( src, double );
  var expected = { '' : 'dstdst' };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filter_( src, double );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filter_( src, double );
  var expected = { '' : 'dstdst' };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filter_( src, double );
  var expected = { '' : [ 'dst1dst1', 'dst2dst2' ] };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filter_( src, double );
  var expected = { '/src/src' : '' };
  test.true( got === src );
  test.identical( got, expected );

  test.close( 'double' );

  /* - */

  test.open( 'srcOnly1' );

  test.case = 'null';
  var src = null;
  var got = _.path.filter_( src, srcOnly1 );
  var expected = '';
  test.true( got !== src );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filter_( src, srcOnly1 );
  var expected = '';
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filter_( src, srcOnly1 );
  var expected = '/a/b';
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filter_( src, srcOnly1 );
  var expected = [];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filter_( src, srcOnly1 );
  var expected = [ '/a/b' ];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filter_( src, srcOnly1 );
  var expected = [ '/a/b', '/cd' ];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filter_( src, srcOnly1 );
  var expected = [ '/a/b', '/c/d' ];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filter_( src, srcOnly1 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filter_( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filter_( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filter_( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filter_( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filter_( src, srcOnly1 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filter_( src, srcOnly1 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filter_( src, srcOnly1 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filter_( src, srcOnly1 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filter_( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.true( got === src );
  test.identical( got, expected );

  test.close( 'srcOnly1' );

  /* - */

  test.open( 'srcOnly2' );

  test.case = 'null';
  var src = null;
  var got = _.path.filter_( src, srcOnly2 );
  var expected = '';
  test.true( got !== src );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filter_( src, srcOnly2 );
  var expected = '';
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filter_( src, srcOnly2 );
  var expected = '/a/b';
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filter_( src, srcOnly2 );
  var expected = [];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filter_( src, srcOnly2 );
  var expected = [ '/a/b' ];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filter_( src, srcOnly2 );
  var expected = [ '/a/b', '/cd' ];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filter_( src, srcOnly2 );
  var expected = [ '/a/b', '/c/d' ];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filter_( src, srcOnly2 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filter_( src, srcOnly2 );
  var expected = { '/src' : '' };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filter_( src, srcOnly2 );
  var expected = { '/src' : '' };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filter_( src, srcOnly2 );
  var expected = { '/src' : '' };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filter_( src, srcOnly2 );
  var expected = { '/src' : '' };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filter_( src, srcOnly2 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filter_( src, srcOnly2 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filter_( src, srcOnly2 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filter_( src, srcOnly2 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filter_( src, srcOnly2 );
  var expected = { '/src' : '' };
  test.true( got === src );
  test.identical( got, expected );

  test.close( 'srcOnly2' );

  /* - */

  test.open( 'nothing1' );

  test.case = 'null';
  var src = null;
  var got = _.path.filter_( src, nothing1 );
  var expected = '';
  test.true( got !== src );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filter_( src, nothing1 );
  var expected = '';
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filter_( src, nothing1 );
  var expected = '';
  test.true( got !== src );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filter_( src, nothing1 );
  var expected = [];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filter_( src, nothing1 );
  var expected = [];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filter_( src, nothing1 );
  var expected = [];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filter_( src, nothing1 );
  var expected = [];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filter_( src, nothing1 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filter_( src, nothing1 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filter_( src, nothing1 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filter_( src, nothing1 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filter_( src, nothing1 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filter_( src, nothing1 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filter_( src, nothing1 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filter_( src, nothing1 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filter_( src, nothing1 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filter_( src, nothing1 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.close( 'nothing1' );

  /* - */

  test.open( 'nothing2' );

  test.case = 'null';
  var src = null;
  var got = _.path.filter_( src, nothing2 );
  var expected = '';
  test.true( got !== src );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filter_( src, nothing2 );
  var expected = '';
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filter_( src, nothing2 );
  var expected = '';
  test.true( got !== src );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filter_( src, nothing2 );
  var expected = [];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filter_( src, nothing2 );
  var expected = [];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filter_( src, nothing2 );
  var expected = [];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filter_( src, nothing2 );
  var expected = [];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filter_( src, nothing2 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filter_( src, nothing2 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filter_( src, nothing2 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filter_( src, nothing2 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filter_( src, nothing2 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filter_( src, nothing2 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filter_( src, nothing2 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filter_( src, nothing2 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filter_( src, nothing2 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filter_( src, nothing2 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.close( 'nothing2' );

  /* - */

  test.open( 'nothing3' );

  test.case = 'null';
  var src = null;
  var got = _.path.filter_( src, nothing3 );
  var expected = '';
  test.true( got !== src );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filter_( src, nothing3 );
  var expected = '';
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filter_( src, nothing3 );
  var expected = '';
  test.true( got !== src );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filter_( src, nothing3 );
  var expected = [];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filter_( src, nothing3 );
  var expected = [];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filter_( src, nothing3 );
  var expected = [];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filter_( src, nothing3 );
  var expected = [];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filter_( src, nothing3 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.close( 'nothing3' );

  /* - */

  test.open( 'complex map' );

  var srcMap =
  {
    '/true' : true,
    '/false' : false,
    '/null' : null,
    '/string1' : '/dir1',
    '/string2' : '',
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '' : [ '' ],
    '/emptyArray' : [],
  };

  /* */

  test.case = 'double';
  var src = _.entity.make( srcMap );
  var got = _.path.filter_( src, double );
  var expected =
  {
    '/true/true' : true,
    '/false/false' : false,
    '/null/null' : '',
    '/string1/string1' : '/dir1/dir1',
    '/string2/string2' : '',
    'nullnull' : '/dir3/dir3',
    '/array/array' : [ '/dir1/dir1', '/dir2/dir2' ],
    '/emptyArray/emptyArray' : ''
  };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'srcOnly1';
  var src = _.entity.make( srcMap );
  var got = _.path.filter_( src, srcOnly1 );
  var expected =
  {
    '/true' : '',
    '/false' : '',
    '/string1' : '',
    '/string2' : '',
    '/null' : '',
    'null' : '',
    '/array' : '',
    '/emptyArray' : ''
  };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'srcOnly2';
  var src = _.entity.make( srcMap );
  var got = _.path.filter_( src, srcOnly2 );
  var expected =
  {
    '/true' : '',
    '/false' : '',
    '/string1' : '',
    '/string2' : '',
    '/null' : '',
    'null' : '',
    '/array' : '',
    '/emptyArray' : ''
  };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'nothing1';
  var src = _.entity.make( srcMap );
  var got = _.path.filter_( src, nothing1 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'nothing2'
  var src = _.entity.make( srcMap );
  var got = _.path.filter_( src, nothing2 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.close( 'complex map' );

  /* - */

  if( Config.debug )
  {
    test.case = 'without arguments';
    test.shouldThrowErrorSync( () => _.path.filter_() );

    test.case = 'one argument';
    test.shouldThrowErrorSync( () => _.path.filter_( '/path' ) );

    test.case = 'extra arguments';
    test.shouldThrowErrorSync( () => _.path.filter_( '/a/b', drop, 'abs' ) );

    test.case = 'wrong type of filePath';
    test.shouldThrowErrorSync( () => _.path.filter_( 1, double ) );

    test.case = 'wrong type of onEach';
    test.shouldThrowErrorSync( () => _.path.filter_( '/path', '/path' ) );
  }

  /* callbacks */

  function double( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'src' )
    return _.strIs( it.src ) ? it.src + it.src : it.src;
    if( it.side === 'dst' )
    return _.strIs( it.dst ) ? it.dst + it.dst : it.dst;
    if( filePath )
    return filePath + filePath;
    return '';
  }

  function srcOnly1( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'dst' )
    return '';
    if( filePath )
    return filePath;
  }

  function srcOnly2( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'dst' )
    return '';
    if( filePath )
    return [ filePath ];
  }

  function nothing1( filePath )
  {
    if( filePath === null )
    _.assert( 0 );
    return [];
  }

  function nothing2( filePath )
  {
    if( filePath === null )
    _.assert( 0 );
    return '';
  }

  function nothing3( filePath )
  {
    if( filePath === null )
    _.assert( 0 );
    return null;
  }

}

//

function filterDst_( test )
{
  test.open( 'callback returns array' );

  test.case = 'empty string';
  var src = '';
  var got = _.path.filterDst_( src, ( e, it ) => [ e ] );
  var expected = '';
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'not empty strings';
  var src = '/dir';
  var got = _.path.filterDst_( src, ( e, it ) => [ e ] );
  var expected = '/dir';
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDst_( src, ( e, it ) => [ e ] );
  var expected = [];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'empty array, dst is null';
  var src = [];
  var got = _.path.filterDst_( null, src, ( e, it ) => [ e ] );
  var expected = '';
  test.true( got !== src );
  test.identical( got, expected );

  test.case = 'array has one element';
  var src = [ '/dir' ];
  var got = _.path.filterDst_( src, ( e, it ) => [ e ] );
  var expected = [ '/dir' ];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'array has a few elements';
  var src = [ '/dir', '/dir2', '/dir2', '/dir3' ];
  var got = _.path.filterDst_( src, ( e, it ) => [ e ] );
  var expected = [ '/dir', '/dir2', '/dir3' ];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'array has a few elements, dst is null';
  var src = [ '/dir', '/dir2', '/dir2', '/dir3' ];
  var got = _.path.filterDst_( null, src, ( e, it ) => [ e ] );
  var expected = [ '/dir', '/dir2', '/dir3' ];
  test.true( got !== src );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDst_( src, ( e, it ) => [ e ] );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'empty map, dst is null';
  var src = {};
  var got = _.path.filterDst_( null, src, ( e, it ) => [ e ] );
  var expected = '';
  test.true( got !== src );
  test.identical( got, expected );

  test.case = 'empty dst in map';
  var src = { '/dir' : [] };
  var got = _.path.filterDst_( src, ( e, it ) => [ e ] );
  var expected = { '/dir' : '' };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'map, dst has one element';
  var src = { '/dir' : [ '/a/b' ] };
  var got = _.path.filterDst_( src, ( e, it ) => [ e ] );
  var expected = { '/dir' : '/a/b' };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'map, map has a few elements';
  var src = { '/dir' : [ '/a/b', '/cd' ] };
  var got = _.path.filterDst_( src, ( e, it ) => [ e ] );
  var expected = { '/dir' : [ '/a/b', '/cd' ] };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'map, map has a few elements, dst is null';
  var src = { '/dir' : [ '/a/b', '/cd' ] };
  var got = _.path.filterDst_( null, src, ( e, it ) => [ e ] );
  var expected = { '/dir' : [ '/a/b', '/cd' ] };
  test.true( got !== src );
  test.identical( got, expected );

  test.close( 'callback returns array' );

  /* main tests */

  test.open( 'double' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDst_( src, double );
  var expected = '';
  test.true( got !== src );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDst_( src, double );
  var expected = '';
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDst_( src, double );
  var expected = '/a/b/a/b';
  test.true( got !== src );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDst_( src, double );
  var expected = [];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDst_( src, double );
  var expected = [ '/a/b/a/b' ];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDst_( src, double );
  var expected = [ '/a/b/a/b', '/cd/cd' ];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDst_( src, double );
  var expected = [ '/a/b/a/b', '/c/d/c/d' ];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDst_( src, double );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDst_( src, double );
  var expected = { '/src/src' : 'dstdst' };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDst_( src, double );
  var expected = { '/src/src' : '' };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDst_( src, double );
  var expected = { '/src/src' : 'dstdst' };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDst_( src, double );
  var expected = { '/src/src' : [ 'dst1dst1', 'dst2dst2' ] };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDst_( src, double );
  var expected = { '' : 'dstdst' };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDst_( src, double );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDst_( src, double );
  var expected = { '' : 'dstdst' };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDst_( src, double );
  var expected = { '' : [ 'dst1dst1', 'dst2dst2' ] };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDst_( src, double );
  var expected = { '/src/src' : '' };
  test.true( got === src );
  test.identical( got, expected );

  test.close( 'double' );

  /* - */

  test.open( 'srcOnly1' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDst_( src, srcOnly1 );
  var expected = '';
  test.true( got !== src );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDst_( src, srcOnly1 );
  var expected = '';
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDst_( src, srcOnly1 );
  var expected = '';
  test.true( got !== src );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDst_( src, srcOnly1 );
  var expected = [];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDst_( src, srcOnly1 );
  var expected = [];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDst_( src, srcOnly1 );
  var expected = [];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDst_( src, srcOnly1 );
  var expected = [];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDst_( src, srcOnly1 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDst_( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDst_( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDst_( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDst_( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDst_( src, srcOnly1 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDst_( src, srcOnly1 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDst_( src, srcOnly1 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDst_( src, srcOnly1 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDst_( src, srcOnly1 );
  var expected = { '/src' : '' };
  test.true( got === src );
  test.identical( got, expected );

  test.close( 'srcOnly1' );

  /* - */

  test.open( 'srcOnly2' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDst_( src, srcOnly2 );
  var expected = '';
  test.true( got !== src );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDst_( src, srcOnly2 );
  var expected = '';
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDst_( src, srcOnly2 );
  var expected = '';
  test.true( got !== src );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDst_( src, srcOnly2 );
  var expected = [];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDst_( src, srcOnly2 );
  var expected = [];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDst_( src, srcOnly2 );
  var expected = [];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDst_( src, srcOnly2 );
  var expected = [];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDst_( src, srcOnly2 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDst_( src, srcOnly2 );
  var expected = { '/src' : '' };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDst_( src, srcOnly2 );
  var expected = { '/src' : '' };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDst_( src, srcOnly2 );
  var expected = { '/src' : '' };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDst_( src, srcOnly2 );
  var expected = { '/src' : '' };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDst_( src, srcOnly2 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDst_( src, srcOnly2 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDst_( src, srcOnly2 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDst_( src, srcOnly2 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDst_( src, srcOnly2 );
  var expected = { '/src' : '' };
  test.true( got === src );
  test.identical( got, expected );

  test.close( 'srcOnly2' );

  /* - */

  test.open( 'nothing1' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDst_( src, nothing1 );
  var expected = '';
  test.true( got !== src );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDst_( src, nothing1 );
  var expected = '';
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDst_( src, nothing1 );
  var expected = '';
  test.true( got !== src );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDst_( src, nothing1 );
  var expected = [];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDst_( src, nothing1 );
  var expected = [];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDst_( src, nothing1 );
  var expected = [];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDst_( src, nothing1 );
  var expected = [];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDst_( src, nothing1 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDst_( src, nothing1 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDst_( src, nothing1 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDst_( src, nothing1 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDst_( src, nothing1 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDst_( src, nothing1 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDst_( src, nothing1 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDst_( src, nothing1 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDst_( src, nothing1 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDst_( src, nothing1 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.close( 'nothing1' );

  /* - */

  test.open( 'nothing2' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDst_( src, nothing2 );
  var expected = '';
  test.true( got !== src );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDst_( src, nothing2 );
  var expected = '';
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDst_( src, nothing2 );
  var expected = '';
  test.true( got !== src );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDst_( src, nothing2 );
  var expected = [];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDst_( src, nothing2 );
  var expected = [];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDst_( src, nothing2 );
  var expected = [];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDst_( src, nothing2 );
  var expected = [];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDst_( src, nothing2 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDst_( src, nothing2 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDst_( src, nothing2 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDst_( src, nothing2 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDst_( src, nothing2 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDst_( src, nothing2 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDst_( src, nothing2 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDst_( src, nothing2 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDst_( src, nothing2 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDst_( src, nothing2 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.close( 'nothing2' );

  /* - */

  test.open( 'nothing3' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDst_( src, nothing3 );
  var expected = '';
  test.true( got !== src );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var got = _.path.filterDst_( src, nothing3 );
  var expected = '';
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'string';
  var src = '/a/b';
  var got = _.path.filterDst_( src, nothing3 );
  var expected = '';
  test.true( got !== src );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDst_( src, nothing3 );
  var expected = [];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDst_( src, nothing3 );
  var expected = [];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDst_( src, nothing3 );
  var expected = [];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDst_( src, nothing3 );
  var expected = [];
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDst_( src, nothing3 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.close( 'nothing3' );

  /* - */

  test.open( 'complex map' );

  var srcMap =
  {
    '/true' : true,
    '/false' : false,
    '/null' : null,
    '/string1' : '/dir1',
    '/string2' : '',
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '' : [ '' ],
    '/emptyArray' : [],
  };

  /* */

  test.case = 'double';
  var src = _.entity.make( srcMap );
  var got = _.path.filterDst_( src, double );
  var expected =
  {
    '/true/true' : true,
    '/false/false' : false,
    '/null/null' : '',
    '/string1/string1' : '/dir1/dir1',
    '/string2/string2' : '',
    'nullnull' : '/dir3/dir3',
    '/array/array' : [ '/dir1/dir1', '/dir2/dir2' ],
    '/emptyArray/emptyArray' : ''
  };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'srcOnly1';
  var src = _.entity.make( srcMap );
  var got = _.path.filterDst_( src, srcOnly1 );
  var expected =
  {
    '/true' : '',
    '/false' : '',
    '/string1' : '',
    '/string2' : '',
    '/null' : '',
    'null' : '',
    '/array' : '',
    '/emptyArray' : ''
  };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'srcOnly2';
  var src = _.entity.make( srcMap );
  var got = _.path.filterDst_( src, srcOnly2 );
  var expected =
  {
    '/true' : '',
    '/false' : '',
    '/string1' : '',
    '/string2' : '',
    '/null' : '',
    'null' : '',
    '/array' : '',
    '/emptyArray' : ''
  };
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'nothing1';
  var src = _.entity.make( srcMap );
  var got = _.path.filterDst_( src, nothing1 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.case = 'nothing2';
  var src = _.entity.make( srcMap );
  var got = _.path.filterDst_( src, nothing2 );
  var expected = {};
  test.true( got === src );
  test.identical( got, expected );

  test.close( 'complex map' );

  /* - */

  if( Config.debug )
  {
    test.case = 'without arguments';
    test.shouldThrowErrorSync( () => _.path.filterDst_() );

    test.case = 'one argument';
    test.shouldThrowErrorSync( () => _.path.filterDst_( '/path' ) );

    test.case = 'extra arguments';
    test.shouldThrowErrorSync( () => _.path.filterDst_( '/a/b', drop, 'abs' ) );

    test.case = 'wrong type of filePath';
    test.shouldThrowErrorSync( () => _.path.filterDst_( 1, double ) );

    test.case = 'wrong type of onEach';
    test.shouldThrowErrorSync( () => _.path.filterDst_( '/path', '/path' ) );
  }

  /* callbacks */

  function double( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'src' )
    return _.strIs( it.src ) ? it.src + it.src : it.src;
    if( it.side === 'dst' )
    return _.strIs( it.dst ) ? it.dst + it.dst : it.dst;
    if( filePath )
    return filePath + filePath;
    return '';
  }

  function srcOnly1( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'dst' )
    return '';
    if( filePath )
    return filePath;
  }

  function srcOnly2( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'dst' )
    return '';
    if( filePath )
    return [ filePath ];
  }

  function nothing1( filePath )
  {
    if( filePath === null )
    _.assert( 0 );
    return [];
  }

  function nothing2( filePath )
  {
    if( filePath === null )
    _.assert( 0 );
    return '';
  }

  function nothing3( filePath )
  {
    if( filePath === null )
    _.assert( 0 );
    return null;
  }

}

//

function filterInplace_( test )
{
  test.open( 'callback returns array' );

  test.case = 'null';
  var src = null;
  var got = _.path.filter_( src, src, ( e, it ) => [ e ] );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty string';
  var src = '';
  var got = _.path.filter_( src, src, ( e, it ) => [ e ] );
  var expected = '';
  test.identical( got, expected );

  test.case = 'not empty strings';
  var src = '/dir';
  var got = _.path.filter_( src, src, ( e, it ) => [ e ] );
  var expected = '/dir';
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filter_( src, src, ( e, it ) => [ e ] );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'array has one element';
  var src = [ '/dir' ];
  var got = _.path.filter_( src, src, ( e, it ) => [ e ] );
  var expected = [ '/dir' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'array has a few elements';
  var src = [ '/dir', '/dir2', '/dir2', '/dir3' ]
  var got = _.path.filter_( src, src, ( e, it ) => [ e ] );
  var expected = [ '/dir', '/dir2', '/dir3' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filter_( src, src, ( e, it ) => [ e ] );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty dst in map';
  var src = { '/dir' : [] };
  var got = _.path.filter_( src, src, ( e, it ) => [ e ] );
  var expected = { '/dir' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'map, dst has one element';
  var src = { '/dir' : [ '/a/b' ] };
  var got = _.path.filter_( src, src, ( e, it ) => [ e ] );
  var expected = { '/dir' : '/a/b' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'map, map has a few elements';
  var src = { '/dir' : [ '/a/b', '/cd' ] };
  var got = _.path.filter_( src, src, ( e, it ) => [ e ] );
  var expected = { '/dir' : [ '/a/b', '/cd' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'callback returns array' );

  /* main tests */

  test.open( 'double' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filter_( src, src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filter_( src, src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filter_( src, src, double );
  var expected = '/a/b/a/b';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filter_( src, src, double );
  var expected = [];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filter_( src, src, double );
  var expected = [ '/a/b/a/b' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filter_( src, src, double );
  var expected = [ '/a/b/a/b', '/cd/cd' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filter_( src, src, double );
  var expected = [ '/a/b/a/b', '/c/d/c/d' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filter_( src, src, double );
  var expected = {};
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filter_( src, src, double );
  var expected = { '/src/src' : 'dstdst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filter_( src, src, double );
  var expected = { '/src/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filter_( src, src, double );
  var expected = { '/src/src' : 'dstdst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filter_( src, src, double );
  var expected = { '/src/src' : [ 'dst1dst1', 'dst2dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filter_( src, src, double );
  var expected = { '' : 'dstdst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filter_( src, src, double );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filter_( src, src, double );
  var expected = { '' : 'dstdst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filter_( src, src, double );
  var expected = { '' : [ 'dst1dst1', 'dst2dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filter_( src, src, double );
  var expected = { '/src/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'double' );

  /* - */

  test.open( 'srcOnly1' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filter_( src, src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filter_( src, src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filter_( src, src, srcOnly1 );
  var expected = '/a/b';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filter_( src, src, srcOnly1 );
  var expected = [];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filter_( src, src, srcOnly1 );
  var expected = [ '/a/b' ];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filter_( src, src, srcOnly1 );
  var expected = [ '/a/b', '/cd' ];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filter_( src, src, srcOnly1 );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filter_( src, src, srcOnly1 );
  var expected = {};
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filter_( src, src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filter_( src, src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filter_( src, src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filter_( src, src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filter_( src, src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filter_( src, src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filter_( src, src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filter_( src, src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filter_( src, src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'srcOnly1' );

  /* - */

  test.open( 'srcOnly2' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filter_( src, src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filter_( src, src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filter_( src, src, srcOnly2 );
  var expected = '/a/b';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filter_( src, src, srcOnly2 );
  var expected = [];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var src2 = _.entity.make( src );
  var got = _.path.filter_( src, src, srcOnly2 );
  var expected = [ '/a/b' ];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var src2 = _.entity.make( src );
  var got = _.path.filter_( src, src, srcOnly2 );
  var expected = [ '/a/b', '/cd' ];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filter_( src, src, srcOnly2 );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filter_( src, src, srcOnly2 );
  var expected = {};
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filter_( src, src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filter_( src, src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filter_( src, src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filter_( src, src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filter_( src, src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filter_( src, src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filter_( src, src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filter_( src, src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filter_( src, src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'srcOnly2' );

  /* - */

  test.open( 'nothing1' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filter_( src, src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filter_( src, src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filter_( src, src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filter_( src, src, nothing1 );
  var expected = [];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filter_( src, src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filter_( src, src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filter_( src, src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filter_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filter_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filter_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filter_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filter_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filter_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filter_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filter_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filter_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filter_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing1' );

  /* - */

  test.open( 'nothing2' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filter_( src, src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filter_( src, src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filter_( src, src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filter_( src, src, nothing2 );
  var expected = [];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filter_( src, src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filter_( src, src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filter_( src, src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filter_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filter_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filter_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filter_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filter_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filter_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filter_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filter_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filter_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filter_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing2' );

  /* - */

  test.open( 'nothing3' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filter_( src, src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filter_( src, src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filter_( src, src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filter_( src, src, nothing3 );
  var expected = [];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filter_( src, src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filter_( src, src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filter_( src, src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filter_( src, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing3' );

  /* - */

  test.open( 'complex map' );

  var srcMap =
  {
    '/true' : true,
    '/false' : false,
    '/null' : null,
    '/string1' : '/dir1',
    '/string2' : '',
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '' : [ '' ],
    '/emptyArray' : [],
  };

  test.case = 'double';
  var src = _.entity.make( srcMap );
  var got = _.path.filter_( src, src, double );
  var expected =
  {
    '/true/true' : true,
    '/false/false' : false,
    '/null/null' : '',
    '/string1/string1' : '/dir1/dir1',
    '/string2/string2' : '',
    'nullnull' : '/dir3/dir3',
    '/array/array' : [ '/dir1/dir1', '/dir2/dir2' ],
    '/emptyArray/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly1';
  var src = _.entity.make( srcMap );
  var got = _.path.filter_( src, src, srcOnly1 );
  var expected =
  {
    '/true' : '',
    '/false' : '',
    '/null' : '',
    '/string2' : '',
    '/emptyArray' : '',
    '/string1' : '',
    'null' : '',
    '/array' : ''
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly2';
  var src = _.entity.make( srcMap );
  var got = _.path.filter_( src, src, srcOnly2 );
  var expected =
  {
    '/true' : '',
    '/false' : '',
    '/null' : '',
    '/string1' : '',
    '/string2' : '',
    'null' : '',
    '/array' : '',
    '/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing1';
  var src = _.entity.make( srcMap );
  var got = _.path.filter_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing2'
  var src = _.entity.make( srcMap );
  var got = _.path.filter_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'complex map' );

  /* callbacks */

  function double( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'src' )
    return _.strIs( it.src ) ? it.src + it.src : it.src;
    if( it.side === 'dst' )
    return _.strIs( it.dst ) ? it.dst + it.dst : it.dst;
    if( filePath )
    return filePath + filePath;
    return '';
  }

  function srcOnly1( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'dst' )
    return '';
    return filePath;
  }

  function srcOnly2( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'dst' )
    return '';
    return [ filePath ];
  }

  function dstOnly( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'src' )
    return '';
    return filePath;
  }

  function dstDouble( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'src' )
    return '';
    return filePath + filePath;
  }

  function nothing1( filePath )
  {
    if( filePath === null )
    _.assert( 0 );
    return [];
  }

  function nothing2( filePath )
  {
    if( filePath === null )
    _.assert( 0 );
    return '';
  }

  function nothing3( filePath )
  {
    if( filePath === null )
    _.assert( 0 );
    return null;
  }

}

//

function filterDstInplace_( test )
{
  test.open( 'callback returns array' );

  test.case = 'null';
  var src = null;
  var got = _.path.filterDst_( src, src, ( e, it ) => [ e ] );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty string';
  var src = '';
  var got = _.path.filterDst_( src, src, ( e, it ) => [ e ] );
  var expected = '';
  test.identical( got, expected );

  test.case = 'not empty strings';
  var src = '/dir';
  var got = _.path.filterDst_( src, src, ( e, it ) => [ e ] );
  var expected = '/dir';
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var got = _.path.filterDst_( src, src, ( e, it ) => [ e ] );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'array has one element';
  var src = [ '/dir' ];
  var got = _.path.filterDst_( src, src, ( e, it ) => [ e ] );
  var expected = [ '/dir' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'array has a few elements';
  var src = [ '/dir', '/dir2', '/dir2', '/dir3' ]
  var got = _.path.filterDst_( src, src, ( e, it ) => [ e ] );
  var expected = [ '/dir', '/dir2', '/dir3' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDst_( src, src, ( e, it ) => [ e ] );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty dst in map';
  var src = { '/dir' : [] };
  var got = _.path.filterDst_( src, src, ( e, it ) => [ e ] );
  var expected = { '/dir' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'map, dst has one element';
  var src = { '/dir' : [ '/a/b' ] };
  var got = _.path.filterDst_( src, src, ( e, it ) => [ e ] );
  var expected = { '/dir' : '/a/b' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'map, map has a few elements';
  var src = { '/dir' : [ '/a/b', '/cd' ] };
  var got = _.path.filterDst_( src, src, ( e, it ) => [ e ] );
  var expected = { '/dir' : [ '/a/b', '/cd' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'callback returns array' );

  /* main tests */

  test.open( 'double' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterDst_( src, src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst_( src, src, double );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst_( src, src, double );
  var expected = '/a/b/a/b';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst_( src, src, double );
  var expected = [];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDst_( src, src, double );
  var expected = [ '/a/b/a/b' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDst_( src, src, double );
  var expected = [ '/a/b/a/b', '/cd/cd' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDst_( src, src, double );
  var expected = [ '/a/b/a/b', '/c/d/c/d' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterDst_( src, src, double );
  var expected = {};
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDst_( src, src, double );
  var expected = { '/src/src' : 'dstdst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDst_( src, src, double );
  var expected = { '/src/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDst_( src, src, double );
  var expected = { '/src/src' : 'dstdst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDst_( src, src, double );
  var expected = { '/src/src' : [ 'dst1dst1', 'dst2dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDst_( src, src, double );
  var expected = { '' : 'dstdst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDst_( src, src, double );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDst_( src, src, double );
  var expected = { '' : 'dstdst' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDst_( src, src, double );
  var expected = { '' : [ 'dst1dst1', 'dst2dst2' ] };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDst_( src, src, double );
  var expected = { '/src/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'double' );

  /* - */

  test.open( 'srcOnly1' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterDst_( src, src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst_( src, src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst_( src, src, srcOnly1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst_( src, src, srcOnly1 );
  var expected = [];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDst_( src, src, srcOnly1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDst_( src, src, srcOnly1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDst_( src, src, srcOnly1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterDst_( src, src, srcOnly1 );
  var expected = {};
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDst_( src, src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDst_( src, src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDst_( src, src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDst_( src, src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDst_( src, src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDst_( src, src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDst_( src, src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDst_( src, src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDst_( src, src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'srcOnly1' );

  /* - */

  test.open( 'srcOnly2' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterDst_( src, src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst_( src, src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst_( src, src, srcOnly2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst_( src, src, srcOnly2 );
  var expected = [];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDst_( src, src, srcOnly2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDst_( src, src, srcOnly2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDst_( src, src, srcOnly2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var src2 = _.entity.make( src );
  var got = _.path.filterDst_( src, src, srcOnly2 );
  var expected = {};
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDst_( src, src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDst_( src, src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDst_( src, src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDst_( src, src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDst_( src, src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDst_( src, src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDst_( src, src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDst_( src, src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDst_( src, src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'srcOnly2' );

  /* - */

  test.open( 'nothing1' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterDst_( src, src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst_( src, src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst_( src, src, nothing1 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst_( src, src, nothing1 );
  var expected = [];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDst_( src, src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDst_( src, src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDst_( src, src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDst_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDst_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDst_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDst_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDst_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDst_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDst_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDst_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDst_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDst_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing1' );

  /* - */

  test.open( 'nothing2' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterDst_( src, src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst_( src, src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst_( src, src, nothing2 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst_( src, src, nothing2 );
  var expected = [];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDst_( src, src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDst_( src, src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDst_( src, src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDst_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst and src';
  var src = { '/src' : 'dst' };
  var got = _.path.filterDst_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single empty array and src';
  var src = { '/src' : [] };
  var got = _.path.filterDst_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in single element array and src';
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDst_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with dst in multiple element array and src';
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDst_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst';
  var src = { '' : 'dst' };
  var got = _.path.filterDst_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in empty array';
  var src = { '' : [ '' ] };
  var got = _.path.filterDst_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in single element array';
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDst_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only dst in multiple element array';
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDst_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element map with only src';
  var src = { '/src' : '' };
  var got = _.path.filterDst_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing2' );

  /* - */

  test.open( 'nothing3' );

  test.case = 'null';
  var src = null;
  var src2 = _.entity.make( src );
  var got = _.path.filterDst_( src, src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty';
  var src = '';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst_( src, src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'string';
  var src = '/a/b';
  var src2 = _.entity.make( src );
  var got = _.path.filterDst_( src, src, nothing3 );
  var expected = '';
  test.identical( src, src2 );
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var src2 = _.entity.make( src );
  var got = _.path.filterDst_( src, src, nothing3 );
  var expected = [];
  test.identical( src, src2 );
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'single element array';
  var src = [ '/a/b' ];
  var got = _.path.filterDst_( src, src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'several elements array';
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDst_( src, src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'duplicates in array';
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDst_( src, src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'empty map';
  var src = {};
  var got = _.path.filterDst_( src, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'nothing3' );

  /* - */

  test.open( 'complex map' );

  var srcMap =
  {
    '/true' : true,
    '/false' : false,
    '/null' : null,
    '/string1' : '/dir1',
    '/string2' : '',
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '' : [ '' ],
    '/emptyArray' : [],
  };

  test.case = 'double';
  var src = _.entity.make( srcMap );
  var got = _.path.filterDst_( src, src, double );
  var expected =
  {
    '/true/true' : true,
    '/false/false' : false,
    '/null/null' : '',
    '/string1/string1' : '/dir1/dir1',
    '/string2/string2' : '',
    'nullnull' : '/dir3/dir3',
    '/array/array' : [ '/dir1/dir1', '/dir2/dir2' ],
    '/emptyArray/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly1';
  var src = _.entity.make( srcMap );
  var got = _.path.filterDst_( src, src, srcOnly1 );
  var expected =
  {
    '/true' : '',
    '/false' : '',
    '/null' : '',
    '/string2' : '',
    '/emptyArray' : '',
    '/string1' : '',
    'null' : '',
    '/array' : ''
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'srcOnly2';
  var src = _.entity.make( srcMap );
  var got = _.path.filterDst_( src, src, srcOnly2 );
  var expected =
  {
    '/true' : '',
    '/false' : '',
    '/null' : '',
    '/string1' : '',
    '/string2' : '',
    'null' : '',
    '/array' : '',
    '/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing1';
  var src = _.entity.make( srcMap );
  var got = _.path.filterDst_( src, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'nothing2'
  var src = _.entity.make( srcMap );
  var got = _.path.filterDst_( src, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === src );

  test.close( 'complex map' );

  /* callbacks */

  function double( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'src' )
    return _.strIs( it.src ) ? it.src + it.src : it.src;
    if( it.side === 'dst' )
    return _.strIs( it.dst ) ? it.dst + it.dst : it.dst;
    if( filePath )
    return filePath + filePath;
    return '';
  }

  function srcOnly1( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'dst' )
    return '';
    return filePath;
  }

  function srcOnly2( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'dst' )
    return '';
    return [ filePath ];
  }

  function dstOnly( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'src' )
    return '';
    return filePath;
  }

  function dstDouble( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'src' )
    return '';
    return filePath + filePath;
  }

  function nothing1( filePath )
  {
    if( filePath === null )
    _.assert( 0 );
    return [];
  }

  function nothing2( filePath )
  {
    if( filePath === null )
    _.assert( 0 );
    return '';
  }

  function nothing3( filePath )
  {
    if( filePath === null )
    _.assert( 0 );
    return null;
  }

}

//

function filterWithDst_( test )
{
  test.open( 'callback returns array' );

  test.case = 'null';
  var dst = [];
  var src = null;
  var got = _.path.filter_( dst, src, ( e, it ) => [ e ] );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty string';
  var dst = {};
  var src = '';
  var got = _.path.filter_( dst, src, ( e, it ) => [ e ] );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst )

  test.case = 'not empty strings';
  var dst = [ '/some' ];
  var src = '/dir';
  var got = _.path.filter_( dst, src, ( e, it ) => [ e ] );
  var expected = [ '/some', '/dir' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty array';
  var dst = {};
  var src = [];
  var got = _.path.filter_( dst, src, ( e, it ) => [ e ] );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'array has one element';
  var dst = {};
  var src = [ '/dir' ];
  var got = _.path.filter_( dst, src, ( e, it ) => [ e ] );
  var expected = { '/dir' : '' };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'array has a few elements';
  var dst = { 'some' : 'dir' };
  var src = [ '/dir', '/dir2', '/dir2', '/dir3' ]
  var got = _.path.filter_( dst, src, ( e, it ) => [ e ] );
  var expected = { 'some' : 'dir', '/dir' : '', '/dir2' : '', '/dir3' : '' };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty map';
  var dst = [];
  var src = {};
  var got = _.path.filter_( dst, src, ( e, it ) => [ e ] );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty dst in map';
  var dst = [ '/path' ];
  var src = { '/dir' : [] };
  var got = _.path.filter_( dst, src, ( e, it ) => [ e ] );
  var expected = [ '/path', '/dir' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'map, dst has one element';
  var dst = [ '/dir', '/a/b' ];
  var src = { '/dir' : [ '/a/b' ] };
  var got = _.path.filter_( dst, src, ( e, it ) => [ e ] );
  var expected = [ '/dir', '/a/b' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'map, map has a few elements';
  var dst = {};
  var src = { '/dir' : [ '/a/b', '/cd' ] };
  var got = _.path.filter_( dst, src, ( e, it ) => [ e ] );
  var expected = { '/dir' : [ '/a/b', '/cd' ] };
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'callback returns array' );

  /* main tests */

  test.open( 'double' );

  test.case = 'null';
  var dst = null;
  var src = null;
  var got = _.path.filter_( dst, src, double );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== dst );

  test.case = 'empty';
  var dst = [ '' ];
  var src = '';
  var got = _.path.filter_( dst, src, double );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'string';
  var dst = { 'a' : '/b' }
  var src = '/a/b';
  var got = _.path.filter_( dst, src, double );
  var expected = { 'a' : '/b', '/a/b/a/b' : '' };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty array';
  var dst = [ '/path' ];
  var src = [];
  var got = _.path.filter_( dst, src, double );
  var expected = [ '/path' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element array';
  var dst = [ '/a/b' ];
  var src = [ '/a/b' ];
  var got = _.path.filter_( dst, src, double );
  var expected = [ '/a/b', '/a/b/a/b' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'several elements array';
  var dst = [ '/a/b/a/b' ];
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filter_( dst, src, double );
  var expected = [ '/a/b/a/b', '/cd/cd' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'duplicates in array';
  var dst = { '/a/b/a/b' : '/a/b' };
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filter_( dst, src, double );
  var expected = { '/a/b/a/b' : '', '/c/d/c/d' : '' };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty map';
  var dst = [];
  var src = {};
  var got = _.path.filter_( dst, src, double );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with dst and src';
  var dst = null;
  var src = { '/src' : 'dst' };
  var got = _.path.filter_( dst, src, double );
  var expected = { '/src/src' : 'dstdst' };
  test.identical( got, expected );
  test.true( got !== dst );

  test.case = 'single element map with dst in single empty array and src';
  var dst = null;
  var src = { '/src' : [] };
  var got = _.path.filter_( dst, src, double );
  var expected = '/src/src';
  test.identical( got, expected );
  test.true( got !== dst );

  test.case = 'single element map with dst in single element array and src';
  var dst = [];
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filter_( dst, src, double );
  var expected = [ '/src/src', 'dstdst' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with dst in multiple element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filter_( dst, src, double );
  var expected = { '/src/src' : [ 'dst1dst1', 'dst2dst2' ] };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only dst';
  var dst = {};
  var src = { '' : 'dst' };
  var got = _.path.filter_( dst, src, double );
  var expected = { '' : 'dstdst' };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only dst in empty array';
  var dst = [];
  var src = { '' : [ '' ] };
  var got = _.path.filter_( dst, src, double );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only dst in single element array';
  var dst = [];
  var src = { '' : [ 'dst' ] };
  var got = _.path.filter_( dst, src, double );
  var expected = [ 'dstdst' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only dst in multiple element array';
  var dst = {};
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filter_( dst, src, double );
  var expected = { '' : [ 'dst1dst1', 'dst2dst2' ] };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only src';
  var dst = { '/src/src' : '/dst' };
  var src = { '/src' : '' };
  var got = _.path.filter_( dst, src, double );
  var expected = { '/src/src' : '' };
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'double' );

  /* - */

  test.open( 'srcOnly1' );

  test.case = 'null';
  var dst = [];
  var src = null;
  var got = _.path.filter_( dst, src, srcOnly1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty';
  var dst = {};
  var src = '';
  var got = _.path.filter_( dst, src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'string';
  var dst = [];
  var src = '/a/b';
  var got = _.path.filter_( dst, src, srcOnly1 );
  var expected = [ '/a/b' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty array';
  var dst = [ '/path' ];
  var src = [];
  var got = _.path.filter_( dst, src, srcOnly1 );
  var expected = [ '/path' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element array';
  var dst = null;
  var src = [ '/a/b' ];
  var got = _.path.filter_( dst, src, srcOnly1 );
  var expected = '/a/b';
  test.identical( got, expected );
  test.true( got !== dst );

  test.case = 'several elements array';
  var dst = [ '/a/b' ];
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filter_( dst, src, srcOnly1 );
  var expected = [ '/a/b', '/cd' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'duplicates in array';
  var dst = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filter_( dst, src, srcOnly1 );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty map';
  var dst = {};
  var src = {};
  var got = _.path.filter_( dst, src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with dst and src';
  var dst = { '/src' : 'dst' };
  var src = { '/src' : 'dst' };
  var got = _.path.filter_( dst, src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with dst in single empty array and src';
  var dst = { '/src' : 'dst' };
  var src = { '/src' : [] };
  var got = _.path.filter_( dst, src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with dst in single element array and src';
  var dst = { '/src' : 'dst' };
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filter_( dst, src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with dst in multiple element array and src';
  var dst = [];
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filter_( dst, src, srcOnly1 );
  var expected = [ '/src' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only dst';
  var dst = { '' : 'dst' };
  var src = { '' : 'dst' };
  var got = _.path.filter_( dst, src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only dst in empty array';
  var dst = { '/src' : 'dst' };
  var src = { '' : [ '' ] };
  var got = _.path.filter_( dst, src, srcOnly1 );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only dst in single element array';
  var dst = { '/src' : 'dst' };
  var src = { '' : [ 'dst' ] };
  var got = _.path.filter_( dst, src, srcOnly1 );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only dst in multiple element array';
  var dst = { '' : [ 'dst1', 'dst2' ] };
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filter_( dst, src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only src';
  var dst = { '/src' : 'dst' };
  var src = { '/src' : '' };
  var got = _.path.filter_( dst, src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'srcOnly1' );

  /* - */

  test.open( 'srcOnly2' );

  test.case = 'null';
  var dst = {};
  var src = null;
  var got = _.path.filter_( dst, src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty';
  var dst = null;
  var src = '';
  var got = _.path.filter_( dst, src, srcOnly2 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== dst );

  test.case = 'string';
  var dst = [];
  var src = '/a/b';
  var got = _.path.filter_( dst, src, srcOnly2 );
  var expected = [ '/a/b' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty array';
  var dst = [ '/path' ];
  var src = [];
  var got = _.path.filter_( dst, src, srcOnly2 );
  var expected = [ '/path' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element array';
  var dst = {};
  var src = [ '/a/b' ];
  var got = _.path.filter_( dst, src, srcOnly2 );
  var expected = { '/a/b' : '' };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'several elements array';
  var dst = [];
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filter_( dst, src, srcOnly2 );
  var expected = [ '/a/b', '/cd' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'duplicates in array';
  var dst = [ '/a/b', '/c/d' ];
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filter_( dst, src, srcOnly2 );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty map';
  var dst = [];
  var src = {};
  var got = _.path.filter_( dst, src, srcOnly2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with dst and src';
  var dst = [];
  var src = { '/src' : 'dst' };
  var got = _.path.filter_( dst, src, srcOnly2 );
  var expected = [ '/src' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with dst in single empty array and src';
  var dst = {};
  var src = { '/src' : [] };
  var got = _.path.filter_( dst, src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with dst in single element array and src';
  var dst = { '/src' : [ 'dst' ] };
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filter_( dst, src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with dst in multiple element array and src';
  var dst = { '/src' : [ 'dst' ] };
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filter_( dst, src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only dst';
  var dst = [];
  var src = { '' : 'dst' };
  var got = _.path.filter_( dst, src, srcOnly2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only dst in empty array';
  var dst = { '/src' : [ 'dst' ] };
  var src = { '' : [ '' ] };
  var got = _.path.filter_( dst, src, srcOnly2 );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only dst in single element array';
  var dst = { '/src' : [ 'dst' ] }
  var src = { '' : [ 'dst' ] };
  var got = _.path.filter_( dst, src, srcOnly2 );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only dst in multiple element array';
  var dst = [];
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filter_( dst, src, srcOnly2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only src';
  var dst = [ '/path' ];
  var src = { '/src' : '' };
  var got = _.path.filter_( dst, src, srcOnly2 );
  var expected = [ '/path', '/src' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'srcOnly2' );

  /* - */

  test.open( 'nothing1' );

  test.case = 'null';
  var dst = [];
  var src = null;
  var got = _.path.filter_( dst, src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty';
  var dst = {};
  var src = '';
  var got = _.path.filter_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'string';
  var dst = null;
  var src = '/a/b';
  var got = _.path.filter_( dst, src, nothing1 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty array';
  var dst = {};
  var src = [];
  var got = _.path.filter_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element array';
  var dst = [ '/c/d' ];
  var src = [ '/a/b' ];
  var got = _.path.filter_( dst, src, nothing1 );
  var expected = [ '/c/d' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'several elements array';
  var dst = [];
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filter_( dst, src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'duplicates in array';
  var dst = [];
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filter_( dst, src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty map';
  var dst = {};
  var src = {};
  var got = _.path.filter_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with dst and src';
  var dst = { 'a' : 'b' };
  var src = { '/src' : 'dst' };
  var got = _.path.filter_( dst, src, nothing1 );
  var expected = { 'a' : 'b' };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with dst in single empty array and src';
  var dst = {};
  var src = { '/src' : [] };
  var got = _.path.filter_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with dst in single element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filter_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with dst in multiple element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filter_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only dst';
  var dst = {};
  var src = { '' : 'dst' };
  var got = _.path.filter_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only dst in empty array';
  var dst = {};
  var src = { '' : [ '' ] };
  var got = _.path.filter_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only dst in single element array';
  var dst = {};
  var src = { '' : [ 'dst' ] };
  var got = _.path.filter_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only dst in multiple element array';
  var dst = {};
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filter_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only src';
  var dst = {};
  var src = { '/src' : '' };
  var got = _.path.filter_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'nothing1' );

  /* - */

  test.open( 'nothing2' );

  test.case = 'null';
  var dst = {};
  var src = null;
  var got = _.path.filter_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty';
  var dst = [];
  var src = '';
  var got = _.path.filter_( dst, src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'string';
  var dst = [];
  var src = '/a/b';
  var got = _.path.filter_( dst, src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty array';
  var dst = [];
  var src = [];
  var got = _.path.filter_( dst, src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element array';
  var dst = [];
  var src = [ '/a/b' ];
  var got = _.path.filter_( dst, src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'several elements array';
  var dst = [];
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filter_( dst, src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'duplicates in array';
  var dst = [ '/path' ];
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filter_( dst, src, nothing2 );
  var expected = [ '/path' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty map';
  var dst = [ '/path' ];
  var src = {};
  var got = _.path.filter_( dst, src, nothing2 );
  var expected = [ '/path' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with dst and src';
  var dst = {};
  var src = { '/src' : 'dst' };
  var got = _.path.filter_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with dst in single empty array and src';
  var dst = {};
  var src = { '/src' : [] };
  var got = _.path.filter_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with dst in single element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filter_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with dst in multiple element array and src';
  var dst = { 'a' : 'b' };
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filter_( dst, src, nothing2 );
  var expected = { 'a' : 'b' };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only dst';
  var dst = {};
  var src = { '' : 'dst' };
  var got = _.path.filter_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only dst in empty array';
  var dst = {};
  var src = { '' : [ '' ] };
  var got = _.path.filter_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only dst in single element array';
  var dst = {};
  var src = { '' : [ 'dst' ] };
  var got = _.path.filter_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only dst in multiple element array';
  var dst = {};
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filter_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only src';
  var dst = {};
  var src = { '/src' : '' };
  var got = _.path.filter_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'nothing2' );

  /* - */

  test.open( 'nothing3' );

  test.case = 'null';
  var dst = null;
  var src = null;
  var got = _.path.filter_( dst, src, nothing3 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== dst );

  test.case = 'empty';
  var dst = {};
  var src = '';
  var got = _.path.filter_( dst, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'string';
  var dst = {};
  var src = '/a/b';
  var got = _.path.filter_( dst, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty array';
  var dst = [];
  var src = [];
  var got = _.path.filter_( dst, src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element array';
  var dst = [ '/path' ];
  var src = [ '/a/b' ];
  var got = _.path.filter_( dst, src, nothing3 );
  var expected = [ '/path' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'several elements array';
  var dst = [];
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filter_( dst, src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'duplicates in array';
  var dst = [];
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filter_( dst, src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty map';
  var dst = {};
  var src = {};
  var got = _.path.filter_( dst, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'nothing3' );

  /* - */

  test.open( 'complex map' );

  var srcMap =
  {
    '/true' : true,
    '/false' : false,
    '/null' : null,
    '/string1' : '/dir1',
    '/string2' : '',
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '' : [ '' ],
    '/emptyArray' : [],
  };

  test.case = 'double';
  var src = _.entity.make( srcMap );
  var got = _.path.filter_( dst, src, double );
  var expected =
  {
    '/true/true' : true,
    '/false/false' : false,
    '/null/null' : '',
    '/string1/string1' : '/dir1/dir1',
    '/string2/string2' : '',
    'nullnull' : '/dir3/dir3',
    '/array/array' : [ '/dir1/dir1', '/dir2/dir2' ],
    '/emptyArray/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'srcOnly1';
  var dst = {};
  var src = _.entity.make( srcMap );
  var got = _.path.filter_( dst, src, srcOnly1 );
  var expected =
  {
    '/true' : '',
    '/false' : '',
    '/null' : '',
    '/string2' : '',
    '/emptyArray' : '',
    '/string1' : '',
    'null' : '',
    '/array' : ''
  };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'srcOnly2';
  var dst = {};
  var src = _.entity.make( srcMap );
  var got = _.path.filter_( dst, src, srcOnly2 );
  var expected =
  {
    '/true' : '',
    '/false' : '',
    '/null' : '',
    '/string1' : '',
    '/string2' : '',
    'null' : '',
    '/array' : '',
    '/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'nothing1';
  var dst = [];
  var src = _.entity.make( srcMap );
  var got = _.path.filter_( dst, src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'nothing2'
  var dst = {};
  var src = _.entity.make( srcMap );
  var got = _.path.filter_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'complex map' );

  /* callbacks */

  function double( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'src' )
    return _.strIs( it.src ) ? it.src + it.src : it.src;
    if( it.side === 'dst' )
    return _.strIs( it.dst ) ? it.dst + it.dst : it.dst;
    if( filePath )
    return filePath + filePath;
    return '';
  }

  function srcOnly1( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'dst' )
    return '';
    return filePath;
  }

  function srcOnly2( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'dst' )
    return '';
    return [ filePath ];
  }

  function dstOnly( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'src' )
    return '';
    return filePath;
  }

  function dstDouble( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'src' )
    return '';
    return filePath + filePath;
  }

  function nothing1( filePath )
  {
    if( filePath === null )
    _.assert( 0 );
    return [];
  }

  function nothing2( filePath )
  {
    if( filePath === null )
    _.assert( 0 );
    return '';
  }

  function nothing3( filePath )
  {
    if( filePath === null )
    _.assert( 0 );
    return null;
  }

}

//

function filterDstWithDst_( test )
{
  test.open( 'callback returns array' );

  test.case = 'null';
  var dst = [];
  var src = null;
  var got = _.path.filterDst_( dst, src, ( e, it ) => [ e ] );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty string';
  var dst = {};
  var src = '';
  var got = _.path.filterDst_( dst, src, ( e, it ) => [ e ] );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst )

  test.case = 'not empty strings';
  var dst = [ '/some' ];
  var src = '/dir';
  var got = _.path.filterDst_( dst, src, ( e, it ) => [ e ] );
  var expected = [ '/some', '/dir' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty array';
  var dst = {};
  var src = [];
  var got = _.path.filterDst_( dst, src, ( e, it ) => [ e ] );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'array has one element';
  var dst = {};
  var src = [ '/dir' ];
  var got = _.path.filterDst_( dst, src, ( e, it ) => [ e ] );
  var expected = { '/dir' : '' };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'array has a few elements';
  var dst = { 'some' : 'dir' };
  var src = [ '/dir', '/dir2', '/dir2', '/dir3' ]
  var got = _.path.filterDst_( dst, src, ( e, it ) => [ e ] );
  var expected = { 'some' : 'dir', '/dir' : '', '/dir2' : '', '/dir3' : '' };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty map';
  var dst = [];
  var src = {};
  var got = _.path.filterDst_( dst, src, ( e, it ) => [ e ] );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty dst in map';
  var dst = [ '/path' ];
  var src = { '/dir' : [] };
  var got = _.path.filterDst_( dst, src, ( e, it ) => [ e ] );
  var expected = [ '/path', '/dir' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'map, dst has one element';
  var dst = [ '/dir', '/a/b' ];
  var src = { '/dir' : [ '/a/b' ] };
  var got = _.path.filterDst_( dst, src, ( e, it ) => [ e ] );
  var expected = [ '/dir', '/a/b' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'map, map has a few elements';
  var dst = {};
  var src = { '/dir' : [ '/a/b', '/cd' ] };
  var got = _.path.filterDst_( dst, src, ( e, it ) => [ e ] );
  var expected = { '/dir' : [ '/a/b', '/cd' ] };
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'callback returns array' );

  /* main tests */

  test.open( 'double' );

  test.case = 'null';
  var dst = null;
  var src = null;
  var got = _.path.filterDst_( dst, src, double );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== dst );

  test.case = 'empty';
  var dst = [ '' ];
  var src = '';
  var got = _.path.filterDst_( dst, src, double );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'string';
  var dst = { 'a' : '/b' }
  var src = '/a/b';
  var got = _.path.filterDst_( dst, src, double );
  var expected = { 'a' : '/b', '/a/b/a/b' : '' };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty array';
  var dst = [ '/path' ];
  var src = [];
  var got = _.path.filterDst_( dst, src, double );
  var expected = [ '/path' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element array';
  var dst = [ '/a/b' ];
  var src = [ '/a/b' ];
  var got = _.path.filterDst_( dst, src, double );
  var expected = [ '/a/b', '/a/b/a/b' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'several elements array';
  var dst = [ '/a/b/a/b' ];
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDst_( dst, src, double );
  var expected = [ '/a/b/a/b', '/cd/cd' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'duplicates in array';
  var dst = { '/a/b/a/b' : '/a/b' };
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDst_( dst, src, double );
  var expected = { '/a/b/a/b' : '', '/c/d/c/d' : '' };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty map';
  var dst = [];
  var src = {};
  var got = _.path.filterDst_( dst, src, double );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with dst and src';
  var dst = null;
  var src = { '/src' : 'dst' };
  var got = _.path.filterDst_( dst, src, double );
  var expected = { '/src/src' : 'dstdst' };
  test.identical( got, expected );
  test.true( got !== dst );

  test.case = 'single element map with dst in single empty array and src';
  var dst = null;
  var src = { '/src' : [] };
  var got = _.path.filterDst_( dst, src, double );
  var expected = '/src/src';
  test.identical( got, expected );
  test.true( got !== dst );

  test.case = 'single element map with dst in single element array and src';
  var dst = [];
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDst_( dst, src, double );
  var expected = [ '/src/src', 'dstdst' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with dst in multiple element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDst_( dst, src, double );
  var expected = { '/src/src' : [ 'dst1dst1', 'dst2dst2' ] };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only dst';
  var dst = {};
  var src = { '' : 'dst' };
  var got = _.path.filterDst_( dst, src, double );
  var expected = { '' : 'dstdst' };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only dst in empty array';
  var dst = [];
  var src = { '' : [ '' ] };
  var got = _.path.filterDst_( dst, src, double );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only dst in single element array';
  var dst = [];
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDst_( dst, src, double );
  var expected = [ 'dstdst' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only dst in multiple element array';
  var dst = {};
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDst_( dst, src, double );
  var expected = { '' : [ 'dst1dst1', 'dst2dst2' ] };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only src';
  var dst = { '/src/src' : '/dst' };
  var src = { '/src' : '' };
  var got = _.path.filterDst_( dst, src, double );
  var expected = { '/src/src' : '' };
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'double' );

  /* - */

  test.open( 'srcOnly1' );

  test.case = 'null';
  var dst = [];
  var src = null;
  var got = _.path.filterDst_( dst, src, srcOnly1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty';
  var dst = {};
  var src = '';
  var got = _.path.filterDst_( dst, src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'string';
  var dst = [];
  var src = '/a/b';
  var got = _.path.filterDst_( dst, src, srcOnly1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty array';
  var dst = [ '/path' ];
  var src = [];
  var got = _.path.filterDst_( dst, src, srcOnly1 );
  var expected = [ '/path' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element array';
  var dst = null;
  var src = [ '/a/b' ];
  var got = _.path.filterDst_( dst, src, srcOnly1 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== dst );

  test.case = 'several elements array';
  var dst = [ '/a/b' ];
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDst_( dst, src, srcOnly1 );
  var expected = [ '/a/b' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'duplicates in array';
  var dst = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDst_( dst, src, srcOnly1 );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty map';
  var dst = {};
  var src = {};
  var got = _.path.filterDst_( dst, src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with dst and src';
  var dst = { '/src' : 'dst' };
  var src = { '/src' : 'dst' };
  var got = _.path.filterDst_( dst, src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with dst in single empty array and src';
  var dst = { '/src' : 'dst' };
  var src = { '/src' : [] };
  var got = _.path.filterDst_( dst, src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with dst in single element array and src';
  var dst = { '/src' : 'dst' };
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDst_( dst, src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with dst in multiple element array and src';
  var dst = [];
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDst_( dst, src, srcOnly1 );
  var expected = [ '/src' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only dst';
  var dst = { '' : 'dst' };
  var src = { '' : 'dst' };
  var got = _.path.filterDst_( dst, src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only dst in empty array';
  var dst = { '/src' : 'dst' };
  var src = { '' : [ '' ] };
  var got = _.path.filterDst_( dst, src, srcOnly1 );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only dst in single element array';
  var dst = { '/src' : 'dst' };
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDst_( dst, src, srcOnly1 );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only dst in multiple element array';
  var dst = { '' : [ 'dst1', 'dst2' ] };
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDst_( dst, src, srcOnly1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only src';
  var dst = { '/src' : 'dst' };
  var src = { '/src' : '' };
  var got = _.path.filterDst_( dst, src, srcOnly1 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'srcOnly1' );

  /* - */

  test.open( 'srcOnly2' );

  test.case = 'null';
  var dst = {};
  var src = null;
  var got = _.path.filterDst_( dst, src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty';
  var dst = null;
  var src = '';
  var got = _.path.filterDst_( dst, src, srcOnly2 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== dst );

  test.case = 'string';
  var dst = [];
  var src = '/a/b';
  var got = _.path.filterDst_( dst, src, srcOnly2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty array';
  var dst = [ '/path' ];
  var src = [];
  var got = _.path.filterDst_( dst, src, srcOnly2 );
  var expected = [ '/path' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element array';
  var dst = {};
  var src = [ '/a/b' ];
  var got = _.path.filterDst_( dst, src, srcOnly2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'several elements array';
  var dst = [];
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDst_( dst, src, srcOnly2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'duplicates in array';
  var dst = [ '/a/b', '/c/d' ];
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDst_( dst, src, srcOnly2 );
  var expected = [ '/a/b', '/c/d' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty map';
  var dst = [];
  var src = {};
  var got = _.path.filterDst_( dst, src, srcOnly2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with dst and src';
  var dst = [];
  var src = { '/src' : 'dst' };
  var got = _.path.filterDst_( dst, src, srcOnly2 );
  var expected = [ '/src' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with dst in single empty array and src';
  var dst = {};
  var src = { '/src' : [] };
  var got = _.path.filterDst_( dst, src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with dst in single element array and src';
  var dst = { '/src' : [ 'dst' ] };
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDst_( dst, src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with dst in multiple element array and src';
  var dst = { '/src' : [ 'dst' ] };
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDst_( dst, src, srcOnly2 );
  var expected = { '/src' : '' };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only dst';
  var dst = [];
  var src = { '' : 'dst' };
  var got = _.path.filterDst_( dst, src, srcOnly2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only dst in empty array';
  var dst = { '/src' : [ 'dst' ] };
  var src = { '' : [ '' ] };
  var got = _.path.filterDst_( dst, src, srcOnly2 );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only dst in single element array';
  var dst = { '/src' : [ 'dst' ] }
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDst_( dst, src, srcOnly2 );
  var expected = { '/src' : 'dst' };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only dst in multiple element array';
  var dst = [];
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDst_( dst, src, srcOnly2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only src';
  var dst = [ '/path' ];
  var src = { '/src' : '' };
  var got = _.path.filterDst_( dst, src, srcOnly2 );
  var expected = [ '/path', '/src' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'srcOnly2' );

  /* - */

  test.open( 'nothing1' );

  test.case = 'null';
  var dst = [];
  var src = null;
  var got = _.path.filterDst_( dst, src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty';
  var dst = {};
  var src = '';
  var got = _.path.filterDst_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'string';
  var dst = null;
  var src = '/a/b';
  var got = _.path.filterDst_( dst, src, nothing1 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'empty array';
  var dst = {};
  var src = [];
  var got = _.path.filterDst_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element array';
  var dst = [ '/c/d' ];
  var src = [ '/a/b' ];
  var got = _.path.filterDst_( dst, src, nothing1 );
  var expected = [ '/c/d' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'several elements array';
  var dst = [];
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDst_( dst, src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'duplicates in array';
  var dst = [];
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDst_( dst, src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty map';
  var dst = {};
  var src = {};
  var got = _.path.filterDst_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with dst and src';
  var dst = { 'a' : 'b' };
  var src = { '/src' : 'dst' };
  var got = _.path.filterDst_( dst, src, nothing1 );
  var expected = { 'a' : 'b' };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with dst in single empty array and src';
  var dst = {};
  var src = { '/src' : [] };
  var got = _.path.filterDst_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with dst in single element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDst_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with dst in multiple element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDst_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only dst';
  var dst = {};
  var src = { '' : 'dst' };
  var got = _.path.filterDst_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only dst in empty array';
  var dst = {};
  var src = { '' : [ '' ] };
  var got = _.path.filterDst_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only dst in single element array';
  var dst = {};
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDst_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only dst in multiple element array';
  var dst = {};
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDst_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only src';
  var dst = {};
  var src = { '/src' : '' };
  var got = _.path.filterDst_( dst, src, nothing1 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'nothing1' );

  /* - */

  test.open( 'nothing2' );

  test.case = 'null';
  var dst = {};
  var src = null;
  var got = _.path.filterDst_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty';
  var dst = [];
  var src = '';
  var got = _.path.filterDst_( dst, src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'string';
  var dst = [];
  var src = '/a/b';
  var got = _.path.filterDst_( dst, src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty array';
  var dst = [];
  var src = [];
  var got = _.path.filterDst_( dst, src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element array';
  var dst = [];
  var src = [ '/a/b' ];
  var got = _.path.filterDst_( dst, src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'several elements array';
  var dst = [];
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDst_( dst, src, nothing2 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'duplicates in array';
  var dst = [ '/path' ];
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDst_( dst, src, nothing2 );
  var expected = [ '/path' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty map';
  var dst = [ '/path' ];
  var src = {};
  var got = _.path.filterDst_( dst, src, nothing2 );
  var expected = [ '/path' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with dst and src';
  var dst = {};
  var src = { '/src' : 'dst' };
  var got = _.path.filterDst_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with dst in single empty array and src';
  var dst = {};
  var src = { '/src' : [] };
  var got = _.path.filterDst_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with dst in single element array and src';
  var dst = {};
  var src = { '/src' : [ 'dst' ] };
  var got = _.path.filterDst_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with dst in multiple element array and src';
  var dst = { 'a' : 'b' };
  var src = { '/src' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDst_( dst, src, nothing2 );
  var expected = { 'a' : 'b' };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only dst';
  var dst = {};
  var src = { '' : 'dst' };
  var got = _.path.filterDst_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only dst in empty array';
  var dst = {};
  var src = { '' : [ '' ] };
  var got = _.path.filterDst_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only dst in single element array';
  var dst = {};
  var src = { '' : [ 'dst' ] };
  var got = _.path.filterDst_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only dst in multiple element array';
  var dst = {};
  var src = { '' : [ 'dst1', 'dst2' ] };
  var got = _.path.filterDst_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element map with only src';
  var dst = {};
  var src = { '/src' : '' };
  var got = _.path.filterDst_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'nothing2' );

  /* - */

  test.open( 'nothing3' );

  test.case = 'null';
  var dst = null;
  var src = null;
  var got = _.path.filterDst_( dst, src, nothing3 );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== dst );

  test.case = 'empty';
  var dst = {};
  var src = '';
  var got = _.path.filterDst_( dst, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'string';
  var dst = {};
  var src = '/a/b';
  var got = _.path.filterDst_( dst, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty array';
  var dst = [];
  var src = [];
  var got = _.path.filterDst_( dst, src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'single element array';
  var dst = [ '/path' ];
  var src = [ '/a/b' ];
  var got = _.path.filterDst_( dst, src, nothing3 );
  var expected = [ '/path' ];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'several elements array';
  var dst = [];
  var src = [ '/a/b', '/cd' ];
  var got = _.path.filterDst_( dst, src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'duplicates in array';
  var dst = [];
  var src = [ '/a/b', '/a/b', '/c/d', '/c/d' ];
  var got = _.path.filterDst_( dst, src, nothing3 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'empty map';
  var dst = {};
  var src = {};
  var got = _.path.filterDst_( dst, src, nothing3 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'nothing3' );

  /* - */

  test.open( 'complex map' );

  var srcMap =
  {
    '/true' : true,
    '/false' : false,
    '/null' : null,
    '/string1' : '/dir1',
    '/string2' : '',
    'null' : '/dir3',
    '/array' : [ '/dir1', '/dir2' ],
    '' : [ '' ],
    '/emptyArray' : [],
  };

  test.case = 'double';
  var src = _.entity.make( srcMap );
  var got = _.path.filterDst_( dst, src, double );
  var expected =
  {
    '/true/true' : true,
    '/false/false' : false,
    '/null/null' : '',
    '/string1/string1' : '/dir1/dir1',
    '/string2/string2' : '',
    'nullnull' : '/dir3/dir3',
    '/array/array' : [ '/dir1/dir1', '/dir2/dir2' ],
    '/emptyArray/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'srcOnly1';
  var dst = {};
  var src = _.entity.make( srcMap );
  var got = _.path.filterDst_( dst, src, srcOnly1 );
  var expected =
  {
    '/true' : '',
    '/false' : '',
    '/null' : '',
    '/string2' : '',
    '/emptyArray' : '',
    '/string1' : '',
    'null' : '',
    '/array' : ''
  };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'srcOnly2';
  var dst = {};
  var src = _.entity.make( srcMap );
  var got = _.path.filterDst_( dst, src, srcOnly2 );
  var expected =
  {
    '/true' : '',
    '/false' : '',
    '/null' : '',
    '/string1' : '',
    '/string2' : '',
    'null' : '',
    '/array' : '',
    '/emptyArray' : ''
  };
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'nothing1';
  var dst = [];
  var src = _.entity.make( srcMap );
  var got = _.path.filterDst_( dst, src, nothing1 );
  var expected = [];
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'nothing2'
  var dst = {};
  var src = _.entity.make( srcMap );
  var got = _.path.filterDst_( dst, src, nothing2 );
  var expected = {};
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'complex map' );

  /* callbacks */

  function double( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'src' )
    return _.strIs( it.src ) ? it.src + it.src : it.src;
    if( it.side === 'dst' )
    return _.strIs( it.dst ) ? it.dst + it.dst : it.dst;
    if( filePath )
    return filePath + filePath;
    return '';
  }

  function srcOnly1( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'dst' )
    return '';
    return filePath;
  }

  function srcOnly2( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'dst' )
    return '';
    return [ filePath ];
  }

  function dstOnly( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'src' )
    return '';
    return filePath;
  }

  function dstDouble( filePath, it )
  {
    if( filePath === null )
    _.assert( 0 );

    if( it.side === 'src' )
    return '';
    return filePath + filePath;
  }

  function nothing1( filePath )
  {
    if( filePath === null )
    _.assert( 0 );
    return [];
  }

  function nothing2( filePath )
  {
    if( filePath === null )
    _.assert( 0 );
    return '';
  }

  function nothing3( filePath )
  {
    if( filePath === null )
    _.assert( 0 );
    return null;
  }

}

//

function isEmpty( test )
{
  test.case = 'null';
  var src = null;
  var got = _.path.isEmpty( src );
  test.identical( got, true );

  test.case = 'empty string';
  var src = '';
  var got = _.path.isEmpty( src );
  test.identical( got, true );

  test.case = 'string';
  var src = '/src';
  var got = _.path.isEmpty( src );
  test.identical( got, false );

  // test.case = 'dot';
  // var src = '.';
  // var got = _.path.isEmpty( src );
  // test.identical( got, false );

  test.case = 'empty array';
  var src = [];
  var got = _.path.isEmpty( src );
  test.identical( got, true );

  test.case = 'array.length === 1, null';
  var src = [ null ];
  var got = _.path.isEmpty( src );
  test.identical( got, true );

  test.case = 'array.length === 1, empty string';
  var src = [ '' ];
  var got = _.path.isEmpty( src );
  test.identical( got, true );

  // test.case = 'array.length === 1, dot';
  // var src = [ '.' ];
  // var got = _.path.isEmpty( src );
  // test.identical( got, false );

  test.case = 'array.length === 1, string';
  var src = [ '/src' ];
  var got = _.path.isEmpty( src );
  test.identical( got, false );

  test.case = 'empty map';
  var src = {};
  var got = _.path.isEmpty( src );
  test.identical( got, true );

  test.case = 'map, key - empty string, null';
  var src = { '' : null };
  var got = _.path.isEmpty( src );
  test.identical( got, true );

  test.case = 'map, key - empty string, empty string';
  var src = { '' : '' };
  var got = _.path.isEmpty( src );
  test.identical( got, true );

  // test.case = 'map, key - dot, null';
  // var src = { '.' : null };
  // var got = _.path.isEmpty( src );
  // test.identical( got, false );
  //
  // test.case = 'map, key - dot, empty string';
  // var src = { '.' : '' };
  // var got = _.path.isEmpty( src );
  // test.identical( got, false );

  test.case = 'map, key - string';
  var src = { '/src' : '' };
  var got = _.path.isEmpty( src );
  test.identical( got, false );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'without arguments';
  test.shouldThrowErrorSync( () => _.path.isEmpty() );

  test.case = 'extra arguments';
  test.shouldThrowErrorSync( () => _.path.isEmpty( '/dir', 'extra' ) );

  test.case = 'wrong type of src';
  test.shouldThrowErrorSync( () => _.path.isEmpty( new Set() ) );
  test.shouldThrowErrorSync( () => _.path.isEmpty( _.argumentsArray.make( [] ) ) );
  function Constr (){ this.a = ''; return this };
  test.shouldThrowErrorSync( () => _.path.isEmpty( new Constr() ) );
}

//

/*
qqq : sync test cases
qqq : add single-argument test cases
Dmytro : syncronized and added single-argument test cases
*/

function mapExtend( test )
{
  let path = _.path;
  function constr( src )
  {
    this.value = src;
    return this;
  }
  let obj0 = new constr( 0 );
  let obj1 = new constr( 1 );
  let obj2 = new constr( 2 );

  /* extra */

  /* qqq : important case! */
  test.case = 'no override of empty string by boolean';
  var expected = { '.' : '', '**/.git/**' : false };
  var dstMap = { '.' : '' };
  var srcMap = '**/.git/**';
  var dstPath = false;
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dst is map, src is null, dstPath is str';
  var expected = { '/src' : '/dst' };
  var dstMap = { '/src' : '/dst' };
  var srcMap = null;
  var dstPath = '/dst2';
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dst is map with empty str in src, src is map with empty str in src, dstPath is str';
  var expected = { '/src' : '/dst', '' : '/dst3' };
  var dstMap = { '/src' : '/dst' };
  var srcMap = { '' : '/dst3' };
  var dstPath = '/dst2';
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  /* - */

  test.open( 'single argument' );

  test.case = 'null';
  var expected = {};
  var dstMap = null;
  var got = path.mapExtend( dstMap );
  test.identical( got, expected );

  test.case = 'empty string';
  var expected = {};
  var dstMap = '';
  var got = path.mapExtend( dstMap );
  test.identical( got, expected );

  test.case = 'string';
  var expected = { '/src' : '' };
  var dstMap = '/src';
  var got = path.mapExtend( dstMap );
  test.identical( got, expected );

  test.case = 'array';
  var expected = { 'null' : '', 'false' : '', 'true' : '', 'str' : '' };
  var dstMap = [ null, '', false, true, 'str' ];
  var got = path.mapExtend( dstMap );
  test.identical( got, expected );

  test.case = 'map';
  var expected = { '/src' : '', '/false' : false, '/true' : true, '/string' : 'str' };
  var dstMap = { '/src' : null, '' : '', '/false' : false, '/true' : true, '/string' : 'str' };
  var got = path.mapExtend( dstMap );
  test.identical( got, expected );

  test.close( 'single argument' );

  /* - */

  test.case = 'dstMap=null, srcMap=null, dstPath=undefined';
  var expected = {};
  var dstMap = null;
  var srcMap = null;
  var dstPath = undefined;
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=empty, srcMap=null, dstPath=undefined';
  var expected = {};
  var dstMap = '';
  var srcMap = null;
  var dstPath = undefined;
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=null, srcMap=empty, dstPath=undefined';
  var expected = {};
  var dstMap = null;
  var srcMap = '';
  var dstPath = undefined;
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=empty, srcMap=empty, dstPath=undefined';
  var expected = {};
  var dstMap = '';
  var srcMap = '';
  var dstPath = undefined;
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=null, srcMap=null, dstPath=null';
  var expected = {};
  var dstMap = null;
  var srcMap = null;
  var dstPath = null;
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=empty, srcMap=null, dstPath=null';
  var expected = {};
  var dstMap = '';
  var srcMap = null;
  var dstPath = null;
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=null, srcMap=empty, dstPath=null';
  var expected = {};
  var dstMap = null;
  var srcMap = '';
  var dstPath = null;
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=empty, srcMap=empty, dstPath=null';
  var expected = {};
  var dstMap = '';
  var srcMap = '';
  var dstPath = null;
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=null, srcMap=null, dstPath=empty';
  var expected = {};
  var dstMap = null;
  var srcMap = null;
  var dstPath = '';
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=empty, srcMap=null, dstPath=empty';
  var expected = {};
  var dstMap = '';
  var srcMap = null;
  var dstPath = '';
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=null, srcMap=empty, dstPath=empty';
  var expected = {};
  var dstMap = null;
  var srcMap = '';
  var dstPath = '';
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=empty, srcMap=empty, dstPath=empty';
  var expected = {};
  var dstMap = '';
  var srcMap = '';
  var dstPath = '';
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  /* */

  test.case = 'dstMap=map with only src dot, srcMap=map with bools, dstPath=undefined';
  var expected = { '.' : '', 'a' : true, 'b' : false };
  var dstMap = { '.' : '' };
  var srcMap = { 'a' : true, 'b' : false };
  var dstPath = undefined;
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with only dst dot, srcMap=map with bools, dstPath=undefined';
  var expected = { '' : '.', 'a' : true, 'b' : false };
  var dstMap = { '' : '.' };
  var srcMap = { 'a' : true, 'b' : false };
  var dstPath = undefined;
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with only src and dst dot, srcMap=map with bools, dstPath=undefined';
  var expected = { '.' : '.', 'a' : true, 'b' : false };
  var dstMap = { '.' : '.' };
  var srcMap = { 'a' : true, 'b' : false };
  var dstPath = undefined;
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=is dot, srcMap=map with bools, dstPath=undefined';
  var expected = { '.' : '', 'a' : true, 'b' : false };
  var dstMap = '.';
  var srcMap = { 'a' : true, 'b' : false };
  var dstPath = undefined;
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=is empty, srcMap=map with bools, dstPath=undefined';
  var expected = { 'a' : true, 'b' : false };
  var dstMap = '';
  var srcMap = { 'a' : true, 'b' : false };
  var dstPath = undefined;
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  /* */

  test.case = 'dstMap=str, srcMap=str, dstPath=undefined';
  var expected = { '/dir/**' : '', '/dir/doubledir/d1/**' : '', '/dir/**/**b**' : false, '/dir/doubledir/d1/**/**b**' : false };
  var dstMap = { '/dir/**' : true, '/dir/doubledir/d1/**' : true, '/dir/**/**b**' : false, '/dir/doubledir/d1/**/**b**' : false };
  var srcMap = [ '/dir/**', '/dir/doubledir/d1/**' ];
  var dstPath = '';
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=str, srcMap=str, dstPath=undefined';
  var expected = { '/' : '/dst' }
  var dstMap = null;
  var srcMap = { '/' : '' };
  var dstPath = '/dst';
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=str, srcMap=str, dstPath=undefined';
  var expected = { 'a' : '', 'b' : '' }
  var dstMap = 'a';
  var srcMap = 'b';
  var got = path.mapExtend( dstMap, srcMap );
  test.identical( got, expected );

  test.case = 'dstMap=str, srcMap=str, dstPath=null';
  var expected = { 'a' : '', 'b' : '' }
  var dstMap = 'a';
  var srcMap = 'b';
  var got = path.mapExtend( dstMap, srcMap, null );
  test.identical( got, expected );

  test.case = 'dstMap=str, srcMap=str, dstPath=str';
  var expected = { 'a' : 'c', 'b' : 'c' }
  var dstMap = 'a';
  var srcMap = 'b';
  var got = path.mapExtend( dstMap, srcMap, 'c' );
  test.identical( got, expected );

  test.case = 'dstMap=null, srcMap=null, dstPath=str';
  var expected = {}
  var dstMap = null;
  var srcMap = null;
  var dstPath = '/dst';
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=null, srcMap=null in arr, dstPath=str';
  var expected = {}
  var dstMap = null;
  var srcMap = [ null ];
  var dstPath = '/dst';
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=null, srcMap=map, dstPath=null';
  var expected = { '/src' : '/dst' }
  var dstMap = null;
  var srcMap = { '/src' : '/dst' };
  var dstPath = null;
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=map, srcMap=str, dstPath=null';
  var expected = { '/src' : '' }
  var dstMap = { '/src' : '/dst' };
  var srcMap = '/src';
  var dstPath = null;
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  /* - */

  test.case = 'dstMap=map with dot in src, srcMap=map, dstPath=null';
  var expected = { '.' : '', 'x' : '', 'y' : '', '/a/b1' : '', '/a/b2' : '' };
  var dstMap = { '.' : null, 'x' : null, 'y' : '' };
  var srcMap = { '/a/b1' : null, '/a/b2' : null };
  var dstPath = null;
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with dot in src, srcMap=map, dstPath=null';
  var expected = { '.' : '', '/a/b1' : '', '/a/b2' : '' };
  var dstMap = { '.' : null };
  var srcMap = { '/a/b1' : null, '/a/b2' : null };
  var dstPath = null;
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty in src, srcMap=map, dstPath=null';
  var expected = { '/a/b1' : '', '/a/b2' : '' };
  var dstMap = { '' : null };
  var srcMap = { '/a/b1' : null, '/a/b2' : null };
  var dstPath = null;
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty in src and dst, srcMap=map, dstPath=null';
  var expected = { '/a/b1' : '', '/a/b2' : '' };
  var dstMap = { '' : '' };
  var srcMap = { '/a/b1' : null, '/a/b2' : null };
  var dstPath = null;
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=dot str, srcMap=map, dstPath=null';
  var expected = { '.' : '', '/a/b1' : '', '/a/b2' : '' };
  var dstMap = '.';
  var srcMap = { '/a/b1' : null, '/a/b2' : null };
  var dstPath = null;
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  /* - */

  test.case = 'dstMap=map, srcMap=empty, dstPath=str';
  var expected = { '/src1' : '/dst', '/src2' : '/dst' };
  var dstMap = { '/src1' : null, '/src2' : '' };
  var srcMap = '';
  var dstPath = '/dst';
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map, srcMap=str, dstPath=str, rewrite';
  var expected = { '/src1' : '/dst2', '/src2' : '/dst1' };
  var dstMap = { '/src1' : '/dst1', '/src2' : '/dst1' };
  var srcMap = '/src1';
  var dstPath = '/dst2';
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map, srcMap=map, dstPath=str, rewrite';
  var expected = { '/src1' : '/dst2', '/src2' : '/dst3' };
  var dstMap = { '/src1' : '/dst1', '/src2' : '/dst1' };
  var srcMap = { '/src1' : null, '/src2' : '/dst3' };
  var dstPath = '/dst2';
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map, srcMap=map, dstPath=str, rewrite';
  var expected = { '/src1' : '/dst2', '/src2' : '/dst3' };
  var dstMap = { '/src1' : '/dst1', '/src2' : '/dst1' };
  var srcMap = { '/src1' : null, '/src2' : '/dst3' };
  var dstPath = '/dst2';
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map, srcMap=null, dstPath=str';
  var expected = { '/src1' : '/dst', '/src2' : '/dst' };
  var dstMap = { '/src1' : null, '/src2' : '' };
  var srcMap = null;
  var dstPath = '/dst';
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=null, dstPath=str';
  var expected = { '' : '/dst2' };
  var dstMap = { '' : '/dst2' };
  var srcMap = null;
  var dstPath = '/dst2';
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=null, dstPath=null';
  var expected = { '' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = null;
  var dstPath = null;
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=empty, dstPath=null';
  var expected = { '' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = '';
  var dstPath = null;
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=string, dstPath=null';
  var expected = { '/src' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = '/src';
  var dstPath = null;
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=array, dstPath=null';
  var expected = { '/src1' : '/dst', '/src2' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = [ '/src1', '/src2' ];
  var dstPath = null;
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=empty array, dstPath=null';
  var expected = { '' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = [];
  var dstPath = null;
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=empty map, dstPath=null';
  var expected = { '' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = {};
  var dstPath = null;
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=empty str, dstPath=null';
  var expected = { '' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = '';
  var dstPath = null;
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=empty str, dstPath=empty str';
  var expected = { '' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = '';
  var dstPath = '';
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=not normal empty map, dstPath=null';
  var expected = { '' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = { '' : '' };
  var dstPath = null;
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=map with only src, dstPath=null';
  var expected = { '/src1' : '/dst', '/src2' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = { '/src1' : null, '/src2' : null };
  var dstPath = null;
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=map, dstPath=null';
  var expected = { '/null' : '/dst', '/str' : '/dst2', '/empty1' : '/dst', '/empty2' : '/dst', '/true' : true, '/false' : false };
  var dstMap = { '' : '/dst' };
  var srcMap = { '/null' : null, '/str' : '/dst2', '/empty1' : '', '/empty2' : [ '' ], '/true' : true, '/false' : false };
  var dstPath = null;
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=not normal empty map, dstPath=empty str';
  var expected = { '' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = { '' : '' };
  var dstPath = '';
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=map with only src, dstPath=empty str';
  var expected = { '/src1' : '/dst', '/src2' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = { '/src1' : null, '/src2' : null };
  var dstPath = '';
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=map, dstPath=empty str';
  var expected = { '/null' : '/dst', '/str' : '/dst2', '/empty1' : '/dst', '/empty2' : '/dst', '/true' : true, '/false' : false };
  var dstMap = { '' : '/dst' };
  var srcMap = { '/null' : null, '/str' : '/dst2', '/empty1' : '', '/empty2' : [ '' ], '/true' : true, '/false' : false };
  var dstPath = '';
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=map, dstPath=str';
  var expected = { '/null' : '/dstx', '/str' : '/dst2', '/empty1' : '/dstx', '/empty2' : '/dstx', '/true' : true, '/false' : false, '' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = { '/null' : null, '/str' : '/dst2', '/empty1' : '', '/empty2' : [ '' ], '/true' : true, '/false' : false };
  var dstPath = '/dstx';
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=map, dstPath=str, same as in dst map';
  var expected = { '/null' : '/dst', '/str' : '/dst2', '/empty1' : '/dst', '/empty2' : '/dst', '/true' : true, '/false' : false };
  var dstMap = { '' : '/dst' };
  var srcMap = { '/null' : null, '/str' : '/dst2', '/empty1' : '', '/empty2' : [ '' ], '/true' : true, '/false' : false };
  var dstPath = '/dst';
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=map, dstPath=null';
  var expected = { '' : '/dst', '/src1' : '/dst1', '/src2' : '/dst2' };
  var dstMap = { '' : '/dst' };
  var srcMap = { '/src1' : '/dst1', '/src2' : '/dst2' };
  var dstPath = null;
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=complex map, dstPath=null';
  var expected =
  {
    '/True' : true,
    '/False' : false,
    '/Zero' : false,
    '/One' : true,
    '/Null' : '/dst',
    '/String1' : '/dir1',
    '/String2' : '/dir2',
    '/Array' : [ '/dir1', '/dir2' ],
    '/Object' : obj1,
  }
  var dstMap = { '' : '/dst' };
  var srcMap =
  {
    '' : null,
    '/True' : true,
    '/False' : false,
    '/Zero' : 0,
    '/One' : 1,
    '/Null' : null,
    '/String1' : '/dir1',
    '/String2' : '/dir2',
    '/Array' : [ '/dir1', '/dir2' ],
    '/Object' : obj1,
  };
  var dstPath = null;
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=map with empty src, srcMap=string, dstPath=string';
  var expected = { '' : '/dst', '/src' : '/dst2' };
  var dstMap = { '' : '/dst' };
  var srcMap = '/src';
  var dstPath = '/dst2';
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  /* - */

  test.open( 'src<>map, dst<>map' );

  test.case = 'src=str, dst=str, dstPath=null';
  var expected = { '/a' : '', '/b' : '' }
  var dstMap = '/a';
  var srcMap = '/b';
  var dstPath = null;
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'src=arr, dst=str, dstPath=arr';
  var expected = { '/a' : '', '/b' : '' }
  var dstMap = '/a';
  var srcMap = [ '/b' ];
  var dstPath = [ null ];
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'src=arr, dst=arr, dstPath=arr';
  var expected = { '/a' : '', '/b' : '' }
  var dstMap = [ '/a' ];
  var srcMap = [ '/b' ];
  var dstPath = [ null ];
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'src=str, dst=str, dstPath=null';
  var expected = { '/a' : '', '/b' : '' }
  var dstMap = '/a';
  var srcMap = '/b';
  var dstPath = '';
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'src=arr, dst=str, dstPath=arr';
  var expected = { '/a' : '', '/b' : '' }
  var dstMap = '/a';
  var srcMap = [ '/b' ];
  var dstPath = [ '' ];
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'src=arr, dst=arr, dstPath=arr';
  var expected = { '/a' : '', '/b' : '' }
  var dstMap = [ '/a' ];
  var srcMap = [ '/b' ];
  var dstPath = [ '' ];
  var got = path.mapExtend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.close( 'src<>map, dst<>map' );

  /* - */

  test.open( 'defaultDstPath:true' );

  /* - */

  test.open( 'dst:null' );

  test.case = 'src:string';
  var expected = { '/a/b' : true }
  var got = path.mapExtend( null, '/a/b', true );
  test.identical( got, expected );

  test.case = 'src:array';
  var expected = { '/a/b' : true, '/c/d' : true }
  var got = path.mapExtend( null, [ '/a/b', '/c/d' ], true );
  test.identical( got, expected );

  test.case = 'src:map with null';
  var expected = { '/a/b' : true, '/c/d' : true, '/true' : true, '/false' : false }
  var got = path.mapExtend( null, { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, true );
  test.identical( got, expected );

  test.close( 'dst:null' );

  /* */

  test.open( 'dst:string' );

  test.case = 'src:string';
  var expected = { '/z' : true, '/a/b' : true }
  var got = path.mapExtend( '/z', '/a/b', true );
  test.identical( got, expected );

  test.case = 'src:array';
  var expected = { '/z' : true, '/a/b' : true, '/c/d' : true }
  var got = path.mapExtend( '/z', [ '/a/b', '/c/d' ], true );
  test.identical( got, expected );

  test.case = 'src:map with null';
  var expected = { '/z' : true, '/a/b' : true, '/c/d' : true, '/true' : true, '/false' : false }
  var got = path.mapExtend( '/z', { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, true );
  test.identical( got, expected );

  test.close( 'dst:string' );

  /* */

  test.open( 'no dstPath' );

  test.case = 'no orphan';
  var expected = { '/One' : false, '/Str' : 'str', '/EmptyString1' : '', '/EmptyString2' : '', '/Null1' : '', '/Null2' : '' }
  var dst = { '/One' : 1, '/EmptyString1' : '', '/Null1' : null }
  var src = { '/One' : 0, '/Str' : 'str', '/EmptyString2' : '', '/Null2' : null }
  var got = path.mapExtend( dst, src );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'dst has orphan';
  var expected = { '/One' : false, '/Str' : 'str', '/EmptyString1' : '/dst', '/EmptyString2' : '/dst', '/Null1' : '/dst', '/Null2' : '/dst' }
  var dst = { '/One' : 1, '/EmptyString1' : '', '/Null1' : null, '' : '/dst' }
  var src = { '/One' : 0, '/Str' : 'str', '/EmptyString2' : '', '/Null2' : null }
  var got = path.mapExtend( dst, src );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src has orphan';
  var expected = { '/One' : false, '/Str' : 'str', '/EmptyString1' : '/dst', '/EmptyString2' : '/dst', '/Null1' : '/dst', '/Null2' : '/dst' }
  var dst = { '/One' : 1, '/EmptyString1' : '', '/Null1' : null }
  var src = { '/One' : 0, '/Str' : 'str', '/EmptyString2' : '', '/Null2' : null, '' : '/dst' }
  var got = path.mapExtend( dst, src );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'dst has orphan, no place for it';
  var expected = { '/One' : false, '' : '/dst' }
  var dst = { '/One' : 1, '' : '/dst' }
  var src = { '/One' : 0 }
  var got = path.mapExtend( dst, src );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src has orphan, no place for it';
  var expected = { '/One' : false, '' : '/dst' }
  var dst = { '/One' : 1 }
  var src = { '/One' : 0, '' : '/dst' }
  var got = path.mapExtend( dst, src );
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'no dstPath' )

  test.close( 'defaultDstPath:true' );

  /* */

  test.open( 'src:null' )

  test.case = 'src:null, dstPath:str';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '/dstx', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = '/dstx'
  var got = path.mapExtend( dst, null, dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:null';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapExtend( dst, null, null );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty str';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapExtend( dst, null, '' );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 1';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [];
  var got = path.mapExtend( dst, null, dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 2';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ '', '' ];
  var got = path.mapExtend( dst, null, dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 2';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ null, null ];
  var got = path.mapExtend( dst, null, dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:true';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapExtend( dst, null, true );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:false';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapExtend( dst, null, false );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:array';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : [ '/a', '/b' ], '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ '/a', '/b' ]
  var got = path.mapExtend( dst, null, dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'src:null' )

  /* */

  test.open( 'src:empty str' )

  test.case = 'src:null, dstPath:str';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '/dstx', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = '/dstx'
  var got = path.mapExtend( dst, '', dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:null';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapExtend( dst, '', null );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty str';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapExtend( dst, '', '' );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 1';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [];
  var got = path.mapExtend( dst, '', dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 2';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ '', '' ];
  var got = path.mapExtend( dst, '', dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 2';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ null, null ];
  var got = path.mapExtend( dst, '', dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:true';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapExtend( dst, '', true );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:false';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' :  [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapExtend( dst, '', false );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:array';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : [ '/a', '/b' ], '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ '/a', '/b' ]
  var got = path.mapExtend( dst, '', dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'src:empty str' )

  /* */

  test.open( 'src:empty arr' )

  test.case = 'src:null, dstPath:str';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '/dstx', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = '/dstx'
  var got = path.mapExtend( dst, [ '', null, '' ], dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:null';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapExtend( dst, [ '', null, '' ], null );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty str';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapExtend( dst, [ '', null, '' ], '' );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 1';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [];
  var got = path.mapExtend( dst, [ '', null, '' ], dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 2';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ '', '' ];
  var got = path.mapExtend( dst, [ '', null, '' ], dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 2';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ null, null ];
  var got = path.mapExtend( dst, [ '', null, '' ], dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:true';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapExtend( dst, [ '', null, '' ], true );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:true';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : true, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapExtend( dst, { '/Null' : null }, true );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:false';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapExtend( dst, [ '', null, '' ], false );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:array';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : [ '/a', '/b' ], '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ '/a', '/b' ];
  var got = path.mapExtend( dst, [ '', null, '' ], dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'src:empty arr' )

  /* */

  test.open( 'src:empty map' )

  test.case = 'src:null, dstPath:str';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '/dstx', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = '/dstx'
  var got = path.mapExtend( dst, { '' : '' }, dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:null';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapExtend( dst, { '' : '' }, null );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty str';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapExtend( dst, { '' : '' }, '' );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 1';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [];
  var got = path.mapExtend( dst, { '' : '' }, dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 2';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ '', '' ];
  var got = path.mapExtend( dst, { '' : '' }, dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 2';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ null, null ];
  var got = path.mapExtend( dst, { '' : '' }, dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:true';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapExtend( dst, { '' : '' }, true );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:false';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapExtend( dst, { '' : '' }, false );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:array';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : [ '/a', '/b' ], '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ '/a', '/b' ];
  var got = path.mapExtend( dst, { '' : '' }, dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'src:empty map' )

  /* */

  test.open( 'dst:map' );

  test.case = 'src:string';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : true }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapExtend( dst, '/a/b', true );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:array';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : true, '/c/d' : true }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapExtend( dst, [ '/a/b', '/c/d' ], true );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:map with null';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : true, '/c/d' : true, '/true' : true, '/false' : false }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapExtend( dst, { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, true );
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'dst:map' );

  test.open( 'dst:map, collision' );

  test.case = 'dst is true';
  var exp = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : true, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : true, '/EmptyArray2' : true, '/EmptyArray3' : true }
  var dst = { '/One' : 0, '/Zero' : 1, '/True' : true, '/False' : true, '/Null' : true, '/String1' : true, '/String2' : true, '/Array' : true, '/Object' : true, '/EmptyArray1' : [ '' ], '/EmptyArray2' : [], '/EmptyArray3' : [ null ] }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapExtend( dst, src, true );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is false';
  var exp = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : true, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : true, '/EmptyArray2' : true, '/EmptyArray3' : true }
  var dst = { '/True' : false, '/False' : false, '/Null' : false, '/String1' : false, '/String2' : false, '/Array' : false, '/Object' : false }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapExtend( dst, src, true );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is 1';
  var exp = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : true, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : true, '/EmptyArray2' : true, '/EmptyArray3' : true }
  var dst = { '/True' : 1, '/False' : 1, '/Null' : 1, '/String1' : 1, '/String2' : 1, '/Array' : 1, '/Object' : 1 }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapExtend( dst, src, true );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is 0';
  var exp = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : true, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : true, '/EmptyArray2' : true, '/EmptyArray3' : true }
  var dst = { '/True' : 0, '/False' : 0, '/Null' : 0, '/String1' : 0, '/String2' : 0, '/Array' : 0, '/Object' : 0 }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapExtend( dst, src, true );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is null';
  var exp = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : true, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : true, '/EmptyArray2' : true, '/EmptyArray3' : true }
  var dst = { '/True' : null, '/False' : null, '/Null' : null, '/String1' : null, '/String2' : null, '/Array' : null, '/Object' : null }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapExtend( dst, src, true );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is string';
  var exp = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : true, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : true, '/EmptyArray2' : true, '/EmptyArray3' : true }
  var dst = { '/True' : '/dir2', '/False' : '/dir2', '/Null' : '/dir2', '/String1' : '/dir2', '/String2' : '/dir2', '/Array' : '/dir2', '/Object' : '/dir2' }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapExtend( dst, src, true );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is array';
  var exp = { '/True' : true, '/False' : false, '/Null' : true, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/One' : true, '/Zero' : false, '/EmptyArray1' : true, '/EmptyArray2' : true, '/EmptyArray3' : true }
  var dst = { '/True' : [ '/dir2', '/dir3' ], '/False' : [ '/dir2', '/dir3' ], '/Null' : [ '/dir2', '/dir3' ], '/String1' : [ '/dir2', '/dir3' ], '/String2' : [ '/dir2', '/dir3' ], '/Array' : [ '/dir2', '/dir3' ], '/Object' : [ 'dst1', 'dst2' ] }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapExtend( dst, src, true );
  test.identical( got, exp );
  test.true( got === dst );

  test.close( 'dst:map, collision' );

  /* - */

  test.open( 'defaultDstPath:false' )

  /* - */

  test.open( 'dst:null' );

  test.case = 'src:string';
  var expected = { '/a/b' : false }
  var got = path.mapExtend( null, '/a/b', false );
  test.identical( got, expected );

  test.case = 'src:array';
  var expected = { '/a/b' : false, '/c/d' : false }
  var got = path.mapExtend( null, [ '/a/b', '/c/d' ], false );
  test.identical( got, expected );

  test.case = 'src:map with null';
  var expected = { '/a/b' : false, '/c/d' : false, '/true' : true, '/false' : false }
  var got = path.mapExtend( null, { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, false );
  test.identical( got, expected );

  test.close( 'dst:null' );

  /* */

  test.open( 'dst:string' );

  test.case = 'src:string';
  var expected = { '/z' : false, '/a/b' : false }
  var got = path.mapExtend( '/z', '/a/b', false );
  test.identical( got, expected );

  test.case = 'src:array';
  var expected = { '/z' : false, '/a/b' : false, '/c/d' : false }
  var got = path.mapExtend( '/z', [ '/a/b', '/c/d' ], false );
  test.identical( got, expected );

  test.case = 'src:map with null';
  var expected = { '/z' : false, '/a/b' : false, '/c/d' : false, '/true' : true, '/false' : false }
  var got = path.mapExtend( '/z', { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, false );
  test.identical( got, expected );

  test.close( 'dst:string' );

  /* */

  test.open( 'dst:map' );

  test.case = 'src:string';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : false }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapExtend( dst, '/a/b', false );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:array';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : false, '/c/d' : false }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapExtend( dst, [ '/a/b', '/c/d' ], false );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:map with null';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : false, '/c/d' : false, '/true' : true, '/false' : false }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapExtend( dst, { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, false );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/wasNull' : null }
  var dst = { '/wasTrue' : true, '/wasFalse' : false, '/wasNull' : null }
  var got = path.mapExtend( dst, null, false );
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'dst:map' );

  /* */

  test.open( 'dst:map, collision' );

  test.case = 'dst is true';
  var exp = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : false, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : false, '/EmptyArray2' : false, '/EmptyArray3' : false }
  var dst = { '/One' : 0, '/Zero' : 1, '/True' : true, '/False' : true, '/Null' : true, '/String1' : true, '/String2' : true, '/Array' : true, '/Object' : true, '/EmptyArray1' : [ '' ], '/EmptyArray2' : [], '/EmptyArray3' : [ null ] }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapExtend( dst, src, false );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is false';
  var exp = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : false, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : false, '/EmptyArray2' : false, '/EmptyArray3' : false }
  var dst = { '/True' : false, '/False' : false, '/Null' : false, '/String1' : false, '/String2' : false, '/Array' : false, '/Object' : false }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapExtend( dst, src, false );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is 1';
  var exp = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : false, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : false, '/EmptyArray2' : false, '/EmptyArray3' : false }
  var dst = { '/True' : 1, '/False' : 1, '/Null' : 1, '/String1' : 1, '/String2' : 1, '/Array' : 1, '/Object' : 1 }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapExtend( dst, src, false );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is 0';
  var exp = { '/True' : true, '/False' : false, '/Null' : false, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/One' : true, '/Zero' : false, '/EmptyArray1' : false, '/EmptyArray2' : false, '/EmptyArray3' : false };
  var dst = { '/True' : 0, '/False' : 0, '/Null' : 0, '/String1' : 0, '/String2' : 0, '/Array' : 0, '/Object' : 0 }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapExtend( dst, src, false );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is null';
  var exp = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : false, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : false, '/EmptyArray2' : false, '/EmptyArray3' : false }
  var dst = { '/True' : null, '/False' : null, '/Null' : null, '/String1' : null, '/String2' : null, '/Array' : null, '/Object' : null }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapExtend( dst, src, false );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is string';
  var exp = { '/True' : true, '/False' : false, '/Null' : false, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/One' : true, '/Zero' : false, '/EmptyArray1' : false, '/EmptyArray2' : false, '/EmptyArray3' : false };
  var dst = { '/True' : '/dir2', '/False' : '/dir2', '/Null' : '/dir2', '/String1' : '/dir2', '/String2' : '/dir2', '/Array' : '/dir2', '/Object' : '/dir2' }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapExtend( dst, src, false );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is array';
  var exp = { '/True' : true, '/False' : false, '/Null' : false, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/One' : true, '/Zero' : false, '/Object' : obj1, '/EmptyArray1' : false, '/EmptyArray2' : false, '/EmptyArray3' : false }
  var dst = { '/True' : [ '/dir2', '/dir3' ], '/False' : [ '/dir2', '/dir3' ], '/Null' : [ '/dir2', '/dir3' ], '/String1' : [ '/dir2', '/dir3' ], '/String2' : [ '/dir2', '/dir3' ], '/Array' : [ '/dir2', '/dir3' ], '/Object' : [ '/dir2', '/dir3' ] }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapExtend( dst, src, false );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is object';
  var exp = { '/True' : true, '/False' : false, '/Null' : false, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/One' : true, '/Zero' : false, '/EmptyArray1' : false, '/EmptyArray2' : false, '/EmptyArray3' : false }
  var dst = { '/True' : obj0, '/False' : obj0, '/Null' : obj0, '/String1' : obj0, '/String2' : obj0, '/Array' : obj0, '/Object' : obj0 }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapExtend( dst, src, false );
  test.identical( got, exp );
  test.true( got === dst );

  test.close( 'dst:map, collision' );

  /* - */

  test.close( 'defaultDstPath:false' )
  test.open( 'defaultDstPath:array' )

  /* - */

  test.open( 'dst:null' );

  test.case = 'src:string';
  var expected = { '/a/b' : [ '/dir2', '/dir3' ] }
  var got = path.mapExtend( null, '/a/b', [ '/dir2', '/dir3' ] );
  test.identical( got, expected );

  test.case = 'src:array';
  var expected = { '/a/b' : [ '/dir2', '/dir3' ], '/c/d' : [ '/dir2', '/dir3' ] }
  var got = path.mapExtend( null, [ '/a/b', '/c/d' ], [ '/dir2', '/dir3' ] );
  test.identical( got, expected );

  test.case = 'src:map with null';
  var expected = { '/a/b' : [ '/dir2', '/dir3' ], '/c/d' : [ '/dir2', '/dir3' ], '/true' : true, '/false' : false }
  var got = path.mapExtend( null, { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, [ '/dir2', '/dir3' ] );
  test.identical( got, expected );

  test.close( 'dst:null' );

  /* */

  test.open( 'dst:string' );

  test.case = 'src:string';
  var expected = { '/z' : [ '/dir2', '/dir3' ], '/a/b' : [ '/dir2', '/dir3' ] }
  var got = path.mapExtend( '/z', '/a/b', [ '/dir2', '/dir3' ] );
  test.identical( got, expected );

  test.case = 'src:array';
  var expected = { '/z' : [ '/dir2', '/dir3' ], '/a/b' : [ '/dir2', '/dir3' ], '/c/d' : [ '/dir2', '/dir3' ] }
  var got = path.mapExtend( '/z', [ '/a/b', '/c/d' ], [ '/dir2', '/dir3' ] );
  test.identical( got, expected );

  test.case = 'src:map with null';
  var expected = { '/z' : [ '/dir2', '/dir3' ], '/a/b' : [ '/dir2', '/dir3' ], '/c/d' : [ '/dir2', '/dir3' ], '/true' : true, '/false' : false }
  var got = path.mapExtend( '/z', { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, [ '/dir2', '/dir3' ] );
  test.identical( got, expected );

  test.close( 'dst:string' );

  /* */

  test.open( 'dst:map' );

  test.case = 'src:string';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : [ '/dir2', '/dir3' ] }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapExtend( dst, '/a/b', [ '/dir2', '/dir3' ] );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:array';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : [ '/dir2', '/dir3' ], '/c/d' : [ '/dir2', '/dir3' ] }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapExtend( dst, [ '/a/b', '/c/d' ], [ '/dir2', '/dir3' ] );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:map with null';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : [ '/dir2', '/dir3' ], '/c/d' : [ '/dir2', '/dir3' ], '/true' : true, '/false' : false }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapExtend( dst, { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, [ '/dir2', '/dir3' ] );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/wasNull' : [ '/dir1', '/dir2' ] }
  var dst = { '/wasTrue' : true, '/wasFalse' : false, '/wasNull' : null }
  var got = path.mapExtend( dst, null, [ '/dir1', '/dir2' ] );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, only bools';
  var expected = { '/wasTrue' : true, '/wasFalse' : false }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapExtend( dst, null, [ '/dir1', '/dir2' ] );
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'dst:map' );

  /* */

  test.open( 'dst:map, collision' );

  test.case = 'dst is true';
  var exp = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : [ '/dir1', '/dir2' ], '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : [ '/dir1', '/dir2' ], '/EmptyArray2' : [ '/dir1', '/dir2' ], '/EmptyArray3' : [ '/dir1', '/dir2' ] };
  var dst = { '/One' : 0, '/Zero' : 1, '/True' : true, '/False' : true, '/Null' : true, '/String1' : true, '/String2' : true, '/Array' : true, '/Object' : true, '/EmptyArray1' : [ '' ], '/EmptyArray2' : [], '/EmptyArray3' : [ null ] };
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapExtend( dst, src, [ '/dir1', '/dir2' ] );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is false';
  var exp = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : [ '/dir1', '/dir2' ], '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : [ '/dir1', '/dir2' ], '/EmptyArray2' : [ '/dir1', '/dir2' ], '/EmptyArray3' : [ '/dir1', '/dir2' ] }
  var dst = { '/True' : false, '/False' : false, '/Null' : false, '/String1' : false, '/String2' : false, '/Array' : false, '/Object' : false }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapExtend( dst, src, [ '/dir1', '/dir2' ] );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is 1';
  var exp = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : [ '/dir1', '/dir2' ], '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : [ '/dir1', '/dir2' ], '/EmptyArray2' : [ '/dir1', '/dir2' ], '/EmptyArray3' : [ '/dir1', '/dir2' ] }
  var dst = { '/True' : 1, '/False' : 1, '/Null' : 1, '/String1' : 1, '/String2' : 1, '/Array' : 1, '/Object' : 1 }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapExtend( dst, src, [ '/dir1', '/dir2' ] );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is 0';
  var exp = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : [ '/dir1', '/dir2' ], '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : [ '/dir1', '/dir2' ], '/EmptyArray2' : [ '/dir1', '/dir2' ], '/EmptyArray3' : [ '/dir1', '/dir2' ] };
  var dst = { '/True' : 0, '/False' : 0, '/Null' : 0, '/String1' : 0, '/String2' : 0, '/Array' : 0, '/Object' : 0 }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : [ '/dir1', '/dir2' ], '/EmptyArray2' : [ '/dir1', '/dir2' ], '/EmptyArray3' : [ '/dir1', '/dir2' ] }
  var got = path.mapExtend( dst, src, [ '/dir1', '/dir2' ] );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is null';
  var exp = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : [ '/dir1', '/dir2' ], '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : [ '/dir1', '/dir2' ], '/EmptyArray2' : [ '/dir1', '/dir2' ], '/EmptyArray3' : [ '/dir1', '/dir2' ] }
  var dst = { '/True' : null, '/False' : null, '/Null' : null, '/String1' : null, '/String2' : null, '/Array' : null, '/Object' : null }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapExtend( dst, src, [ '/dir1', '/dir2' ] );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is string';
  var exp = { '/True' : true, '/False' : false, '/One' : true, '/Zero' : false, '/Null' : [ '/dir1', '/dir2' ], '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : [ '/dir1', '/dir2' ], '/EmptyArray2' : [ '/dir1', '/dir2' ], '/EmptyArray3' : [ '/dir1', '/dir2' ] };
  var dst = { '/True' : '/dir2', '/False' : '/dir2', '/Null' : '/dir2', '/String1' : '/dir2', '/String2' : '/dir2', '/Array' : '/dir2', '/Object' : '/dir2' }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapExtend( dst, src, [ '/dir1', '/dir2' ] );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is array';
  var exp = { '/True' : true, '/False' : false, '/One' : true, '/Zero' : false, '/Null' : [ '/dir1', '/dir2' ], '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : [ '/dir1', '/dir2' ], '/EmptyArray2' : [ '/dir1', '/dir2' ], '/EmptyArray3' : [ '/dir1', '/dir2' ] };
  var dst = { '/True' : [ '/dir2', '/dir3' ], '/False' : [ '/dir2', '/dir3' ], '/Null' : [ '/dir2', '/dir3' ], '/String1' : [ '/dir2', '/dir3' ], '/String2' : [ '/dir2', '/dir3' ], '/Array' : [ '/dir2', '/dir3' ], '/Object' : [ '/dir2', '/dir3' ] };
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapExtend( dst, src, [ '/dir1', '/dir2' ] );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is object';
  var exp = { '/True' : true, '/False' : false, '/Null' : [ '/dir1', '/dir2' ], '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/One' : true, '/Zero' : false, '/EmptyArray1' : [ '/dir1', '/dir2' ], '/EmptyArray2' : [ '/dir1', '/dir2' ], '/EmptyArray3' : [ '/dir1', '/dir2' ] };
  var dst = { '/True' : obj0, '/False' : obj0, '/Null' : obj0, '/String1' : obj0, '/String2' : obj0, '/Array' : obj0, '/Object' : obj0 }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapExtend( dst, src, [ '/dir1', '/dir2' ] );
  test.identical( got, exp );
  test.true( got === dst );

  test.close( 'dst:map, collision' );

  /* - */

  test.close( 'defaultDstPath:array' )
  test.open( 'defaultDstPath:obj' )

  /* - */

  test.open( 'dst:null' );

  test.case = 'src:string';
  var expected = { '/a/b' : obj2 }
  var got = path.mapExtend( null, '/a/b', obj2 );
  test.identical( got, expected );

  test.case = 'src:array';
  var expected = { '/a/b' : obj2, '/c/d' : obj2 }
  var got = path.mapExtend( null, [ '/a/b', '/c/d' ], obj2 );
  test.identical( got, expected );

  test.case = 'src:map with null';
  var expected = { '/a/b' : obj2, '/c/d' : obj2, '/true' : true, '/false' : false }
  var got = path.mapExtend( null, { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, obj2 );
  test.identical( got, expected );

  test.close( 'dst:null' );

  /* */

  test.open( 'dst:string' );

  test.case = 'src:string';
  var expected = { '/z' : obj2, '/a/b' : obj2 }
  var got = path.mapExtend( '/z', '/a/b', obj2 );
  test.identical( got, expected );

  test.case = 'src:array';
  var expected = { '/z' : obj2, '/a/b' : obj2, '/c/d' : obj2 }
  var got = path.mapExtend( '/z', [ '/a/b', '/c/d' ], obj2 );
  test.identical( got, expected );

  test.case = 'src:map with null';
  var expected = { '/z' : obj2, '/a/b' : obj2, '/c/d' : obj2, '/true' : true, '/false' : false }
  var got = path.mapExtend( '/z', { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, obj2 );
  test.identical( got, expected );

  test.close( 'dst:string' );

  /* */

  test.open( 'dst:map' );

  test.case = 'src:string';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : obj2 }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapExtend( dst, '/a/b', obj2 );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:array';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : obj2, '/c/d' : obj2 }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapExtend( dst, [ '/a/b', '/c/d' ], obj2 );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:map with null';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : obj2, '/c/d' : obj2, '/true' : true, '/false' : false }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapExtend( dst, { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, obj2 );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/wasNull' : obj2 }
  var dst = { '/wasTrue' : true, '/wasFalse' : false, '/wasNull' : null }
  var got = path.mapExtend( dst, null, obj2 );
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'dst:map' );

  /* */

  test.open( 'dst:map, collision' );

  test.case = 'dst is true';
  var exp = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : obj2, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : obj2, '/EmptyArray2' : obj2, '/EmptyArray3' : obj2 }
  var dst = { '/One' : 0, '/Zero' : 1, '/True' : true, '/False' : true, '/Null' : true, '/String1' : true, '/String2' : true, '/Array' : true, '/Object' : true, '/EmptyArray1' : [ '' ], '/EmptyArray2' : [], '/EmptyArray3' : [ null ] }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapExtend( dst, src, obj2 );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is false';
  var exp = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : obj2, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : obj2, '/EmptyArray2' : obj2, '/EmptyArray3' : obj2 }
  var dst = { '/True' : false, '/False' : false, '/Null' : false, '/String1' : false, '/String2' : false, '/Array' : false, '/Object' : false }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapExtend( dst, src, obj2 );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is 1';
  var exp = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : obj2, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : obj2, '/EmptyArray2' : obj2, '/EmptyArray3' : obj2 }
  var dst = { '/True' : 1, '/False' : 1, '/Null' : 1, '/String1' : 1, '/String2' : 1, '/Array' : 1, '/Object' : 1 }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapExtend( dst, src, obj2 );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is 0';
  var exp = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : obj2, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : obj2, '/EmptyArray2' : obj2, '/EmptyArray3' : obj2 }
  var dst = { '/True' : 0, '/False' : 0, '/Null' : 0, '/String1' : 0, '/String2' : 0, '/Array' : 0, '/Object' : 0 }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapExtend( dst, src, obj2 );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is null';
  var exp = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : obj2, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : obj2, '/EmptyArray2' : obj2, '/EmptyArray3' : obj2 }
  var dst = { '/True' : null, '/False' : null, '/Null' : null, '/String1' : null, '/String2' : null, '/Array' : null, '/Object' : null }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapExtend( dst, src, obj2 );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is string';
  var exp = { '/True' : true, '/False' : false, '/Null' : obj2, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/One' : true, '/Zero' : false, '/EmptyArray1' : obj2, '/EmptyArray2' : obj2, '/EmptyArray3' : obj2 };
  var dst = { '/True' : '/dir2', '/False' : '/dir2', '/Null' : '/dir2', '/String1' : '/dir2', '/String2' : '/dir2', '/Array' : '/dir2', '/Object' : '/dir2' }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapExtend( dst, src, obj2 );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is array';
  var exp = { '/True' : true, '/False' : false, '/Null' : obj2, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/One' : true, '/Zero' : false, '/EmptyArray1' : obj2, '/EmptyArray2' : obj2, '/EmptyArray3' : obj2 }
  var dst = { '/True' : [ '/dir2', '/dir3' ], '/False' : [ '/dir2', '/dir3' ], '/Null' : [ '/dir2', '/dir3' ], '/String1' : [ '/dir2', '/dir3' ], '/String2' : [ '/dir2', '/dir3' ], '/Array' : [ '/dir2', '/dir3' ], '/Object' : [ '/dir2', '/dir3' ] }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapExtend( dst, src, obj2 );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is object';
  var exp = { '/True' : true, '/False' : false, '/Null' : obj2, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/One' : true, '/Zero' : false, '/EmptyArray1' : obj2, '/EmptyArray2' : obj2, '/EmptyArray3' : obj2 }
  var dst = { '/True' : obj0, '/False' : obj0, '/Null' : obj0, '/String1' : obj0, '/String2' : obj0, '/Array' : obj0, '/Object' : obj0 }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapExtend( dst, src, obj2 );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is the same object';
  var exp = { '/True' : true, '/False' : false, '/Null' : obj0, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj0 }
  var dst = { '/True' : true, '/False' : obj0, '/Null' : obj0, '/String1' : obj0, '/String2' : obj0, '/Array' : obj0, '/Object' : obj0 }
  var src = { '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj0 }
  var got = path.mapExtend( dst, src, obj0 );
  test.identical( got, exp );
  test.true( got === dst );

  test.close( 'dst:map, collision' );

  test.close( 'defaultDstPath:obj' )

  /* - */

  test.open( 'dstPath=map' );

  test.shouldThrowErrorSync( () => path.mapExtend( {}, {}, {} ) );

  // test.case = 'dstMap=null, srcMap=null, dstPath=map';
  // var expected = { '/True' : true, '/False' : false, '/Zero' : 0, '/One' : 1, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  // var dstMap = null;
  // var srcMap = null;
  // var dstPath = { '/True' : true, '/False' : false, '/Zero' : 0, '/One' : 1, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  // var got = path.mapExtend( dstMap, srcMap, dstPath );
  // test.identical( got, expected );
  // test.true( got !== dstMap )
  // test.true( got !== srcMap )
  // test.true( got !== dstPath )

  test.close( 'dstPath=map' );

  /* - */

  test.open( 'throwing' )

  test.case = 'dstMap=null, srcMap=null, dstPath=map';
  var dstMap = null;
  var srcMap = null;
  var dstPath = { '/True' : true, '/False' : false, '/Zero' : 0, '/One' : 1, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  test.shouldThrowErrorSync( () => path.mapExtend( dstMap, srcMap, dstPath ) );
  test.shouldThrowErrorSync( () => path.mapExtend( {}, {}, {} ) );

  test.close( 'throwing' )

}

//

function mapSupplement( test )
{
  let path = _.path;
  function constr( src )
  {
    this.value = src;
    return this;
  }
  let obj0 = new constr( 0 );
  let obj1 = new constr( 1 );
  let obj2 = new constr( 2 );

  /* - */

  test.case = 'no override of empty string by boolean';
  var expected = { '.' : '', '**/.git/**' : false };
  var dstMap = { '.' : '' };
  var srcMap = '**/.git/**';
  var dstPath = false;
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dst is map, src is null, dstPath is str';
  var expected = { '/src' : '/dst' };
  var dstMap = { '/src' : '/dst' };
  var srcMap = null;
  var dstPath = '/dst2';
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dst is map with empty str in src, src is map with empty str in src, dstPath is str';
  var expected = { '/src' : '/dst', '' : '/dst3' };
  var dstMap = { '/src' : '/dst' };
  var srcMap = { '' : '/dst3' };
  var dstPath = '/dst2';
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  /* - */

  test.open( 'single argument' );

  test.case = 'null';
  var expected = {};
  var dstMap = null;
  var got = path.mapSupplement( dstMap );
  test.identical( got, expected );

  test.case = 'empty string';
  var expected = {};
  var dstMap = '';
  var got = path.mapSupplement( dstMap );
  test.identical( got, expected );

  test.case = 'string';
  var expected = { '/src' : '' };
  var dstMap = '/src';
  var got = path.mapSupplement( dstMap );
  test.identical( got, expected );

  test.case = 'array';
  var expected = { 'null' : '', 'false' : '', 'true' : '', 'str' : '' };
  var dstMap = [ null, '', false, true, 'str' ];
  var got = path.mapSupplement( dstMap );
  test.identical( got, expected );

  test.case = 'map';
  var expected = { '/src' : '', '/false' : false, '/true' : true, '/string' : 'str' };
  var dstMap = { '/src' : null, '' : '', '/false' : false, '/true' : true, '/string' : 'str' };
  var got = path.mapSupplement( dstMap );
  test.identical( got, expected );

  test.close( 'single argument' );

  /* - */

  test.case = 'dstMap=null, srcMap=null, dstPath=undefined';
  var expected = {};
  var dstMap = null;
  var srcMap = null;
  var dstPath = undefined;
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=empty, srcMap=null, dstPath=undefined';
  var expected = {};
  var dstMap = '';
  var srcMap = null;
  var dstPath = undefined;
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=null, srcMap=empty, dstPath=undefined';
  var expected = {};
  var dstMap = null;
  var srcMap = '';
  var dstPath = undefined;
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=empty, srcMap=empty, dstPath=undefined';
  var expected = {};
  var dstMap = '';
  var srcMap = '';
  var dstPath = undefined;
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=null, srcMap=null, dstPath=null';
  var expected = {};
  var dstMap = null;
  var srcMap = null;
  var dstPath = null;
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=empty, srcMap=null, dstPath=null';
  var expected = {};
  var dstMap = '';
  var srcMap = null;
  var dstPath = null;
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=null, srcMap=empty, dstPath=null';
  var expected = {};
  var dstMap = null;
  var srcMap = '';
  var dstPath = null;
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=empty, srcMap=empty, dstPath=null';
  var expected = {};
  var dstMap = '';
  var srcMap = '';
  var dstPath = null;
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=null, srcMap=null, dstPath=empty';
  var expected = {};
  var dstMap = null;
  var srcMap = null;
  var dstPath = '';
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=empty, srcMap=null, dstPath=empty';
  var expected = {};
  var dstMap = '';
  var srcMap = null;
  var dstPath = '';
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=null, srcMap=empty, dstPath=empty';
  var expected = {};
  var dstMap = null;
  var srcMap = '';
  var dstPath = '';
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=empty, srcMap=empty, dstPath=empty';
  var expected = {};
  var dstMap = '';
  var srcMap = '';
  var dstPath = '';
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  /* */

  test.case = 'dstMap=map with only src dot, srcMap=map with bools, dstPath=undefined';
  var expected = { '.' : '', 'a' : true, 'b' : false };
  var dstMap = { '.' : '' };
  var srcMap = { 'a' : true, 'b' : false };
  var dstPath = undefined;
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with only dst dot, srcMap=map with bools, dstPath=undefined';
  var expected = { '' : '.', 'a' : true, 'b' : false };
  var dstMap = { '' : '.' };
  var srcMap = { 'a' : true, 'b' : false };
  var dstPath = undefined;
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with only src and dst dot, srcMap=map with bools, dstPath=undefined';
  var expected = { '.' : '.', 'a' : true, 'b' : false };
  var dstMap = { '.' : '.' };
  var srcMap = { 'a' : true, 'b' : false };
  var dstPath = undefined;
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=is dot, srcMap=map with bools, dstPath=undefined';
  var expected = { '.' : '', 'a' : true, 'b' : false };
  var dstMap = '.';
  var srcMap = { 'a' : true, 'b' : false };
  var dstPath = undefined;
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=is empty, srcMap=map with bools, dstPath=undefined';
  var expected = { 'a' : true, 'b' : false };
  var dstMap = '';
  var srcMap = { 'a' : true, 'b' : false };
  var dstPath = undefined;
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  /* */

  test.case = 'dstMap=str, srcMap=str, dstPath=undefined';
  var expected = { '/dir/**' : true, '/dir/doubledir/d1/**' : true, '/dir/**/**b**' : false, '/dir/doubledir/d1/**/**b**' : false };
  var dstMap = { '/dir/**' : true, '/dir/doubledir/d1/**' : true, '/dir/**/**b**' : false, '/dir/doubledir/d1/**/**b**' : false };
  var srcMap = [ '/dir/**', '/dir/doubledir/d1/**' ];
  var dstPath = '';
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=str, srcMap=str, dstPath=undefined';
  var expected = { '/' : '/dst' }
  var dstMap = null;
  var srcMap = { '/' : '' };
  var dstPath = '/dst';
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=str, srcMap=str, dstPath=undefined';
  var expected = { 'a' : '', 'b' : '' }
  var dstMap = 'a';
  var srcMap = 'b';
  var got = path.mapSupplement( dstMap, srcMap );
  test.identical( got, expected );

  test.case = 'dstMap=str, srcMap=str, dstPath=null';
  var expected = { 'a' : '', 'b' : '' }
  var dstMap = 'a';
  var srcMap = 'b';
  var got = path.mapSupplement( dstMap, srcMap, null );
  test.identical( got, expected );

  test.case = 'dstMap=str, srcMap=str, dstPath=str';
  var expected = { 'a' : 'c', 'b' : 'c' }
  var dstMap = 'a';
  var srcMap = 'b';
  var got = path.mapSupplement( dstMap, srcMap, 'c' );
  test.identical( got, expected );

  test.case = 'dstMap=null, srcMap=null, dstPath=str';
  var expected = {}
  var dstMap = null;
  var srcMap = null;
  var dstPath = '/dst';
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=null, srcMap=null in arr, dstPath=str';
  var expected = {}
  var dstMap = null;
  var srcMap = [ null ];
  var dstPath = '/dst';
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=null, srcMap=map, dstPath=null';
  var expected = { '/src' : '/dst' }
  var dstMap = null;
  var srcMap = { '/src' : '/dst' };
  var dstPath = null;
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=map, srcMap=str, dstPath=null';
  var expected = { '/src' : '/dst' }
  var dstMap = { '/src' : '/dst' };
  var srcMap = '/src';
  var dstPath = null;
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  /* - */

  test.case = 'dstMap=map with dot in src, srcMap=map, dstPath=null';
  var expected = { '.' : '', 'x' : '', 'y' : '', '/a/b1' : '', '/a/b2' : '' };
  var dstMap = { '.' : null, 'x' : null, 'y' : '' };
  var srcMap = { '/a/b1' : null, '/a/b2' : null };
  var dstPath = null;
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with dot in src, srcMap=map, dstPath=null';
  var expected = { '.' : '', '/a/b1' : '', '/a/b2' : '' };
  var dstMap = { '.' : null };
  var srcMap = { '/a/b1' : null, '/a/b2' : null };
  var dstPath = null;
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty in src, srcMap=map, dstPath=null';
  var expected = { '/a/b1' : '', '/a/b2' : '' };
  var dstMap = { '' : null };
  var srcMap = { '/a/b1' : null, '/a/b2' : null };
  var dstPath = null;
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty in src and dst, srcMap=map, dstPath=null';
  var expected = { '/a/b1' : '', '/a/b2' : '' };
  var dstMap = { '' : '' };
  var srcMap = { '/a/b1' : null, '/a/b2' : null };
  var dstPath = null;
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=dot str, srcMap=map, dstPath=null';
  var expected = { '.' : '', '/a/b1' : '', '/a/b2' : '' };
  var dstMap = '.';
  var srcMap = { '/a/b1' : null, '/a/b2' : null };
  var dstPath = null;
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  /* - */

  test.case = 'dstMap=map, srcMap=empty, dstPath=str';
  var expected = { '/src1' : '/dst', '/src2' : '/dst' };
  var dstMap = { '/src1' : null, '/src2' : '' };
  var srcMap = '';
  var dstPath = '/dst';
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map, srcMap=str, dstPath=str, rewrite';
  var expected = { '/src1' : '/dst1', '/src2' : '/dst1' };
  var dstMap = { '/src1' : '/dst1', '/src2' : '/dst1' };
  var srcMap = '/src1';
  var dstPath = '/dst2';
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map, srcMap=map, dstPath=str, rewrite';
  var expected = { '/src1' : '/dst1', '/src2' : '/dst1' };
  var dstMap = { '/src1' : '/dst1', '/src2' : '/dst1' };
  var srcMap = { '/src1' : null, '/src2' : '/dst3' };
  var dstPath = '/dst2';
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map, srcMap=map, dstPath=str, rewrite';
  var expected = { '/src1' : '/dst1', '/src2' : '/dst1' };
  var dstMap = { '/src1' : '/dst1', '/src2' : '/dst1' };
  var srcMap = { '/src1' : null, '/src2' : '/dst3' };
  var dstPath = '/dst2';
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map, srcMap=null, dstPath=str';
  var expected = { '/src1' : '/dst', '/src2' : '/dst' };
  var dstMap = { '/src1' : null, '/src2' : '' };
  var srcMap = null;
  var dstPath = '/dst';
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=null, dstPath=str';
  var expected = { '' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = null;
  var dstPath = '/dst2';
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=null, dstPath=null';
  var expected = { '' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = null;
  var dstPath = null;
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=empty, dstPath=null';
  var expected = { '' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = '';
  var dstPath = null;
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=string, dstPath=null';
  var expected = { '/src' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = '/src';
  var dstPath = null;
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=array, dstPath=null';
  var expected = { '/src1' : '/dst', '/src2' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = [ '/src1', '/src2' ];
  var dstPath = null;
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=empty array, dstPath=null';
  var expected = { '' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = [];
  var dstPath = null;
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=empty map, dstPath=null';
  var expected = { '' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = {};
  var dstPath = null;
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=empty str, dstPath=null';
  var expected = { '' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = '';
  var dstPath = null;
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=empty str, dstPath=empty str';
  var expected = { '' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = '';
  var dstPath = '';
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=not normal empty map, dstPath=null';
  var expected = { '' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = { '' : '' };
  var dstPath = null;
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=map with only src, dstPath=null';
  var expected = { '/src1' : '/dst', '/src2' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = { '/src1' : null, '/src2' : null };
  var dstPath = null;
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=map, dstPath=null';
  var expected = { '/null' : '/dst', '/str' : '/dst2', '/empty1' : '/dst', '/empty2' : '/dst', '/true' : true, '/false' : false };
  var dstMap = { '' : '/dst' };
  var srcMap = { '/null' : null, '/str' : '/dst2', '/empty1' : '', '/empty2' : [ '' ], '/true' : true, '/false' : false };
  var dstPath = null;
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=not normal empty map, dstPath=empty str';
  var expected = { '' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = { '' : '' };
  var dstPath = '';
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=map with only src, dstPath=empty str';
  var expected = { '/src1' : '/dst', '/src2' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = { '/src1' : null, '/src2' : null };
  var dstPath = '';
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=map, dstPath=empty str';
  var expected = { '/null' : '/dst', '/str' : '/dst2', '/empty1' : '/dst', '/empty2' : '/dst', '/true' : true, '/false' : false };
  var dstMap = { '' : '/dst' };
  var srcMap = { '/null' : null, '/str' : '/dst2', '/empty1' : '', '/empty2' : [ '' ], '/true' : true, '/false' : false };
  var dstPath = '';
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=map, dstPath=str';
  var expected = { '/null' : '/dstx', '/str' : '/dst2', '/empty1' : '/dstx', '/empty2' : '/dstx', '/true' : true, '/false' : false, '' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = { '/null' : null, '/str' : '/dst2', '/empty1' : '', '/empty2' : [ '' ], '/true' : true, '/false' : false };
  var dstPath = '/dstx';
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=map, dstPath=str, same as in dst map';
  var expected = { '/null' : '/dst', '/str' : '/dst2', '/empty1' : '/dst', '/empty2' : '/dst', '/true' : true, '/false' : false };
  var dstMap = { '' : '/dst' };
  var srcMap = { '/null' : null, '/str' : '/dst2', '/empty1' : '', '/empty2' : [ '' ], '/true' : true, '/false' : false };
  var dstPath = '/dst';
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=map, dstPath=null';
  var expected = { '' : '/dst', '/src1' : '/dst1', '/src2' : '/dst2' };
  var dstMap = { '' : '/dst' };
  var srcMap = { '/src1' : '/dst1', '/src2' : '/dst2' };
  var dstPath = null;
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=complex map, dstPath=null';
  var expected =
  {
    '/True' : true,
    '/False' : false,
    '/Zero' : false,
    '/One' : true,
    '/Null' : '/dst',
    '/String1' : '/dir1',
    '/String2' : '/dir2',
    '/Array' : [ '/dir1', '/dir2' ],
    '/Object' : obj1,
  }
  var dstMap = { '' : '/dst' };
  var srcMap =
  {
    '' : null,
    '/True' : true,
    '/False' : false,
    '/Zero' : 0,
    '/One' : 1,
    '/Null' : null,
    '/String1' : '/dir1',
    '/String2' : '/dir2',
    '/Array' : [ '/dir1', '/dir2' ],
    '/Object' : obj1,
  };
  var dstPath = null;
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=map with empty src, srcMap=string, dstPath=string';
  var expected = { '' : '/dst', '/src' : '/dst2' };
  var dstMap = { '' : '/dst' };
  var srcMap = '/src';
  var dstPath = '/dst2';
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  /* - */

  test.open( 'src<>map, dst<>map' );

  test.case = 'src=str, dst=str, dstPath=null';
  var expected = { '/a' : '', '/b' : '' }
  var dstMap = '/a';
  var srcMap = '/b';
  var dstPath = null;
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'src=arr, dst=str, dstPath=arr';
  var expected = { '/a' : '', '/b' : '' }
  var dstMap = '/a';
  var srcMap = [ '/b' ];
  var dstPath = [ null ];
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'src=arr, dst=arr, dstPath=arr';
  var expected = { '/a' : '', '/b' : '' }
  var dstMap = [ '/a' ];
  var srcMap = [ '/b' ];
  var dstPath = [ null ];
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'src=str, dst=str, dstPath=null';
  var expected = { '/a' : '', '/b' : '' }
  var dstMap = '/a';
  var srcMap = '/b';
  var dstPath = '';
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'src=arr, dst=str, dstPath=arr';
  var expected = { '/a' : '', '/b' : '' }
  var dstMap = '/a';
  var srcMap = [ '/b' ];
  var dstPath = [ '' ];
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'src=arr, dst=arr, dstPath=arr';
  var expected = { '/a' : '', '/b' : '' }
  var dstMap = [ '/a' ];
  var srcMap = [ '/b' ];
  var dstPath = [ '' ];
  var got = path.mapSupplement( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.close( 'src<>map, dst<>map' );

  /* - */

  test.open( 'defaultDstPath:true' );

  /* - */

  test.open( 'dst:null' );

  test.case = 'src:string';
  var expected = { '/a/b' : true }
  var got = path.mapSupplement( null, '/a/b', true );
  test.identical( got, expected );

  test.case = 'src:array';
  var expected = { '/a/b' : true, '/c/d' : true }
  var got = path.mapSupplement( null, [ '/a/b', '/c/d' ], true );
  test.identical( got, expected );

  test.case = 'src:map with null';
  var expected = { '/a/b' : true, '/c/d' : true, '/true' : true, '/false' : false }
  var got = path.mapSupplement( null, { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, true );
  test.identical( got, expected );

  test.close( 'dst:null' );

  /* */

  test.open( 'dst:string' );

  test.case = 'src:string';
  var expected = { '/z' : true, '/a/b' : true }
  var got = path.mapSupplement( '/z', '/a/b', true );
  test.identical( got, expected );

  test.case = 'src:array';
  var expected = { '/z' : true, '/a/b' : true, '/c/d' : true }
  var got = path.mapSupplement( '/z', [ '/a/b', '/c/d' ], true );
  test.identical( got, expected );

  test.case = 'src:map with null';
  var expected = { '/z' : true, '/a/b' : true, '/c/d' : true, '/true' : true, '/false' : false }
  var got = path.mapSupplement( '/z', { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, true );
  test.identical( got, expected );

  test.close( 'dst:string' );

  /* */

  test.open( 'no dstPath' );

  test.case = 'no orphan';
  var expected = { '/One' : true, '/Str' : 'str', '/EmptyString1' : '', '/EmptyString2' : '', '/Null1' : '', '/Null2' : '' }
  var dst = { '/One' : 1, '/EmptyString1' : '', '/Null1' : null }
  var src = { '/One' : 0, '/Str' : 'str', '/EmptyString2' : '', '/Null2' : null }
  var got = path.mapSupplement( dst, src );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'dst has orphan';
  var expected = { '/One' : true, '/Str' : 'str', '/EmptyString1' : '/dst', '/EmptyString2' : '/dst', '/Null1' : '/dst', '/Null2' : '/dst' }
  var dst = { '/One' : 1, '/EmptyString1' : '', '/Null1' : null, '' : '/dst' }
  var src = { '/One' : 0, '/Str' : 'str', '/EmptyString2' : '', '/Null2' : null }
  var got = path.mapSupplement( dst, src );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src has orphan';
  var expected = { '/One' : true, '/Str' : 'str', '/EmptyString1' : '/dst', '/EmptyString2' : '/dst', '/Null1' : '/dst', '/Null2' : '/dst' }
  var dst = { '/One' : 1, '/EmptyString1' : '', '/Null1' : null }
  var src = { '/One' : 0, '/Str' : 'str', '/EmptyString2' : '', '/Null2' : null, '' : '/dst' }
  var got = path.mapSupplement( dst, src );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'dst has orphan, no place for it';
  var expected = { '/One' : true, '' : '/dst' }
  var dst = { '/One' : 1, '' : '/dst' }
  var src = { '/One' : 0 }
  var got = path.mapSupplement( dst, src );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src has orphan, no place for it';
  var expected = { '/One' : true, '' : '/dst' }
  var dst = { '/One' : 1 }
  var src = { '/One' : 0, '' : '/dst' }
  var got = path.mapSupplement( dst, src );
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'no dstPath' )

  test.close( 'defaultDstPath:true' );

  /* */

  test.open( 'src:null' )

  test.case = 'src:null, dstPath:str';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '/dstx', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = '/dstx'
  var got = path.mapSupplement( dst, null, dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:null';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapSupplement( dst, null, null );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty str';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapSupplement( dst, null, '' );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 1';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [];
  var got = path.mapSupplement( dst, null, dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 2';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ '', '' ];
  var got = path.mapSupplement( dst, null, dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 2';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ null, null ];
  var got = path.mapSupplement( dst, null, dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:true';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapSupplement( dst, null, true );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:false';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapSupplement( dst, null, false );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:array';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : [ '/a', '/b' ], '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ '/a', '/b' ]
  var got = path.mapSupplement( dst, null, dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'src:null' )

  /* */

  test.open( 'src:empty str' )

  test.case = 'src:null, dstPath:str';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '/dstx', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = '/dstx'
  var got = path.mapSupplement( dst, '', dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:null';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapSupplement( dst, '', null );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty str';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapSupplement( dst, '', '' );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 1';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [];
  var got = path.mapSupplement( dst, '', dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 2';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ '', '' ];
  var got = path.mapSupplement( dst, '', dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 2';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ null, null ];
  var got = path.mapSupplement( dst, '', dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:true';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapSupplement( dst, '', true );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:false';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' :  [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapSupplement( dst, '', false );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:array';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : [ '/a', '/b' ], '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ '/a', '/b' ]
  var got = path.mapSupplement( dst, '', dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'src:empty str' )

  /* */

  test.open( 'src:empty arr' )

  test.case = 'src:null, dstPath:str';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '/dstx', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = '/dstx'
  var got = path.mapSupplement( dst, [ '', null, '' ], dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:null';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapSupplement( dst, [ '', null, '' ], null );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty str';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapSupplement( dst, [ '', null, '' ], '' );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 1';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [];
  var got = path.mapSupplement( dst, [ '', null, '' ], dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 2';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ '', '' ];
  var got = path.mapSupplement( dst, [ '', null, '' ], dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 2';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ null, null ];
  var got = path.mapSupplement( dst, [ '', null, '' ], dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:true';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapSupplement( dst, [ '', null, '' ], true );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:false';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapSupplement( dst, [ '', null, '' ], false );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:array';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : [ '/a', '/b' ], '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ '/a', '/b' ];
  var got = path.mapSupplement( dst, [ '', null, '' ], dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'src:empty arr' )

  /* */

  test.open( 'src:empty map' )

  test.case = 'src:null, dstPath:str';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '/dstx', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = '/dstx'
  var got = path.mapSupplement( dst, { '' : '' }, dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:null';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapSupplement( dst, { '' : '' }, null );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty str';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapSupplement( dst, { '' : '' }, '' );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 1';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [];
  var got = path.mapSupplement( dst, { '' : '' }, dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 2';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ '', '' ];
  var got = path.mapSupplement( dst, { '' : '' }, dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 2';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ null, null ];
  var got = path.mapSupplement( dst, { '' : '' }, dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:true';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapSupplement( dst, { '' : '' }, true );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:false';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapSupplement( dst, { '' : '' }, false );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:array';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : [ '/a', '/b' ], '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ '/a', '/b' ];
  var got = path.mapSupplement( dst, { '' : '' }, dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'src:empty map' )

  /* */

  test.open( 'dst:map' );

  test.case = 'src:string';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : true }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapSupplement( dst, '/a/b', true );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:array';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : true, '/c/d' : true }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapSupplement( dst, [ '/a/b', '/c/d' ], true );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:map with null';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : true, '/c/d' : true, '/true' : true, '/false' : false }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapSupplement( dst, { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, true );
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'dst:map' );

  test.open( 'dst:map, collision' );

  test.case = 'dst is true';
  var exp = { '/One' : false, '/Zero' : true, '/True' : true, '/False' : true, '/Null' : true, '/String1' : true, '/String2' : true, '/Array' : true, '/Object' : true, '/EmptyArray1' : [], '/EmptyArray2' : [], '/EmptyArray3' : [] }
  var dst = { '/One' : 0, '/Zero' : 1, '/True' : true, '/False' : true, '/Null' : true, '/String1' : true, '/String2' : true, '/Array' : true, '/Object' : true, '/EmptyArray1' : [ '' ], '/EmptyArray2' : [], '/EmptyArray3' : [ null ] }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapSupplement( dst, src, true );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is false';
  var exp = { '/One' : true, '/Zero' : false, '/True' : false, '/False' : false, '/Null' : false, '/String1' : false, '/String2' : false, '/Array' : false, '/Object' : false, '/EmptyArray1' : true, '/EmptyArray2' : true, '/EmptyArray3' : true }
  var dst = { '/True' : false, '/False' : false, '/Null' : false, '/String1' : false, '/String2' : false, '/Array' : false, '/Object' : false }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapSupplement( dst, src, true );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is 1';
  var exp = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : true, '/Null' : true, '/String1' : true, '/String2' : true, '/Array' : true, '/Object' : true, '/EmptyArray1' : true, '/EmptyArray2' : true, '/EmptyArray3' : true }
  var dst = { '/True' : 1, '/False' : 1, '/Null' : 1, '/String1' : 1, '/String2' : 1, '/Array' : 1, '/Object' : 1 }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapSupplement( dst, src, true );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is 0';
  var exp = { '/One' : true, '/Zero' : false, '/True' : false, '/False' : false, '/Null' : false, '/String1' : false, '/String2' : false, '/Array' : false, '/Object' : false, '/EmptyArray1' : true, '/EmptyArray2' : true, '/EmptyArray3' : true };
  var dst = { '/True' : 0, '/False' : 0, '/Null' : 0, '/String1' : 0, '/String2' : 0, '/Array' : 0, '/Object' : 0 };
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapSupplement( dst, src, true );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is null';
  var exp = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : true, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : true, '/EmptyArray2' : true, '/EmptyArray3' : true };
  var dst = { '/True' : null, '/False' : null, '/Null' : null, '/String1' : null, '/String2' : null, '/Array' : null, '/Object' : null };
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapSupplement( dst, src, true );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is string';
  var exp = { '/One' : true, '/Zero' : false, '/True' : '/dir2', '/False' : '/dir2', '/Null' : '/dir2', '/String1' : '/dir2', '/String2' : '/dir2', '/Array' : '/dir2', '/Object' : '/dir2', '/EmptyArray1' : true, '/EmptyArray2' : true, '/EmptyArray3' : true }
  var dst = { '/True' : '/dir2', '/False' : '/dir2', '/Null' : '/dir2', '/String1' : '/dir2', '/String2' : '/dir2', '/Array' : '/dir2', '/Object' : '/dir2' }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapSupplement( dst, src, true );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is array';
  var exp = { '/True' : [ '/dir2', '/dir3' ], '/False' : [ '/dir2', '/dir3' ], '/Null' : [ '/dir2', '/dir3' ], '/String1' : [ '/dir2', '/dir3' ], '/String2' : [ '/dir2', '/dir3' ], '/Array' : [ '/dir2', '/dir3' ], '/Object' : [ 'dst1', 'dst2' ], '/One' : true, '/Zero' : false, '/EmptyArray1' : true, '/EmptyArray2' : true, '/EmptyArray3' : true }
  var dst = { '/True' : [ '/dir2', '/dir3' ], '/False' : [ '/dir2', '/dir3' ], '/Null' : [ '/dir2', '/dir3' ], '/String1' : [ '/dir2', '/dir3' ], '/String2' : [ '/dir2', '/dir3' ], '/Array' : [ '/dir2', '/dir3' ], '/Object' : [ 'dst1', 'dst2' ] }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapSupplement( dst, src, true );
  test.identical( got, exp );
  test.true( got === dst );

  test.close( 'dst:map, collision' );

  /* - */

  test.open( 'defaultDstPath:false' )

  /* - */

  test.open( 'dst:null' );

  test.case = 'src:string';
  var expected = { '/a/b' : false }
  var got = path.mapSupplement( null, '/a/b', false );
  test.identical( got, expected );

  test.case = 'src:array';
  var expected = { '/a/b' : false, '/c/d' : false }
  var got = path.mapSupplement( null, [ '/a/b', '/c/d' ], false );
  test.identical( got, expected );

  test.case = 'src:map with null';
  var expected = { '/a/b' : false, '/c/d' : false, '/true' : true, '/false' : false }
  var got = path.mapSupplement( null, { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, false );
  test.identical( got, expected );

  test.close( 'dst:null' );

  /* */

  test.open( 'dst:string' );

  test.case = 'src:string';
  var expected = { '/z' : false, '/a/b' : false }
  var got = path.mapSupplement( '/z', '/a/b', false );
  test.identical( got, expected );

  test.case = 'src:array';
  var expected = { '/z' : false, '/a/b' : false, '/c/d' : false }
  var got = path.mapSupplement( '/z', [ '/a/b', '/c/d' ], false );
  test.identical( got, expected );

  test.case = 'src:map with null';
  var expected = { '/z' : false, '/a/b' : false, '/c/d' : false, '/true' : true, '/false' : false }
  var got = path.mapSupplement( '/z', { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, false );
  test.identical( got, expected );

  test.close( 'dst:string' );

  /* */

  test.open( 'dst:map' );

  test.case = 'src:string';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : false }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapSupplement( dst, '/a/b', false );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:array';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : false, '/c/d' : false }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapSupplement( dst, [ '/a/b', '/c/d' ], false );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:map with null';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : false, '/c/d' : false, '/true' : true, '/false' : false }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapSupplement( dst, { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, false );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/wasNull' : null }
  var dst = { '/wasTrue' : true, '/wasFalse' : false, '/wasNull' : null }
  var got = path.mapSupplement( dst, null, false );
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'dst:map' );

  /* */

  test.open( 'dst:map, collision' );

  test.case = 'dst is true';
  var exp = { '/One' : false, '/Zero' : true, '/True' : true, '/False' : true, '/Null' : true, '/String1' : true, '/String2' : true, '/Array' : true, '/Object' : true, '/EmptyArray1' : [], '/EmptyArray2' : [], '/EmptyArray3' : [] }
  var dst = { '/One' : 0, '/Zero' : 1, '/True' : true, '/False' : true, '/Null' : true, '/String1' : true, '/String2' : true, '/Array' : true, '/Object' : true, '/EmptyArray1' : [ '' ], '/EmptyArray2' : [], '/EmptyArray3' : [ null ] }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapSupplement( dst, src, false );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is false';
  var exp = { '/One' : true, '/Zero' : false, '/True' : false, '/False' : false, '/Null' : false, '/String1' : false, '/String2' : false, '/Array' : false, '/Object' : false, '/EmptyArray1' : false, '/EmptyArray2' : false, '/EmptyArray3' : false }
  var dst = { '/True' : false, '/False' : false, '/Null' : false, '/String1' : false, '/String2' : false, '/Array' : false, '/Object' : false }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapSupplement( dst, src, false );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is 1';
  var exp = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : true, '/Null' : true, '/String1' : true, '/String2' : true, '/Array' : true, '/Object' : true, '/EmptyArray1' : false, '/EmptyArray2' : false, '/EmptyArray3' : false }
  var dst = { '/True' : 1, '/False' : 1, '/Null' : 1, '/String1' : 1, '/String2' : 1, '/Array' : 1, '/Object' : 1 }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapSupplement( dst, src, false );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is 0';
  var exp = { '/True' : false, '/False' : false, '/Null' : false, '/String1' : false, '/String2' : false, '/Array' : false, '/Object' : false, '/One' : true, '/Zero' : false, '/EmptyArray1' : false, '/EmptyArray2' : false, '/EmptyArray3' : false };
  var dst = { '/True' : 0, '/False' : 0, '/Null' : 0, '/String1' : 0, '/String2' : 0, '/Array' : 0, '/Object' : 0 };
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapSupplement( dst, src, false );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is null';
  var exp = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : false, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : false, '/EmptyArray2' : false, '/EmptyArray3' : false };
  var dst = { '/True' : null, '/False' : null, '/Null' : null, '/String1' : null, '/String2' : null, '/Array' : null, '/Object' : null };
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapSupplement( dst, src, false );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is string';
  var exp = { '/True' : '/dir2', '/False' : '/dir2', '/Null' : '/dir2', '/String1' : '/dir2', '/String2' : '/dir2', '/Array' : '/dir2', '/Object' : '/dir2', '/One' : true, '/Zero' : false, '/EmptyArray1' : false, '/EmptyArray2' : false, '/EmptyArray3' : false };
  var dst = { '/True' : '/dir2', '/False' : '/dir2', '/Null' : '/dir2', '/String1' : '/dir2', '/String2' : '/dir2', '/Array' : '/dir2', '/Object' : '/dir2' };
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapSupplement( dst, src, false );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is array';
  var exp = { '/True' : [ '/dir2', '/dir3' ], '/False' : [ '/dir2', '/dir3' ], '/Null' : [ '/dir2', '/dir3' ], '/String1' : [ '/dir2', '/dir3' ], '/String2' : [ '/dir2', '/dir3' ], '/Array' : [ '/dir2', '/dir3' ], '/One' : true, '/Zero' : false, '/Object' : [ '/dir2', '/dir3' ], '/EmptyArray1' : false, '/EmptyArray2' : false, '/EmptyArray3' : false }
  var dst = { '/True' : [ '/dir2', '/dir3' ], '/False' : [ '/dir2', '/dir3' ], '/Null' : [ '/dir2', '/dir3' ], '/String1' : [ '/dir2', '/dir3' ], '/String2' : [ '/dir2', '/dir3' ], '/Array' : [ '/dir2', '/dir3' ], '/Object' : [ '/dir2', '/dir3' ] }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapSupplement( dst, src, false );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is object';
  var exp = { '/True' : obj0, '/False' : obj0, '/Null' : obj0, '/String1' : obj0, '/String2' : obj0, '/Array' : obj0, '/Object' : obj0, '/One' : true, '/Zero' : false, '/EmptyArray1' : false, '/EmptyArray2' : false, '/EmptyArray3' : false }
  var dst = { '/True' : obj0, '/False' : obj0, '/Null' : obj0, '/String1' : obj0, '/String2' : obj0, '/Array' : obj0, '/Object' : obj0 }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapSupplement( dst, src, false );
  test.identical( got, exp );
  test.true( got === dst );

  test.close( 'dst:map, collision' );

  /* - */

  test.close( 'defaultDstPath:false' )
  test.open( 'defaultDstPath:array' )

  /* - */

  test.open( 'dst:null' );

  test.case = 'src:string';
  var expected = { '/a/b' : [ '/dir2', '/dir3' ] }
  var got = path.mapSupplement( null, '/a/b', [ '/dir2', '/dir3' ] );
  test.identical( got, expected );

  test.case = 'src:array';
  var expected = { '/a/b' : [ '/dir2', '/dir3' ], '/c/d' : [ '/dir2', '/dir3' ] }
  var got = path.mapSupplement( null, [ '/a/b', '/c/d' ], [ '/dir2', '/dir3' ] );
  test.identical( got, expected );

  test.case = 'src:map with null';
  var expected = { '/a/b' : [ '/dir2', '/dir3' ], '/c/d' : [ '/dir2', '/dir3' ], '/true' : true, '/false' : false }
  var got = path.mapSupplement( null, { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, [ '/dir2', '/dir3' ] );
  test.identical( got, expected );

  test.close( 'dst:null' );

  /* */

  test.open( 'dst:string' );

  test.case = 'src:string';
  var expected = { '/z' : [ '/dir2', '/dir3' ], '/a/b' : [ '/dir2', '/dir3' ] }
  var got = path.mapSupplement( '/z', '/a/b', [ '/dir2', '/dir3' ] );
  test.identical( got, expected );

  test.case = 'src:array';
  var expected = { '/z' : [ '/dir2', '/dir3' ], '/a/b' : [ '/dir2', '/dir3' ], '/c/d' : [ '/dir2', '/dir3' ] }
  var got = path.mapSupplement( '/z', [ '/a/b', '/c/d' ], [ '/dir2', '/dir3' ] );
  test.identical( got, expected );

  test.case = 'src:map with null';
  var expected = { '/z' : [ '/dir2', '/dir3' ], '/a/b' : [ '/dir2', '/dir3' ], '/c/d' : [ '/dir2', '/dir3' ], '/true' : true, '/false' : false }
  var got = path.mapSupplement( '/z', { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, [ '/dir2', '/dir3' ] );
  test.identical( got, expected );

  test.close( 'dst:string' );

  /* */

  test.open( 'dst:map' );

  test.case = 'src:string';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : [ '/dir2', '/dir3' ] }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapSupplement( dst, '/a/b', [ '/dir2', '/dir3' ] );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:array';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : [ '/dir2', '/dir3' ], '/c/d' : [ '/dir2', '/dir3' ] }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapSupplement( dst, [ '/a/b', '/c/d' ], [ '/dir2', '/dir3' ] );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:map with null';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : [ '/dir2', '/dir3' ], '/c/d' : [ '/dir2', '/dir3' ], '/true' : true, '/false' : false }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapSupplement( dst, { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, [ '/dir2', '/dir3' ] );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/wasNull' : [ '/dir1', '/dir2' ] }
  var dst = { '/wasTrue' : true, '/wasFalse' : false, '/wasNull' : null }
  var got = path.mapSupplement( dst, null, [ '/dir1', '/dir2' ] );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, only bools';
  var expected = { '/wasTrue' : true, '/wasFalse' : false }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapSupplement( dst, null, [ '/dir1', '/dir2' ] );
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'dst:map' );

  /* */

  test.open( 'dst:map, collision' );

  test.case = 'dst is true';
  var exp = { '/One' : false, '/Zero' : true, '/True' : true, '/False' : true, '/Null' : true, '/String1' : true, '/String2' : true, '/Array' : true, '/Object' : true, '/EmptyArray1' : [], '/EmptyArray2' : [], '/EmptyArray3' : [] };
  var dst = { '/One' : 0, '/Zero' : 1, '/True' : true, '/False' : true, '/Null' : true, '/String1' : true, '/String2' : true, '/Array' : true, '/Object' : true, '/EmptyArray1' : [ '' ], '/EmptyArray2' : [], '/EmptyArray3' : [ null ] };
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapSupplement( dst, src, [ '/dir1', '/dir2' ] );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is false';
  var exp = { '/One' : true, '/Zero' : false, '/True' : false, '/False' : false, '/Null' : false, '/String1' : false, '/String2' : false, '/Array' : false, '/Object' : false, '/EmptyArray1' : [ '/dir1', '/dir2' ], '/EmptyArray2' : [ '/dir1', '/dir2' ], '/EmptyArray3' : [ '/dir1', '/dir2' ] }
  var dst = { '/True' : false, '/False' : false, '/Null' : false, '/String1' : false, '/String2' : false, '/Array' : false, '/Object' : false }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapSupplement( dst, src, [ '/dir1', '/dir2' ] );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is 1';
  var exp = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : true, '/Null' : true, '/String1' : true, '/String2' : true, '/Array' : true, '/Object' : true, '/EmptyArray1' : [ '/dir1', '/dir2' ], '/EmptyArray2' : [ '/dir1', '/dir2' ], '/EmptyArray3' : [ '/dir1', '/dir2' ] }
  var dst = { '/True' : 1, '/False' : 1, '/Null' : 1, '/String1' : 1, '/String2' : 1, '/Array' : 1, '/Object' : 1 }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapSupplement( dst, src, [ '/dir1', '/dir2' ] );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is 0';
  var exp = { '/One' : true, '/Zero' : false, '/True' : false, '/False' : false, '/Null' : false, '/String1' : false, '/String2' : false, '/Array' : false, '/Object' : false, '/EmptyArray1' : [ '/dir1', '/dir2' ], '/EmptyArray2' : [ '/dir1', '/dir2' ], '/EmptyArray3' : [ '/dir1', '/dir2' ] };
  var dst = { '/True' : 0, '/False' : 0, '/Null' : 0, '/String1' : 0, '/String2' : 0, '/Array' : 0, '/Object' : 0 }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : [ '/dir1', '/dir2' ], '/EmptyArray2' : [ '/dir1', '/dir2' ], '/EmptyArray3' : [ '/dir1', '/dir2' ] }
  var got = path.mapSupplement( dst, src, [ '/dir1', '/dir2' ] );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is null';
  var exp = { '/One' : true, '/Zero' : false, '/True' : [ '/dir1', '/dir2' ], '/False' : [ '/dir1', '/dir2' ], '/Null' : [ '/dir1', '/dir2' ], '/String1' : [ '/dir1', '/dir2' ], '/String2' : [ '/dir1', '/dir2' ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : [ '/dir1', '/dir2' ], '/EmptyArray1' : [ '/dir1', '/dir2' ], '/EmptyArray2' : [ '/dir1', '/dir2' ], '/EmptyArray3' : [ '/dir1', '/dir2' ] }
  var dst = { '/True' : null, '/False' : null, '/Null' : null, '/String1' : null, '/String2' : null, '/Array' : null, '/Object' : null }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapSupplement( dst, src, [ '/dir1', '/dir2' ] );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is string';
  var exp = { '/True' : '/dir2', '/False' : '/dir2', '/One' : true, '/Zero' : false, '/Null' : '/dir2', '/String1' : '/dir2', '/String2' : '/dir2', '/Array' : '/dir2', '/Object' : '/dir2', '/EmptyArray1' : [ '/dir1', '/dir2' ], '/EmptyArray2' : [ '/dir1', '/dir2' ], '/EmptyArray3' : [ '/dir1', '/dir2' ] };
  var dst = { '/True' : '/dir2', '/False' : '/dir2', '/Null' : '/dir2', '/String1' : '/dir2', '/String2' : '/dir2', '/Array' : '/dir2', '/Object' : '/dir2' }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapSupplement( dst, src, [ '/dir1', '/dir2' ] );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is array';
  var exp = { '/True' : [ '/dir2', '/dir3' ], '/False' : [ '/dir2', '/dir3' ], '/One' : true, '/Zero' : false, '/Null' : [ '/dir2', '/dir3' ], '/String1' : [ '/dir2', '/dir3' ], '/String2' : [ '/dir2', '/dir3' ], '/Array' : [ '/dir2', '/dir3' ], '/Object' : [ '/dir2', '/dir3' ], '/EmptyArray1' : [ '/dir1', '/dir2' ], '/EmptyArray2' : [ '/dir1', '/dir2' ], '/EmptyArray3' : [ '/dir1', '/dir2' ] };
  var dst = { '/True' : [ '/dir2', '/dir3' ], '/False' : [ '/dir2', '/dir3' ], '/Null' : [ '/dir2', '/dir3' ], '/String1' : [ '/dir2', '/dir3' ], '/String2' : [ '/dir2', '/dir3' ], '/Array' : [ '/dir2', '/dir3' ], '/Object' : [ '/dir2', '/dir3' ] };
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapSupplement( dst, src, [ '/dir1', '/dir2' ] );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is object';
  var exp = { '/True' : obj0, '/False' : obj0, '/Null' : obj0, '/String1' : obj0, '/String2' : obj0, '/Array' : obj0, '/Object' : obj0, '/One' : true, '/Zero' : false, '/EmptyArray1' : [ '/dir1', '/dir2' ], '/EmptyArray2' : [ '/dir1', '/dir2' ], '/EmptyArray3' : [ '/dir1', '/dir2' ] };
  var dst = { '/True' : obj0, '/False' : obj0, '/Null' : obj0, '/String1' : obj0, '/String2' : obj0, '/Array' : obj0, '/Object' : obj0 }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapSupplement( dst, src, [ '/dir1', '/dir2' ] );
  test.identical( got, exp );
  test.true( got === dst );

  test.close( 'dst:map, collision' );

  /* - */

  test.close( 'defaultDstPath:array' )
  test.open( 'defaultDstPath:obj' )

  /* - */

  test.open( 'dst:null' );

  test.case = 'src:string';
  var expected = { '/a/b' : obj2 }
  var got = path.mapSupplement( null, '/a/b', obj2 );
  test.identical( got, expected );

  test.case = 'src:array';
  var expected = { '/a/b' : obj2, '/c/d' : obj2 }
  var got = path.mapSupplement( null, [ '/a/b', '/c/d' ], obj2 );
  test.identical( got, expected );

  test.case = 'src:map with null';
  var expected = { '/a/b' : obj2, '/c/d' : obj2, '/true' : true, '/false' : false }
  var got = path.mapSupplement( null, { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, obj2 );
  test.identical( got, expected );

  test.close( 'dst:null' );

  /* */

  test.open( 'dst:string' );

  test.case = 'src:string';
  var expected = { '/z' : obj2, '/a/b' : obj2 }
  var got = path.mapSupplement( '/z', '/a/b', obj2 );
  test.identical( got, expected );

  test.case = 'src:array';
  var expected = { '/z' : obj2, '/a/b' : obj2, '/c/d' : obj2 }
  var got = path.mapSupplement( '/z', [ '/a/b', '/c/d' ], obj2 );
  test.identical( got, expected );

  test.case = 'src:map with null';
  var expected = { '/z' : obj2, '/a/b' : obj2, '/c/d' : obj2, '/true' : true, '/false' : false }
  var got = path.mapSupplement( '/z', { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, obj2 );
  test.identical( got, expected );

  test.close( 'dst:string' );

  /* */

  test.open( 'dst:map' );

  test.case = 'src:string';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : obj2 }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapSupplement( dst, '/a/b', obj2 );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:array';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : obj2, '/c/d' : obj2 }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapSupplement( dst, [ '/a/b', '/c/d' ], obj2 );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:map with null';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : obj2, '/c/d' : obj2, '/true' : true, '/false' : false }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapSupplement( dst, { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, obj2 );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/wasNull' : obj2 }
  var dst = { '/wasTrue' : true, '/wasFalse' : false, '/wasNull' : null }
  var got = path.mapSupplement( dst, null, obj2 );
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'dst:map' );

  /* */

  test.open( 'dst:map, collision' );

  test.case = 'dst is true';
  var exp = { '/One' : false, '/Zero' : true, '/True' : true, '/False' : true, '/Null' : true, '/String1' : true, '/String2' : true, '/Array' : true, '/Object' : true, '/EmptyArray1' : [], '/EmptyArray2' : [], '/EmptyArray3' : [] }
  var dst = { '/One' : 0, '/Zero' : 1, '/True' : true, '/False' : true, '/Null' : true, '/String1' : true, '/String2' : true, '/Array' : true, '/Object' : true, '/EmptyArray1' : [ '' ], '/EmptyArray2' : [], '/EmptyArray3' : [ null ] }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapSupplement( dst, src, obj2 );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is false';
  var exp = { '/One' : true, '/Zero' : false, '/True' : false, '/False' : false, '/Null' : false, '/String1' : false, '/String2' : false, '/Array' : false, '/Object' : false, '/EmptyArray1' : obj2, '/EmptyArray2' : obj2, '/EmptyArray3' : obj2 }
  var dst = { '/True' : false, '/False' : false, '/Null' : false, '/String1' : false, '/String2' : false, '/Array' : false, '/Object' : false }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapSupplement( dst, src, obj2 );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is 1';
  var exp = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : true, '/Null' : true, '/String1' : true, '/String2' : true, '/Array' : true, '/Object' : true, '/EmptyArray1' : obj2, '/EmptyArray2' : obj2, '/EmptyArray3' : obj2 }
  var dst = { '/True' : 1, '/False' : 1, '/Null' : 1, '/String1' : 1, '/String2' : 1, '/Array' : 1, '/Object' : 1 }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapSupplement( dst, src, obj2 );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is 0';
  var exp = { '/One' : true, '/Zero' : false, '/True' : false, '/False' : false, '/Null' : false, '/String1' : false, '/String2' : false, '/Array' : false, '/Object' : false, '/EmptyArray1' : obj2, '/EmptyArray2' : obj2, '/EmptyArray3' : obj2 }
  var dst = { '/True' : 0, '/False' : 0, '/Null' : 0, '/String1' : 0, '/String2' : 0, '/Array' : 0, '/Object' : 0 }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapSupplement( dst, src, obj2 );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is null';
  var exp = { '/One' : true, '/Zero' : false, '/True' : obj2, '/False' : obj2, '/Null' : obj2, '/String1' : obj2, '/String2' : obj2, '/Array' : obj2, '/Object' : obj2, '/EmptyArray1' : obj2, '/EmptyArray2' : obj2, '/EmptyArray3' : obj2 }
  var dst = { '/True' : null, '/False' : null, '/Null' : null, '/String1' : null, '/String2' : null, '/Array' : null, '/Object' : null }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapSupplement( dst, src, obj2 );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is string';
  var exp = { '/True' : '/dir2', '/False' : '/dir2', '/Null' : '/dir2', '/String1' : '/dir2', '/String2' : '/dir2', '/Array' : '/dir2', '/Object' : '/dir2', '/One' : true, '/Zero' : false, '/EmptyArray1' : obj2, '/EmptyArray2' : obj2, '/EmptyArray3' : obj2 };
  var dst = { '/True' : '/dir2', '/False' : '/dir2', '/Null' : '/dir2', '/String1' : '/dir2', '/String2' : '/dir2', '/Array' : '/dir2', '/Object' : '/dir2' }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapSupplement( dst, src, obj2 );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is array';
  var exp = { '/True' : [ '/dir2', '/dir3' ], '/False' : [ '/dir2', '/dir3' ], '/Null' : [ '/dir2', '/dir3' ], '/String1' : [ '/dir2', '/dir3' ], '/String2' : [ '/dir2', '/dir3' ], '/Array' : [ '/dir2', '/dir3' ], '/Object' : [ '/dir2', '/dir3' ], '/One' : true, '/Zero' : false, '/EmptyArray1' : obj2, '/EmptyArray2' : obj2, '/EmptyArray3' : obj2 }
  var dst = { '/True' : [ '/dir2', '/dir3' ], '/False' : [ '/dir2', '/dir3' ], '/Null' : [ '/dir2', '/dir3' ], '/String1' : [ '/dir2', '/dir3' ], '/String2' : [ '/dir2', '/dir3' ], '/Array' : [ '/dir2', '/dir3' ], '/Object' : [ '/dir2', '/dir3' ] }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapSupplement( dst, src, obj2 );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is object';
  var exp = { '/True' : obj0, '/False' : obj0, '/Null' : obj0, '/String1' : obj0, '/String2' : obj0, '/Array' : obj0, '/Object' : obj0, '/One' : true, '/Zero' : false, '/EmptyArray1' : obj2, '/EmptyArray2' : obj2, '/EmptyArray3' : obj2 }
  var dst = { '/True' : obj0, '/False' : obj0, '/Null' : obj0, '/String1' : obj0, '/String2' : obj0, '/Array' : obj0, '/Object' : obj0 }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapSupplement( dst, src, obj2 );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is the same object';
  var exp = { '/True' : true, '/False' : obj0, '/Null' : obj0, '/String1' : obj0, '/String2' : obj0, '/Array' : obj0, '/Object' : obj0 }
  var dst = { '/True' : true, '/False' : obj0, '/Null' : obj0, '/String1' : obj0, '/String2' : obj0, '/Array' : obj0, '/Object' : obj0 }
  var src = { '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj0 }
  var got = path.mapSupplement( dst, src, obj0 );
  test.identical( got, exp );
  test.true( got === dst );

  test.close( 'dst:map, collision' );

  test.close( 'defaultDstPath:obj' )

  /* - */

  test.open( 'throwing' )

  test.case = 'dstMap=null, srcMap=null, dstPath=map';
  var dstMap = null;
  var srcMap = null;
  var dstPath = { '/True' : true, '/False' : false, '/Zero' : 0, '/One' : 1, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  test.shouldThrowErrorSync( () => path.mapSupplement( dstMap, srcMap, dstPath ) );
  test.shouldThrowErrorSync( () => path.mapSupplement( {}, {}, {} ) );
  test.shouldThrowErrorSync( () => path.mapSupplement() );
  test.shouldThrowErrorSync( () => path.mapSupplement( dstMap, srcMap, dstPath, {} ) );

  test.close( 'throwing' )

}

//

function mapAppend( test )
{
  let path = _.path;
  function constr( src )
  {
    this.value = src;
    return this;
  }
  let obj0 = new constr( 0 );
  let obj1 = new constr( 1 );
  let obj2 = new constr( 2 );

  /* - */

  test.case = 'no override of empty string by boolean';
  var expected = { '.' : '', '**/.git/**' : false };
  var dstMap = { '.' : '' };
  var srcMap = '**/.git/**';
  var dstPath = false;
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dst is map, src is null, dstPath is str';
  var expected = { '/src' : '/dst' };
  var dstMap = { '/src' : '/dst' };
  var srcMap = null;
  var dstPath = '/dst2';
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dst is map with empty str in src, src is map with empty str in src, dstPath is str';
  var expected = { '/src' : '/dst', '' : '/dst3' };
  var dstMap = { '/src' : '/dst' };
  var srcMap = { '' : '/dst3' };
  var dstPath = '/dst2';
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  /* - */

  test.open( 'single argument' );

  test.case = 'null';
  var expected = {};
  var dstMap = null;
  var got = path.mapAppend( dstMap );
  test.identical( got, expected );

  test.case = 'empty string';
  var expected = {};
  var dstMap = '';
  var got = path.mapAppend( dstMap );
  test.identical( got, expected );

  test.case = 'string';
  var expected = { '/src' : '' };
  var dstMap = '/src';
  var got = path.mapAppend( dstMap );
  test.identical( got, expected );

  test.case = 'array';
  var expected = { 'null' : '', 'false' : '', 'true' : '', 'str' : '' };
  var dstMap = [ null, '', false, true, 'str' ];
  var got = path.mapAppend( dstMap );
  test.identical( got, expected );

  test.case = 'map';
  var expected = { '/src' : '', '/false' : false, '/true' : true, '/string' : 'str' };
  var dstMap = { '/src' : null, '' : '', '/false' : false, '/true' : true, '/string' : 'str' };
  var got = path.mapAppend( dstMap );
  test.identical( got, expected );

  test.close( 'single argument' );

  /* - */

  test.case = 'temp';
  var expected = { '/src' : '/dst' };
  var dstMap = { '/src' : '/dst' };
  var srcMap = null;
  var dstPath = '/dst2';
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'temp';
  var expected = { '/src' : '/dst', '' : '/dst3' };
  var dstMap = { '/src' : '/dst' };
  var srcMap = { '' : '/dst3' };
  var dstPath = '/dst2';
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  /* - */

  test.case = 'dstMap=null, srcMap=null, dstPath=undefined';
  var expected = {};
  var dstMap = null;
  var srcMap = null;
  var dstPath = undefined;
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=empty, srcMap=null, dstPath=undefined';
  var expected = {};
  var dstMap = '';
  var srcMap = null;
  var dstPath = undefined;
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=null, srcMap=empty, dstPath=undefined';
  var expected = {};
  var dstMap = null;
  var srcMap = '';
  var dstPath = undefined;
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=empty, srcMap=empty, dstPath=undefined';
  var expected = {};
  var dstMap = '';
  var srcMap = '';
  var dstPath = undefined;
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=null, srcMap=null, dstPath=null';
  var expected = {};
  var dstMap = null;
  var srcMap = null;
  var dstPath = null;
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=empty, srcMap=null, dstPath=null';
  var expected = {};
  var dstMap = '';
  var srcMap = null;
  var dstPath = null;
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=null, srcMap=empty, dstPath=null';
  var expected = {};
  var dstMap = null;
  var srcMap = '';
  var dstPath = null;
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=empty, srcMap=empty, dstPath=null';
  var expected = {};
  var dstMap = '';
  var srcMap = '';
  var dstPath = null;
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=null, srcMap=null, dstPath=empty';
  var expected = {};
  var dstMap = null;
  var srcMap = null;
  var dstPath = '';
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=empty, srcMap=null, dstPath=empty';
  var expected = {};
  var dstMap = '';
  var srcMap = null;
  var dstPath = '';
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=null, srcMap=empty, dstPath=empty';
  var expected = {};
  var dstMap = null;
  var srcMap = '';
  var dstPath = '';
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=empty, srcMap=empty, dstPath=empty';
  var expected = {};
  var dstMap = '';
  var srcMap = '';
  var dstPath = '';
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  /* */

  test.case = 'dstMap=map with only src dot, srcMap=map with bools, dstPath=undefined';
  var expected = { '.' : '', 'a' : true, 'b' : false };
  var dstMap = { '.' : '' };
  var srcMap = { 'a' : true, 'b' : false };
  var dstPath = undefined;
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with only dst dot, srcMap=map with bools, dstPath=undefined';
  var expected = { '' : '.', 'a' : true, 'b' : false };
  var dstMap = { '' : '.' };
  var srcMap = { 'a' : true, 'b' : false };
  var dstPath = undefined;
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with only src and dst dot, srcMap=map with bools, dstPath=undefined';
  var expected = { '.' : '.', 'a' : true, 'b' : false };
  var dstMap = { '.' : '.' };
  var srcMap = { 'a' : true, 'b' : false };
  var dstPath = undefined;
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=is dot, srcMap=map with bools, dstPath=undefined';
  var expected = { '.' : '', 'a' : true, 'b' : false };
  var dstMap = '.';
  var srcMap = { 'a' : true, 'b' : false };
  var dstPath = undefined;
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=is empty, srcMap=map with bools, dstPath=undefined';
  var expected = { 'a' : true, 'b' : false };
  var dstMap = '';
  var srcMap = { 'a' : true, 'b' : false };
  var dstPath = undefined;
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  /* */

  test.case = 'dstMap=str, srcMap=str, dstPath=undefined';
  var expected = { '/dir/**' : true, '/dir/doubledir/d1/**' : true, '/dir/**/**b**' : false, '/dir/doubledir/d1/**/**b**' : false };
  var dstMap = { '/dir/**' : true, '/dir/doubledir/d1/**' : true, '/dir/**/**b**' : false, '/dir/doubledir/d1/**/**b**' : false };
  var srcMap = [ '/dir/**', '/dir/doubledir/d1/**' ];
  var dstPath = '';
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=str, srcMap=str, dstPath=undefined';
  var expected = { '/' : '/dst' }
  var dstMap = null;
  var srcMap = { '/' : '' };
  var dstPath = '/dst';
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=str, srcMap=str, dstPath=undefined';
  var expected = { 'a' : '', 'b' : '' }
  var dstMap = 'a';
  var srcMap = 'b';
  var got = path.mapAppend( dstMap, srcMap );
  test.identical( got, expected );

  test.case = 'dstMap=str, srcMap=str, dstPath=null';
  var expected = { 'a' : '', 'b' : '' }
  var dstMap = 'a';
  var srcMap = 'b';
  var got = path.mapAppend( dstMap, srcMap, null );
  test.identical( got, expected );

  test.case = 'dstMap=str, srcMap=str, dstPath=str';
  var expected = { 'a' : 'c', 'b' : 'c' }
  var dstMap = 'a';
  var srcMap = 'b';
  var got = path.mapAppend( dstMap, srcMap, 'c' );
  test.identical( got, expected );

  test.case = 'dstMap=null, srcMap=null, dstPath=str';
  var expected = {}
  var dstMap = null;
  var srcMap = null;
  var dstPath = '/dst';
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=null, srcMap=null in arr, dstPath=str';
  var expected = {}
  var dstMap = null;
  var srcMap = [ null ];
  var dstPath = '/dst';
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=null, srcMap=map, dstPath=null';
  var expected = { '/src' : '/dst' }
  var dstMap = null;
  var srcMap = { '/src' : '/dst' };
  var dstPath = null;
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=map, srcMap=str, dstPath=null';
  var expected = { '/src' : '/dst' }
  var dstMap = { '/src' : '/dst' };
  var srcMap = '/src';
  var dstPath = null;
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map, srcMap=str, dstPath=null';
  var expected = { '/src' : [ '/dst', '/dst2' ] };
  var dstMap = { '/src' : '/dst' };
  var srcMap = '/src';
  var dstPath = '/dst2';
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  /* - */

  test.case = 'dstMap=map with dot in src, srcMap=map, dstPath=null';
  var expected = { '.' : '', 'x' : '', 'y' : '', '/a/b1' : '', '/a/b2' : '' };
  var dstMap = { '.' : null, 'x' : null, 'y' : '' };
  var srcMap = { '/a/b1' : null, '/a/b2' : null };
  var dstPath = null;
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with dot in src, srcMap=map, dstPath=null';
  var expected = { '.' : '', '/a/b1' : '', '/a/b2' : '' };
  var dstMap = { '.' : null };
  var srcMap = { '/a/b1' : null, '/a/b2' : null };
  var dstPath = null;
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty in src, srcMap=map, dstPath=null';
  var expected = { '/a/b1' : '', '/a/b2' : '' };
  var dstMap = { '' : null };
  var srcMap = { '/a/b1' : null, '/a/b2' : null };
  var dstPath = null;
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty in src and dst, srcMap=map, dstPath=null';
  var expected = { '/a/b1' : '', '/a/b2' : '' };
  var dstMap = { '' : '' };
  var srcMap = { '/a/b1' : null, '/a/b2' : null };
  var dstPath = null;
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=dot str, srcMap=map, dstPath=null';
  var expected = { '.' : '', '/a/b1' : '', '/a/b2' : '' };
  var dstMap = '.';
  var srcMap = { '/a/b1' : null, '/a/b2' : null };
  var dstPath = null;
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  /* - */

  test.case = 'dstMap=map, srcMap=empty, dstPath=str';
  var expected = { '/src1' : '/dst', '/src2' : '/dst' };
  var dstMap = { '/src1' : null, '/src2' : '' };
  var srcMap = '';
  var dstPath = '/dst';
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map, srcMap=str, dstPath=str, rewrite';
  var expected = { '/src1' : [ '/dst1', '/dst2' ], '/src2' : '/dst1' };
  var dstMap = { '/src1' : [ '/dst1', '/dst2' ], '/src2' : '/dst1' };
  var srcMap = '/src1';
  var dstPath = '/dst2';
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map, srcMap=src, dstPath=str, rewrite';
  var expected = { '/src1' : [ '/dst1', '/dst2' ], '/src2' : [ '/dst1' ] };
  var dstMap = { '/src1' : [ '/dst1', '/dst2' ], '/src2' : '/dst1' };
  var srcMap = { '/src1' : [ '/dst1', '/dst2' ], '/src2' : '/dst1' };
  var dstPath = '/dst2';
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map, srcMap=map, dstPath=str, rewrite';
  var expected = { '/src1' : [ '/dst1', '/dst2' ], '/src2' : [ '/dst1', '/dst3' ] };
  var dstMap = { '/src1' : '/dst1', '/src2' : '/dst1' };
  var srcMap = { '/src1' : null, '/src2' : '/dst3' };
  var dstPath = '/dst2';
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map, srcMap=map, dstPath=str, rewrite';
  var expected = { '/src1' : [ '/dst1', '/dst2' ], '/src2' : [ '/dst1', '/dst3' ] };
  var dstMap = { '/src1' : '/dst1', '/src2' : '/dst1' };
  var srcMap = { '/src1' : null, '/src2' : '/dst3' };
  var dstPath = '/dst2';
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map, srcMap=null, dstPath=str';
  var expected = { '/src1' : '/dst', '/src2' : '/dst' };
  var dstMap = { '/src1' : null, '/src2' : '' };
  var srcMap = null;
  var dstPath = '/dst';
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=null, dstPath=str';
  var expected = { '' : '/dst2' };
  var dstMap = { '' : '/dst2' };
  var srcMap = null;
  var dstPath = '/dst2';
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=null, dstPath=null';
  var expected = { '' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = null;
  var dstPath = null;
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=empty, dstPath=null';
  var expected = { '' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = '';
  var dstPath = null;
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=string, dstPath=null';
  var expected = { '/src' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = '/src';
  var dstPath = null;
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=array, dstPath=null';
  var expected = { '/src1' : '/dst', '/src2' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = [ '/src1', '/src2' ];
  var dstPath = null;
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=empty array, dstPath=null';
  var expected = { '' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = [];
  var dstPath = null;
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=empty map, dstPath=null';
  var expected = { '' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = {};
  var dstPath = null;
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=empty str, dstPath=null';
  var expected = { '' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = '';
  var dstPath = null;
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=empty str, dstPath=empty str';
  var expected = { '' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = '';
  var dstPath = '';
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=not normal empty map, dstPath=null';
  var expected = { '' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = { '' : '' };
  var dstPath = null;
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=map with only src, dstPath=null';
  var expected = { '/src1' : '/dst', '/src2' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = { '/src1' : null, '/src2' : null };
  var dstPath = null;
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=map, dstPath=null';
  var expected = { '/null' : '/dst', '/str' : '/dst2', '/empty1' : '/dst', '/empty2' : '/dst', '/true' : true, '/false' : false };
  var dstMap = { '' : '/dst' };
  var srcMap = { '/null' : null, '/str' : '/dst2', '/empty1' : '', '/empty2' : [ '' ], '/true' : true, '/false' : false };
  var dstPath = null;
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=not normal empty map, dstPath=empty str';
  var expected = { '' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = { '' : '' };
  var dstPath = '';
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=map with only src, dstPath=empty str';
  var expected = { '/src1' : '/dst', '/src2' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = { '/src1' : null, '/src2' : null };
  var dstPath = '';
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=map, dstPath=empty str';
  var expected = { '/null' : '/dst', '/str' : '/dst2', '/empty1' : '/dst', '/empty2' : '/dst', '/true' : true, '/false' : false };
  var dstMap = { '' : '/dst' };
  var srcMap = { '/null' : null, '/str' : '/dst2', '/empty1' : '', '/empty2' : [ '' ], '/true' : true, '/false' : false };
  var dstPath = '';
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=map, dstPath=str';
  var expected = { '/null' : '/dstx', '/str' : '/dst2', '/empty1' : '/dstx', '/empty2' : '/dstx', '/true' : true, '/false' : false, '' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = { '/null' : null, '/str' : '/dst2', '/empty1' : '', '/empty2' : [ '' ], '/true' : true, '/false' : false };
  var dstPath = '/dstx';
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=map, dstPath=str, same as in dst map';
  var expected = { '/null' : '/dst', '/str' : '/dst2', '/empty1' : '/dst', '/empty2' : '/dst', '/true' : true, '/false' : false };
  var dstMap = { '' : '/dst' };
  var srcMap = { '/null' : null, '/str' : '/dst2', '/empty1' : '', '/empty2' : [ '' ], '/true' : true, '/false' : false };
  var dstPath = '/dst';
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=map, dstPath=null';
  var expected = { '' : '/dst', '/src1' : '/dst1', '/src2' : '/dst2' };
  var dstMap = { '' : '/dst' };
  var srcMap = { '/src1' : '/dst1', '/src2' : '/dst2' };
  var dstPath = null;
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  // test.case = 'dstMap=map with empty src, srcMap=complex map, dstPath=null';
  // var expected = { "" : "/dst", '/True' : true, '/False' : false, '/Zero' : false, '/One' : true, '/Null' : '/dst', '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  // var dstMap = { "" : "/dst" };
  // var srcMap = { '' : null, '/True' : true, '/False' : false, '/Zero' : 0, '/One' : 1, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  // var dstPath = null;
  // var got = path.mapAppend( dstMap, srcMap, dstPath );
  // test.identical( got, expected );

  test.case = 'dstMap=map with empty src, srcMap=string, dstPath=string';
  var expected = { '' : '/dst', '/src' : '/dst2' };
  var dstMap = { '' : '/dst' };
  var srcMap = '/src';
  var dstPath = '/dst2';
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  /* - */

  test.open( 'src<>map, dst<>map' );

  test.case = 'src=str, dst=str, dstPath=null';
  var expected = { '/a' : '', '/b' : '' }
  var dstMap = '/a';
  var srcMap = '/b';
  var dstPath = null;
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'src=arr, dst=str, dstPath=arr';
  var expected = { '/a' : '', '/b' : '' }
  var dstMap = '/a';
  var srcMap = [ '/b' ];
  var dstPath = [ null ];
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'src=arr, dst=arr, dstPath=arr';
  var expected = { '/a' : '', '/b' : '' }
  var dstMap = [ '/a' ];
  var srcMap = [ '/b' ];
  var dstPath = [ null ];
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'src=str, dst=str, dstPath=null';
  var expected = { '/a' : '', '/b' : '' }
  var dstMap = '/a';
  var srcMap = '/b';
  var dstPath = '';
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'src=arr, dst=str, dstPath=arr';
  var expected = { '/a' : '', '/b' : '' }
  var dstMap = '/a';
  var srcMap = [ '/b' ];
  var dstPath = [ '' ];
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'src=arr, dst=arr, dstPath=arr';
  var expected = { '/a' : '', '/b' : '' }
  var dstMap = [ '/a' ];
  var srcMap = [ '/b' ];
  var dstPath = [ '' ];
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.close( 'src<>map, dst<>map' );

  /* - */

  test.open( 'defaultDstPath:true' );

  /* - */

  test.open( 'dst:null' );

  test.case = 'src:string';
  var expected = { '/a/b' : true }
  var got = path.mapAppend( null, '/a/b', true );
  test.identical( got, expected );

  test.case = 'src:array';
  var expected = { '/a/b' : true, '/c/d' : true }
  var got = path.mapAppend( null, [ '/a/b', '/c/d' ], true );
  test.identical( got, expected );

  test.case = 'src:map with null';
  var expected = { '/a/b' : true, '/c/d' : true, '/true' : true, '/false' : false }
  var got = path.mapAppend( null, { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, true );
  test.identical( got, expected );

  test.close( 'dst:null' );

  /* */

  test.open( 'dst:string' );

  test.case = 'src:string';
  var expected = { '/z' : true, '/a/b' : true }
  var got = path.mapAppend( '/z', '/a/b', true );
  test.identical( got, expected );

  test.case = 'src:array';
  var expected = { '/z' : true, '/a/b' : true, '/c/d' : true }
  var got = path.mapAppend( '/z', [ '/a/b', '/c/d' ], true );
  test.identical( got, expected );

  test.case = 'src:map with null';
  var expected = { '/z' : true, '/a/b' : true, '/c/d' : true, '/true' : true, '/false' : false }
  var got = path.mapAppend( '/z', { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, true );
  test.identical( got, expected );

  test.close( 'dst:string' );

  /* */

  test.open( 'no dstPath' );

  test.case = 'no orphan';
  var expected = { '/One' : true, '/Str' : 'str', '/EmptyString1' : '', '/EmptyString2' : '', '/Null1' : '', '/Null2' : '' }
  var dst = { '/One' : 1, '/EmptyString1' : '', '/Null1' : null }
  var src = { '/One' : 0, '/Str' : 'str', '/EmptyString2' : '', '/Null2' : null }
  var got = path.mapAppend( dst, src );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'dst has orphan';
  var expected = { '/One' : true, '/Str' : 'str', '/EmptyString1' : '/dst', '/EmptyString2' : '/dst', '/Null1' : '/dst', '/Null2' : '/dst' }
  var dst = { '/One' : 1, '/EmptyString1' : '', '/Null1' : null, '' : '/dst' }
  var src = { '/One' : 0, '/Str' : 'str', '/EmptyString2' : '', '/Null2' : null }
  var got = path.mapAppend( dst, src );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src has orphan';
  var expected = { '/One' : true, '/Str' : 'str', '/EmptyString1' : '/dst', '/EmptyString2' : '/dst', '/Null1' : '/dst', '/Null2' : '/dst' }
  var dst = { '/One' : 1, '/EmptyString1' : '', '/Null1' : null }
  var src = { '/One' : 0, '/Str' : 'str', '/EmptyString2' : '', '/Null2' : null, '' : '/dst' }
  var got = path.mapAppend( dst, src );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'dst has orphan, no place for it';
  var expected = { '/One' : true, '' : '/dst' }
  var dst = { '/One' : 1, '' : '/dst' }
  var src = { '/One' : 0 }
  var got = path.mapAppend( dst, src );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src has orphan, no place for it';
  var expected = { '/One' : true, '' : '/dst' }
  var dst = { '/One' : 1 }
  var src = { '/One' : 0, '' : '/dst' }
  var got = path.mapAppend( dst, src );
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'no dstPath' )

  test.close( 'defaultDstPath:true' );

  /* */

  test.open( 'src:null' )

  test.case = 'src:null, dstPath:str';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '/dstx', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = '/dstx'
  var got = path.mapAppend( dst, null, dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:null';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapAppend( dst, null, null );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty str';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapAppend( dst, null, '' );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 1';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [];
  var got = path.mapAppend( dst, null, dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 2';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ '', '' ];
  var got = path.mapAppend( dst, null, dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 2';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ null, null ];
  var got = path.mapAppend( dst, null, dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:true';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapAppend( dst, null, true );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:false';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapAppend( dst, null, false );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:array';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : [ '/a', '/b' ], '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ '/a', '/b' ]
  var got = path.mapAppend( dst, null, dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'src:null' )

  /* */

  test.open( 'src:empty str' )

  test.case = 'src:null, dstPath:str';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '/dstx', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = '/dstx'
  var got = path.mapAppend( dst, '', dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:null';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapAppend( dst, '', null );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty str';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapAppend( dst, '', '' );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 1';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [];
  var got = path.mapAppend( dst, '', dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 2';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ '', '' ];
  var got = path.mapAppend( dst, '', dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 2';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ null, null ];
  var got = path.mapAppend( dst, '', dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:true';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapAppend( dst, '', true );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:false';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' :  [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapAppend( dst, '', false );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:array';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : [ '/a', '/b' ], '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ '/a', '/b' ]
  var got = path.mapAppend( dst, '', dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'src:empty str' )

  /* */

  test.open( 'src:empty arr' )

  test.case = 'src:null, dstPath:str';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '/dstx', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = '/dstx'
  var got = path.mapAppend( dst, [ '', null, '' ], dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:null';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapAppend( dst, [ '', null, '' ], null );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty str';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapAppend( dst, [ '', null, '' ], '' );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 1';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [];
  var got = path.mapAppend( dst, [ '', null, '' ], dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 2';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ '', '' ];
  var got = path.mapAppend( dst, [ '', null, '' ], dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 2';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ null, null ];
  var got = path.mapAppend( dst, [ '', null, '' ], dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:true';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapAppend( dst, [ '', null, '' ], true );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:false';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapAppend( dst, [ '', null, '' ], false );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:array';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : [ '/a', '/b' ], '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ '/a', '/b' ];
  var got = path.mapAppend( dst, [ '', null, '' ], dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'src:empty arr' )

  /* */

  test.open( 'src:empty map' )

  test.case = 'src:null, dstPath:str';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '/dstx', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = '/dstx'
  var got = path.mapAppend( dst, { '' : '' }, dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:null';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapAppend( dst, { '' : '' }, null );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty str';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapAppend( dst, { '' : '' }, '' );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 1';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [];
  var got = path.mapAppend( dst, { '' : '' }, dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 2';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ '', '' ];
  var got = path.mapAppend( dst, { '' : '' }, dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 2';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ null, null ];
  var got = path.mapAppend( dst, { '' : '' }, dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:true';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapAppend( dst, { '' : '' }, true );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:false';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapAppend( dst, { '' : '' }, false );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:array';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : [ '/a', '/b' ], '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ '/a', '/b' ];
  var got = path.mapAppend( dst, { '' : '' }, dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'src:empty map' )

  /* */

  test.open( 'dst:map' );

  test.case = 'src:string';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : true }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapAppend( dst, '/a/b', true );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:array';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : true, '/c/d' : true }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapAppend( dst, [ '/a/b', '/c/d' ], true );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:array';
  var expected = { '/wasTrue' : true, '/wasFalse' : false }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapAppend( dst, [ '/wasTrue', '/wasFalse' ], true );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:map with null';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : true, '/c/d' : true }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapAppend( dst, { '/a/b' : null, '/c/d' : null }, true );
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'dst:map' );

  test.open( 'dst:map, collision' );

  test.case = 'dst is true';
  var exp = { '/One' : false, '/Zero' : true, '/True' : true, '/False' : true, '/Null' : true, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : [], '/EmptyArray2' : [], '/EmptyArray3' : [] }
  var dst = { '/One' : 0, '/Zero' : 1, '/True' : true, '/False' : true, '/Null' : true, '/String1' : true, '/String2' : true, '/Array' : true, '/Object' : true, '/EmptyArray1' : [ '' ], '/EmptyArray2' : [], '/EmptyArray3' : [ null ] }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapAppend( dst, src, true );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is false';
  var exp = { '/One' : true, '/Zero' : false, '/True' : false, '/False' : false, '/Null' : false, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : true, '/EmptyArray2' : true, '/EmptyArray3' : true }
  var dst = { '/True' : false, '/False' : false, '/Null' : false, '/String1' : false, '/String2' : false, '/Array' : false, '/Object' : false }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapAppend( dst, src, true );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is 1';
  var exp = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : true, '/Null' : true, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : true, '/EmptyArray2' : true, '/EmptyArray3' : true }
  var dst = { '/True' : 1, '/False' : 1, '/Null' : 1, '/String1' : 1, '/String2' : 1, '/Array' : 1, '/Object' : 1 }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapAppend( dst, src, true );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is 0';
  var exp = { '/One' : true, '/Zero' : false, '/True' : false, '/False' : false, '/Null' : false, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : true, '/EmptyArray2' : true, '/EmptyArray3' : true }
  var dst = { '/True' : 0, '/False' : 0, '/Null' : 0, '/String1' : 1, '/String2' : 0, '/Array' : 0, '/Object' : 0 }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapAppend( dst, src, true );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is null';
  var exp = { '/One' : true, '/Zero' : false, '/True' : false, '/False' : false, '/Null' : true, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : true, '/EmptyArray2' : true, '/EmptyArray3' : true }
  var dst = { '/True' : null, '/False' : null, '/Null' : null, '/String1' : null, '/String2' : null, '/Array' : null, '/Object' : null }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : false, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapAppend( dst, src, true );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is string';
  var exp = { '/One' : true, '/Zero' : false, '/True' : '/dir2', '/False' : '/dir2', '/Null' : '/dir2', '/String1' : [ '/dir2', '/dir1' ], '/String2' : [ '/dir2' ], '/Array' : [ '/dir2', '/dir1' ], '/Object' : [ '/dir2', obj1 ], '/EmptyArray1' : true, '/EmptyArray2' : true, '/EmptyArray3' : true };
  var dst = { '/True' : '/dir2', '/False' : '/dir2', '/Null' : '/dir2', '/String1' : '/dir2', '/String2' : '/dir2', '/Array' : '/dir2', '/Object' : '/dir2' };
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapAppend( dst, src, true );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is array';
  var exp = { '/True' : [ '/dir2', '/dir3' ], '/False' : [ '/dir2', '/dir3' ], '/Null' : [ '/dir2', '/dir3' ], '/String1' : [ '/dir2', '/dir3', '/dir1' ], '/String2' : [ '/dir2', '/dir3' ], '/Array' : [ '/dir2', '/dir3', '/dir1' ], '/Object' : [ 'dst1', 'dst2', obj1 ], '/One' : true, '/Zero' : false, '/EmptyArray1' : true, '/EmptyArray2' : true, '/EmptyArray3' : true };
  var dst = { '/True' : [ '/dir2', '/dir3' ], '/False' : [ '/dir2', '/dir3' ], '/Null' : [ '/dir2', '/dir3' ], '/String1' : [ '/dir2', '/dir3' ], '/String2' : [ '/dir2', '/dir3' ], '/Array' : [ '/dir2', '/dir3' ], '/Object' : [ 'dst1', 'dst2' ] };
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapAppend( dst, src, true );
  test.identical( got, exp );
  test.true( got === dst );

  test.close( 'dst:map, collision' );

  /* - */

  test.open( 'defaultDstPath:false' )

  /* - */

  test.open( 'dst:null' );

  test.case = 'src:string';
  var expected = { '/a/b' : false }
  var got = path.mapAppend( null, '/a/b', false );
  test.identical( got, expected );

  test.case = 'src:array';
  var expected = { '/a/b' : false, '/c/d' : false }
  var got = path.mapAppend( null, [ '/a/b', '/c/d' ], false );
  test.identical( got, expected );

  test.case = 'src:map with null';
  var expected = { '/a/b' : false, '/c/d' : false, '/true' : true, '/false' : false }
  var got = path.mapAppend( null, { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, false );
  test.identical( got, expected );

  test.close( 'dst:null' );

  /* */

  test.open( 'dst:string' );

  test.case = 'src:string';
  var expected = { '/z' : false, '/a/b' : false }
  var got = path.mapAppend( '/z', '/a/b', false );
  test.identical( got, expected );

  test.case = 'src:array';
  var expected = { '/z' : false, '/a/b' : false, '/c/d' : false }
  var got = path.mapAppend( '/z', [ '/a/b', '/c/d' ], false );
  test.identical( got, expected );

  test.case = 'src:map with null';
  var expected = { '/z' : false, '/a/b' : false, '/c/d' : false, '/true' : true, '/false' : false }
  var got = path.mapAppend( '/z', { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, false );
  test.identical( got, expected );

  test.close( 'dst:string' );

  /* */

  test.open( 'dst:map' );

  test.case = 'src:string';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : false }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapAppend( dst, '/a/b', false );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:array';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : false, '/c/d' : false }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapAppend( dst, [ '/a/b', '/c/d' ], false );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:map with null';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : false, '/c/d' : false, '/true' : true, '/false' : false }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapAppend( dst, { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, false );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/wasNull' : null }
  var dst = { '/wasTrue' : true, '/wasFalse' : false, '/wasNull' : null }
  var got = path.mapAppend( dst, null, false );
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'dst:map' );

  /* */

  test.open( 'dst:map, collision' );

  test.case = 'dst is true';
  var exp = { '/One' : false, '/Zero' : true, '/True' : true, '/False' : true, '/Null' : true, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : [], '/EmptyArray2' : [], '/EmptyArray3' : [] }
  var dst = { '/One' : 0, '/Zero' : 1, '/True' : true, '/False' : true, '/Null' : true, '/String1' : true, '/String2' : true, '/Array' : true, '/Object' : true, '/EmptyArray1' : [ '' ], '/EmptyArray2' : [], '/EmptyArray3' : [ null ] }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapAppend( dst, src, false );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is false';
  var exp = { '/One' : true, '/Zero' : false, '/True' : false, '/False' : false, '/Null' : false, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : false, '/EmptyArray2' : false, '/EmptyArray3' : false }
  var dst = { '/True' : false, '/False' : false, '/Null' : false, '/String1' : false, '/String2' : false, '/Array' : false, '/Object' : false }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapAppend( dst, src, false );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is 1';
  var exp = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : true, '/Null' : true, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : false, '/EmptyArray2' : false, '/EmptyArray3' : false }
  var dst = { '/True' : 1, '/False' : 1, '/Null' : 1, '/String1' : 1, '/String2' : 1, '/Array' : 1, '/Object' : 1 }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapAppend( dst, src, false );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is 0';
  var exp = { '/True' : false, '/False' : false, '/Null' : false, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/One' : true, '/Zero' : false, '/EmptyArray1' : false, '/EmptyArray2' : false, '/EmptyArray3' : false };
  var dst = { '/True' : 0, '/False' : 0, '/Null' : 0, '/String1' : 0, '/String2' : 0, '/Array' : 0, '/Object' : 0 }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapAppend( dst, src, false );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is null';
  var exp = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : false, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : false, '/EmptyArray2' : false, '/EmptyArray3' : false }
  var dst = { '/True' : null, '/False' : null, '/Null' : null, '/String1' : null, '/String2' : null, '/Array' : null, '/Object' : null }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapAppend( dst, src, false );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is string';
  var exp = { '/True' : '/dir2', '/False' : '/dir2', '/Null' : '/dir2', '/String1' : [ '/dir2', '/dir1' ], '/String2' : [ '/dir2' ], '/Array' : [ '/dir2', '/dir1' ], '/Object' : [ '/dir2', obj1 ], '/One' : true, '/Zero' : false, '/EmptyArray1' : false, '/EmptyArray2' : false, '/EmptyArray3' : false };
  var dst = { '/True' : '/dir2', '/False' : '/dir2', '/Null' : '/dir2', '/String1' : '/dir2', '/String2' : '/dir2', '/Array' : '/dir2', '/Object' : '/dir2' };
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapAppend( dst, src, false );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is array';
  var exp = { '/True' : [ '/dir2', '/dir3' ], '/False' : [ '/dir2', '/dir3' ], '/Null' : [ '/dir2', '/dir3' ], '/String1' : [ '/dir2', '/dir3', '/dir1' ], '/String2' : [ '/dir2', '/dir3' ], '/Array' : [ '/dir2', '/dir3', '/dir1' ], '/One' : true, '/Zero' : false, '/Object' : [ '/dir2', '/dir3', obj1 ], '/EmptyArray1' : false, '/EmptyArray2' : false, '/EmptyArray3' : false };
  var dst = { '/True' : [ '/dir2', '/dir3' ], '/False' : [ '/dir2', '/dir3' ], '/Null' : [ '/dir2', '/dir3' ], '/String1' : [ '/dir2', '/dir3' ], '/String2' : [ '/dir2', '/dir3' ], '/Array' : [ '/dir2', '/dir3' ], '/Object' : [ '/dir2', '/dir3' ] };
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapAppend( dst, src, false );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is object';
  var exp = { '/True' : obj0, '/False' : obj0, '/Null' : obj0, '/String1' : [ obj0, '/dir1' ], '/String2' : [ obj0, '/dir2' ], '/Array' : [ obj0, '/dir1', '/dir2' ], '/Object' : [ obj0, obj1 ], '/One' : true, '/Zero' : false, '/EmptyArray1' : false, '/EmptyArray2' : false, '/EmptyArray3' : false };
  var dst = { '/True' : obj0, '/False' : obj0, '/Null' : obj0, '/String1' : obj0, '/String2' : obj0, '/Array' : obj0, '/Object' : obj0 };
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapAppend( dst, src, false );
  test.identical( got, exp );
  test.true( got === dst );

  test.close( 'dst:map, collision' );

  /* - */

  test.close( 'defaultDstPath:false' )
  test.open( 'defaultDstPath:array' )

  /* - */

  test.open( 'dst:null' );

  test.case = 'src:string';
  var expected = { '/a/b' : [ '/dir2', '/dir3' ] }
  var got = path.mapAppend( null, '/a/b', [ '/dir2', '/dir3' ] );
  test.identical( got, expected );

  test.case = 'src:array';
  var expected = { '/a/b' : [ '/dir2', '/dir3' ], '/c/d' : [ '/dir2', '/dir3' ] }
  var got = path.mapAppend( null, [ '/a/b', '/c/d' ], [ '/dir2', '/dir3' ] );
  test.identical( got, expected );

  test.case = 'src:map with null';
  var expected = { '/a/b' : [ '/dir2', '/dir3' ], '/c/d' : [ '/dir2', '/dir3' ], '/true' : true, '/false' : false }
  var got = path.mapAppend( null, { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, [ '/dir2', '/dir3' ] );
  test.identical( got, expected );

  test.close( 'dst:null' );

  /* */

  test.open( 'dst:string' );

  test.case = 'src:string';
  var expected = { '/z' : [ '/dir2', '/dir3' ], '/a/b' : [ '/dir2', '/dir3' ] }
  var got = path.mapAppend( '/z', '/a/b', [ '/dir2', '/dir3' ] );
  test.identical( got, expected );

  test.case = 'src:array';
  var expected = { '/z' : [ '/dir2', '/dir3' ], '/a/b' : [ '/dir2', '/dir3' ], '/c/d' : [ '/dir2', '/dir3' ] }
  var got = path.mapAppend( '/z', [ '/a/b', '/c/d' ], [ '/dir2', '/dir3' ] );
  test.identical( got, expected );

  test.case = 'src:map with null';
  var expected = { '/z' : [ '/dir2', '/dir3' ], '/a/b' : [ '/dir2', '/dir3' ], '/c/d' : [ '/dir2', '/dir3' ], '/true' : true, '/false' : false }
  var got = path.mapAppend( '/z', { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, [ '/dir2', '/dir3' ] );
  test.identical( got, expected );

  test.close( 'dst:string' );

  /* */

  test.open( 'dst:map' );

  test.case = 'src:string';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : [ '/dir2', '/dir3' ] }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapAppend( dst, '/a/b', [ '/dir2', '/dir3' ] );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:array';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : [ '/dir2', '/dir3' ], '/c/d' : [ '/dir2', '/dir3' ] }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapAppend( dst, [ '/a/b', '/c/d' ], [ '/dir2', '/dir3' ] );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:map with null';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : [ '/dir2', '/dir3' ], '/c/d' : [ '/dir2', '/dir3' ], '/true' : true, '/false' : false }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapAppend( dst, { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, [ '/dir2', '/dir3' ] );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/wasNull' : [ '/dir1', '/dir2' ] }
  var dst = { '/wasTrue' : true, '/wasFalse' : false, '/wasNull' : null }
  var got = path.mapAppend( dst, null, [ '/dir1', '/dir2' ] );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, only bools';
  var expected = { '/wasTrue' : true, '/wasFalse' : false }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapAppend( dst, null, [ '/dir1', '/dir2' ] );
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'dst:map' );

  /* */

  test.open( 'dst:map, collision' );

  test.case = 'dst is true';
  var exp = { '/One' : false, '/Zero' : true, '/True' : true, '/False' : true, '/Null' : [ '/dir1', '/dir2' ], '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : [ '/dir1', '/dir2' ], '/EmptyArray2' : [ '/dir1', '/dir2' ], '/EmptyArray3' : [ '/dir1', '/dir2' ] };
  var dst = { '/One' : 0, '/Zero' : 1, '/True' : true, '/False' : true, '/Null' : true, '/String1' : true, '/String2' : true, '/Array' : true, '/Object' : true, '/EmptyArray1' : [ '' ], '/EmptyArray2' : [], '/EmptyArray3' : [ null ] };
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapAppend( dst, src, [ '/dir1', '/dir2' ] );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is false';
  var exp = { '/One' : true, '/Zero' : false, '/True' : false, '/False' : false, '/Null' : [ '/dir1', '/dir2' ], '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : [ '/dir1', '/dir2' ], '/EmptyArray2' : [ '/dir1', '/dir2' ], '/EmptyArray3' : [ '/dir1', '/dir2' ] }
  var dst = { '/True' : false, '/False' : false, '/Null' : false, '/String1' : false, '/String2' : false, '/Array' : false, '/Object' : false }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapAppend( dst, src, [ '/dir1', '/dir2' ] );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is 1';
  var exp = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : true, '/Null' : [ '/dir1', '/dir2' ], '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : [ '/dir1', '/dir2' ], '/EmptyArray2' : [ '/dir1', '/dir2' ], '/EmptyArray3' : [ '/dir1', '/dir2' ] }
  var dst = { '/True' : 1, '/False' : 1, '/Null' : 1, '/String1' : 1, '/String2' : 1, '/Array' : 1, '/Object' : 1 }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapAppend( dst, src, [ '/dir1', '/dir2' ] );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is 0';
  var exp = { '/One' : true, '/Zero' : false, '/True' : false, '/False' : false, '/Null' : [ '/dir1', '/dir2' ], '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : [ '/dir1', '/dir2' ], '/EmptyArray2' : [ '/dir1', '/dir2' ], '/EmptyArray3' : [ '/dir1', '/dir2' ] };
  var dst = { '/True' : 0, '/False' : 0, '/Null' : 0, '/String1' : 0, '/String2' : 0, '/Array' : 0, '/Object' : 0 }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : [ '/dir1', '/dir2' ], '/EmptyArray2' : [ '/dir1', '/dir2' ], '/EmptyArray3' : [ '/dir1', '/dir2' ] }
  var got = path.mapAppend( dst, src, [ '/dir1', '/dir2' ] );
  test.identical( got, exp );
  test.true( got === dst );

  // test.case = 'dst is null';
  // var exp = { '/True' : [ '/dir1', '/dir2' ], '/False' : [ '/dir1', '/dir2' ],
  //  '/Null' : [ '/dir1', '/dir2' ], '/String1' : [ '/dir1', '/dir2' ],
  //  '/String2' : [ '/dir1', '/dir2' ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : [ '/dir1', '/dir2', obj1 ],
  //  '/One' : true, '/Zero' : false, '/EmptyArray1' : [ '/dir1', '/dir2' ], '/EmptyArray2' : [ '/dir1', '/dir2' ], '/EmptyArray3' : [ '/dir1', '/dir2' ] };
  // var dst = { '/True' : null, '/False' : null, '/Null' : null, '/String1' : null, '/String2' : null, '/Array' : null, '/Object' : null };
  // var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  // var got = path.mapAppend( dst, src, [ '/dir1', '/dir2' ] );
  // test.identical( got, exp );
  // test.true( got === dst );

  test.case = 'dst is string';
  var exp = { '/True' : '/dir2', '/False' : '/dir2', '/One' : true, '/Zero' : false, '/Null' : [ '/dir2', '/dir1' ], '/String1' : [ '/dir2', '/dir1' ], '/String2' : [ '/dir2' ], '/Array' : [ '/dir2', '/dir1' ], '/Object' : [ '/dir2', obj1 ], '/EmptyArray1' : [ '/dir1', '/dir2' ], '/EmptyArray2' : [ '/dir1', '/dir2' ], '/EmptyArray3' : [ '/dir1', '/dir2' ] };
  var dst = { '/True' : '/dir2', '/False' : '/dir2', '/Null' : '/dir2', '/String1' : '/dir2', '/String2' : '/dir2', '/Array' : '/dir2', '/Object' : '/dir2' }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapAppend( dst, src, [ '/dir1', '/dir2' ] );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is array';
  var exp = { '/True' : [ '/dir2', '/dir3' ], '/False' : [ '/dir2', '/dir3' ], '/One' : true, '/Zero' : false, '/Null' : [ '/dir2', '/dir3', '/dir1' ], '/String1' :  [ '/dir2', '/dir3', '/dir1' ], '/String2' :  [ '/dir2', '/dir3' ], '/Array' :  [ '/dir2', '/dir3', '/dir1' ], '/Object' :  [ '/dir2', '/dir3', obj1 ], '/EmptyArray1' : [ '/dir1', '/dir2' ], '/EmptyArray2' : [ '/dir1', '/dir2' ], '/EmptyArray3' : [ '/dir1', '/dir2' ] };
  var dst = { '/True' : [ '/dir2', '/dir3' ], '/False' : [ '/dir2', '/dir3' ], '/Null' : [ '/dir2', '/dir3' ], '/String1' : [ '/dir2', '/dir3' ], '/String2' : [ '/dir2', '/dir3' ], '/Array' : [ '/dir2', '/dir3' ], '/Object' : [ '/dir2', '/dir3' ] };
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapAppend( dst, src, [ '/dir1', '/dir2' ] );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is object';
  var exp = { '/True' : obj0, '/False' : obj0, '/Null' : [ obj0, '/dir1', '/dir2' ], '/String1' : [ obj0, '/dir1' ], '/String2' : [ obj0, '/dir2' ], '/Array' : [ obj0, '/dir1', '/dir2' ], '/Object' : [ obj0, obj1 ], '/One' : true, '/Zero' : false, '/EmptyArray1' : [ '/dir1', '/dir2' ], '/EmptyArray2' : [ '/dir1', '/dir2' ], '/EmptyArray3' : [ '/dir1', '/dir2' ] };
  var dst = { '/True' : obj0, '/False' : obj0, '/Null' : obj0, '/String1' : obj0, '/String2' : obj0, '/Array' : obj0, '/Object' : obj0 };
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapAppend( dst, src, [ '/dir1', '/dir2' ] );
  test.identical( got, exp );
  test.true( got === dst );

  test.close( 'dst:map, collision' );

  /* - */

  test.close( 'defaultDstPath:array' )
  test.open( 'defaultDstPath:obj' )

  /* - */

  test.open( 'dst:null' );

  test.case = 'src:string';
  var expected = { '/a/b' : obj2 }
  var got = path.mapAppend( null, '/a/b', obj2 );
  test.identical( got, expected );

  test.case = 'src:array';
  var expected = { '/a/b' : obj2, '/c/d' : obj2 }
  var got = path.mapAppend( null, [ '/a/b', '/c/d' ], obj2 );
  test.identical( got, expected );

  test.case = 'src:map with null';
  var expected = { '/a/b' : obj2, '/c/d' : obj2, '/true' : true, '/false' : false }
  var got = path.mapAppend( null, { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, obj2 );
  test.identical( got, expected );

  test.close( 'dst:null' );

  /* */

  test.open( 'dst:string' );

  test.case = 'src:string';
  var expected = { '/z' : obj2, '/a/b' : obj2 }
  var got = path.mapAppend( '/z', '/a/b', obj2 );
  test.identical( got, expected );

  test.case = 'src:array';
  var expected = { '/z' : obj2, '/a/b' : obj2, '/c/d' : obj2 }
  var got = path.mapAppend( '/z', [ '/a/b', '/c/d' ], obj2 );
  test.identical( got, expected );

  test.case = 'src:map with null';
  var expected = { '/z' : obj2, '/a/b' : obj2, '/c/d' : obj2, '/true' : true, '/false' : false }
  var got = path.mapAppend( '/z', { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, obj2 );
  test.identical( got, expected );

  test.close( 'dst:string' );

  /* */

  test.open( 'dst:map' );

  test.case = 'src:string';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : obj2 }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapAppend( dst, '/a/b', obj2 );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:array';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : obj2, '/c/d' : obj2 }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapAppend( dst, [ '/a/b', '/c/d' ], obj2 );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:map with null';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : obj2, '/c/d' : obj2, '/true' : true, '/false' : false }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapAppend( dst, { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, obj2 );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/wasNull' : obj2 }
  var dst = { '/wasTrue' : true, '/wasFalse' : false, '/wasNull' : null }
  var got = path.mapAppend( dst, null, obj2 );
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'dst:map' );

  /* */

  test.open( 'dst:map, collision' );

  test.case = 'dst is true';
  var exp = { '/One' : false, '/Zero' : true, '/True' : true, '/False' : true, '/Null' : obj2, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : [ obj2 ], '/EmptyArray2' : [ obj2 ], '/EmptyArray3' : [ obj2 ] }
  var dst = { '/One' : 0, '/Zero' : 1, '/True' : true, '/False' : true, '/Null' : true, '/String1' : true, '/String2' : true, '/Array' : true, '/Object' : true, '/EmptyArray1' : [ obj2 ], '/EmptyArray2' : [ obj2 ], '/EmptyArray3' : [ obj2 ] }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapAppend( dst, src, obj2 );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is false';
  var exp = { '/One' : true, '/Zero' : false, '/True' : false, '/False' : false, '/Null' : obj2, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : obj2, '/EmptyArray2' : obj2, '/EmptyArray3' : obj2 }
  var dst = { '/True' : false, '/False' : false, '/Null' : false, '/String1' : false, '/String2' : false, '/Array' : false, '/Object' : false }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapAppend( dst, src, obj2 );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is 1';
  var exp = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : true, '/Null' : obj2, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : obj2, '/EmptyArray2' : obj2, '/EmptyArray3' : obj2 }
  var dst = { '/True' : 1, '/False' : 1, '/Null' : 1, '/String1' : 1, '/String2' : 1, '/Array' : 1, '/Object' : 1 }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapAppend( dst, src, obj2 );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is 0';
  var exp = { '/One' : true, '/Zero' : false, '/True' : false, '/False' : false, '/Null' : obj2, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : obj2, '/EmptyArray2' : obj2, '/EmptyArray3' : obj2 };
  var dst = { '/True' : 0, '/False' : 0, '/Null' : 0, '/String1' : 0, '/String2' : 0, '/Array' : 0, '/Object' : 0 };
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapAppend( dst, src, obj2 );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is null';
  var exp = { '/One' : true, '/Zero' : false, '/True' : obj2, '/False' : obj2, '/Null' : [ obj2 ], '/String1' : [ obj2, '/dir1' ], '/String2' : [ obj2, '/dir2' ], '/Array' : [ obj2, '/dir1', '/dir2' ], '/Object' : [ obj2, obj1 ], '/EmptyArray1' : obj2, '/EmptyArray2' : obj2, '/EmptyArray3' : obj2 };
  var dst = { '/True' : null, '/False' : null, '/Null' : null, '/String1' : null, '/String2' : null, '/Array' : null, '/Object' : null };
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapAppend( dst, src, obj2 );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is string';
  var exp = { '/True' : '/dir2', '/False' : '/dir2', '/Null' : [ '/dir2', obj2 ], '/String1' : [ '/dir2', '/dir1' ], '/String2' : [ '/dir2' ], '/Array' : [ '/dir2', '/dir1' ], '/Object' : [ '/dir2', obj1 ], '/One' : true, '/Zero' : false, '/EmptyArray1' : obj2, '/EmptyArray2' : obj2, '/EmptyArray3' : obj2 };
  var dst = { '/True' : '/dir2', '/False' : '/dir2', '/Null' : '/dir2', '/String1' : '/dir2', '/String2' : '/dir2', '/Array' : '/dir2', '/Object' : '/dir2' };
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapAppend( dst, src, obj2 );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is array';
  var exp = { '/True' : [ '/dir2', '/dir3' ], '/False' : [ '/dir2', '/dir3' ], '/Null' : [ '/dir2', '/dir3', obj2 ], '/String1' : [ '/dir2', '/dir3', '/dir1' ], '/String2' : [ '/dir2', '/dir3' ], '/Array' : [ '/dir2', '/dir3', '/dir1' ], '/Object' : [ '/dir2', '/dir3', obj1 ], '/One' : true, '/Zero' : false, '/EmptyArray1' : obj2, '/EmptyArray2' : obj2, '/EmptyArray3' : obj2 };
  var dst = { '/True' : [ '/dir2', '/dir3' ], '/False' : [ '/dir2', '/dir3' ], '/Null' : [ '/dir2', '/dir3' ], '/String1' : [ '/dir2', '/dir3' ], '/String2' : [ '/dir2', '/dir3' ], '/Array' : [ '/dir2', '/dir3' ], '/Object' : [ '/dir2', '/dir3' ] };
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapAppend( dst, src, obj2 );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is object';
  var exp = { '/True' : obj0, '/False' : obj0, '/Null' : [ obj0, obj2 ], '/String1' : [ obj0, '/dir1' ], '/String2' : [ obj0, '/dir2' ], '/Array' : [ obj0, '/dir1', '/dir2' ], '/Object' : [ obj0, obj1 ], '/One' : true, '/Zero' : false, '/EmptyArray1' : obj2, '/EmptyArray2' : obj2, '/EmptyArray3' : obj2 };
  var dst = { '/True' : obj0, '/False' : obj0, '/Null' : obj0, '/String1' : obj0, '/String2' : obj0, '/Array' : obj0, '/Object' : obj0 };
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapAppend( dst, src, obj2 );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is the same object';
  var exp = { '/True' : true, '/False' : obj0, '/Null' : [ obj0 ], '/String1' : [ obj0, '/dir1' ], '/String2' : [ obj0, '/dir2' ], '/Array' : [ obj0, '/dir1', '/dir2' ], '/Object' : [ obj0 ] };
  var dst = { '/True' : true, '/False' : obj0, '/Null' : obj0, '/String1' : obj0, '/String2' : obj0, '/Array' : obj0, '/Object' : obj0 };
  var src = { '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj0 };
  var got = path.mapAppend( dst, src, obj0 );
  test.identical( got, exp );
  test.true( got === dst );

  test.close( 'dst:map, collision' );

  test.close( 'defaultDstPath:obj' )

  /* - */

  test.open( 'throwing' )

  test.case = 'dstMap=null, srcMap=null, dstPath=map';
  var dstMap = null;
  var srcMap = null;
  var dstPath = { '/True' : true, '/False' : false, '/Zero' : 0, '/One' : 1, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  test.shouldThrowErrorSync( () => path.mapAppend( dstMap, srcMap, dstPath ) );
  test.shouldThrowErrorSync( () => path.mapAppend( {}, {}, {} ) );

  test.close( 'throwing' )

}

//

function mapAppendExperiment( test )
{
  let path = _.path;
  function constr( src )
  {
    this.value = src;
    return this;
  }
  let obj0 = new constr( 0 );

  //

  test.case = 'dstMap=map with empty src, srcMap=complex map, dstPath=null';
  var expected = { '' : '/dst', '/True' : '' };
  var dstMap = { '' : '/dst' };
  var srcMap = { '' : null, '/True' : null };
  var dstPath = null;
  var got = path.mapAppend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  //

  test.case = 'object value replace all empty values';
  var exp = { '/Null' : [ '/dir1', '/dir2' ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : [ '/dir1', '/dir2', obj0 ] };
  var dst = { '/Null' : null, '/Array' : null, '/Object' : null }
  var src = { '/Null' : '/dir1', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj0 };
  var got = path.mapAppend( dst, src, [ '/dir1', '/dir2' ] );
  test.identical( got, exp );
  test.true( got === dst );
}
mapAppendExperiment.experimental = 1;

//

function mapPrepend( test )
{
  let path = _.path;
  function constr( src )
  {
    this.value = src;
    return this;
  }
  let obj0 = new constr( 0 );
  let obj1 = new constr( 1 );
  let obj2 = new constr( 2 );

  /* - */

  test.case = 'no override of empty string by boolean';
  var expected = { '.' : '', '**/.git/**' : false };
  var dstMap = { '.' : '' };
  var srcMap = '**/.git/**';
  var dstPath = false;
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dst is map, src is null, dstPath is str';
  var expected = { '/src' : '/dst' };
  var dstMap = { '/src' : '/dst' };
  var srcMap = null;
  var dstPath = '/dst2';
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dst is map with empty str in src, src is map with empty str in src, dstPath is str';
  var expected = { '/src' : '/dst', '' : '/dst3' };
  var dstMap = { '/src' : '/dst' };
  var srcMap = { '' : '/dst3' };
  var dstPath = '/dst2';
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  /* - */

  test.case = 'temp';
  var expected = { '/src' : '/dst' };
  var dstMap = { '/src' : '/dst' };
  var srcMap = null;
  var dstPath = '/dst2';
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'temp';
  var expected = { '/src' : '/dst', '' : '/dst3' };
  var dstMap = { '/src' : '/dst' };
  var srcMap = { '' : '/dst3' };
  var dstPath = '/dst2';
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  /* - */

  test.case = 'dstMap=null, srcMap=null, dstPath=undefined';
  var expected = {};
  var dstMap = null;
  var srcMap = null;
  var dstPath = undefined;
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=empty, srcMap=null, dstPath=undefined';
  var expected = {};
  var dstMap = '';
  var srcMap = null;
  var dstPath = undefined;
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=null, srcMap=empty, dstPath=undefined';
  var expected = {};
  var dstMap = null;
  var srcMap = '';
  var dstPath = undefined;
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=empty, srcMap=empty, dstPath=undefined';
  var expected = {};
  var dstMap = '';
  var srcMap = '';
  var dstPath = undefined;
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=null, srcMap=null, dstPath=null';
  var expected = {};
  var dstMap = null;
  var srcMap = null;
  var dstPath = null;
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=empty, srcMap=null, dstPath=null';
  var expected = {};
  var dstMap = '';
  var srcMap = null;
  var dstPath = null;
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=null, srcMap=empty, dstPath=null';
  var expected = {};
  var dstMap = null;
  var srcMap = '';
  var dstPath = null;
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=empty, srcMap=empty, dstPath=null';
  var expected = {};
  var dstMap = '';
  var srcMap = '';
  var dstPath = null;
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=null, srcMap=null, dstPath=empty';
  var expected = {};
  var dstMap = null;
  var srcMap = null;
  var dstPath = '';
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=empty, srcMap=null, dstPath=empty';
  var expected = {};
  var dstMap = '';
  var srcMap = null;
  var dstPath = '';
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=null, srcMap=empty, dstPath=empty';
  var expected = {};
  var dstMap = null;
  var srcMap = '';
  var dstPath = '';
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=empty, srcMap=empty, dstPath=empty';
  var expected = {};
  var dstMap = '';
  var srcMap = '';
  var dstPath = '';
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  /* */

  test.case = 'dstMap=map with only src dot, srcMap=map with bools, dstPath=undefined';
  var expected = { '.' : '', 'a' : true, 'b' : false };
  var dstMap = { '.' : '' };
  var srcMap = { 'a' : true, 'b' : false };
  var dstPath = undefined;
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with only dst dot, srcMap=map with bools, dstPath=undefined';
  var expected = { '' : '.', 'a' : true, 'b' : false };
  var dstMap = { '' : '.' };
  var srcMap = { 'a' : true, 'b' : false };
  var dstPath = undefined;
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with only src and dst dot, srcMap=map with bools, dstPath=undefined';
  var expected = { '.' : '.', 'a' : true, 'b' : false };
  var dstMap = { '.' : '.' };
  var srcMap = { 'a' : true, 'b' : false };
  var dstPath = undefined;
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=is dot, srcMap=map with bools, dstPath=undefined';
  var expected = { '.' : '', 'a' : true, 'b' : false };
  var dstMap = '.';
  var srcMap = { 'a' : true, 'b' : false };
  var dstPath = undefined;
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=is empty, srcMap=map with bools, dstPath=undefined';
  var expected = { 'a' : true, 'b' : false };
  var dstMap = '';
  var srcMap = { 'a' : true, 'b' : false };
  var dstPath = undefined;
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  /* */

  test.case = 'dstMap=str, srcMap=str, dstPath=undefined';
  var expected = { '/dir/**' : true, '/dir/doubledir/d1/**' : true, '/dir/**/**b**' : false, '/dir/doubledir/d1/**/**b**' : false };
  var dstMap = { '/dir/**' : true, '/dir/doubledir/d1/**' : true, '/dir/**/**b**' : false, '/dir/doubledir/d1/**/**b**' : false };
  var srcMap = [ '/dir/**', '/dir/doubledir/d1/**' ];
  var dstPath = '';
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=str, srcMap=str, dstPath=undefined';
  var expected = { '/' : '/dst' }
  var dstMap = null;
  var srcMap = { '/' : '' };
  var dstPath = '/dst';
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=str, srcMap=str, dstPath=undefined';
  var expected = { 'a' : '', 'b' : '' }
  var dstMap = 'a';
  var srcMap = 'b';
  var got = path.mapPrepend( dstMap, srcMap );
  test.identical( got, expected );

  test.case = 'dstMap=str, srcMap=str, dstPath=null';
  var expected = { 'a' : '', 'b' : '' }
  var dstMap = 'a';
  var srcMap = 'b';
  var got = path.mapPrepend( dstMap, srcMap, null );
  test.identical( got, expected );

  test.case = 'dstMap=str, srcMap=str, dstPath=str';
  var expected = { 'a' : 'c', 'b' : 'c' }
  var dstMap = 'a';
  var srcMap = 'b';
  var got = path.mapPrepend( dstMap, srcMap, 'c' );
  test.identical( got, expected );

  test.case = 'dstMap=null, srcMap=null, dstPath=str';
  var expected = {}
  var dstMap = null;
  var srcMap = null;
  var dstPath = '/dst';
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=null, srcMap=null in arr, dstPath=str';
  var expected = {}
  var dstMap = null;
  var srcMap = [ null ];
  var dstPath = '/dst';
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=null, srcMap=map, dstPath=null';
  var expected = { '/src' : '/dst' }
  var dstMap = null;
  var srcMap = { '/src' : '/dst' };
  var dstPath = null;
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'dstMap=map, srcMap=str, dstPath=null';
  var expected = { '/src' : '/dst' }
  var dstMap = { '/src' : '/dst' };
  var srcMap = '/src';
  var dstPath = null;
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map, srcMap=str, dstPath=null';
  var expected = { '/src' : [ '/dst2', '/dst' ] };
  var dstMap = { '/src' : '/dst' };
  var srcMap = '/src';
  var dstPath = '/dst2';
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  /* - */

  test.case = 'dstMap=map with dot in src, srcMap=map, dstPath=null';
  var expected = { '.' : '', 'x' : '', 'y' : '', '/a/b1' : '', '/a/b2' : '' };
  var dstMap = { '.' : null, 'x' : null, 'y' : '' };
  var srcMap = { '/a/b1' : null, '/a/b2' : null };
  var dstPath = null;
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with dot in src, srcMap=map, dstPath=null';
  var expected = { '.' : '', '/a/b1' : '', '/a/b2' : '' };
  var dstMap = { '.' : null };
  var srcMap = { '/a/b1' : null, '/a/b2' : null };
  var dstPath = null;
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty in src, srcMap=map, dstPath=null';
  var expected = { '/a/b1' : '', '/a/b2' : '' };
  var dstMap = { '' : null };
  var srcMap = { '/a/b1' : null, '/a/b2' : null };
  var dstPath = null;
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty in src and dst, srcMap=map, dstPath=null';
  var expected = { '/a/b1' : '', '/a/b2' : '' };
  var dstMap = { '' : '' };
  var srcMap = { '/a/b1' : null, '/a/b2' : null };
  var dstPath = null;
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=dot str, srcMap=map, dstPath=null';
  var expected = { '.' : '', '/a/b1' : '', '/a/b2' : '' };
  var dstMap = '.';
  var srcMap = { '/a/b1' : null, '/a/b2' : null };
  var dstPath = null;
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  /* - */

  test.case = 'dstMap=map, srcMap=empty, dstPath=str';
  var expected = { '/src1' : '/dst', '/src2' : '/dst' };
  var dstMap = { '/src1' : null, '/src2' : '' };
  var srcMap = '';
  var dstPath = '/dst';
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map, srcMap=str, dstPath=str, rewrite';
  var expected = { '/src1' : [ '/dst1', '/dst2' ], '/src2' : '/dst1' };
  var dstMap = { '/src1' : [ '/dst1', '/dst2' ], '/src2' : '/dst1' };
  var srcMap = '/src1';
  var dstPath = '/dst2';
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map, srcMap=src, dstPath=str, rewrite';
  var expected = { '/src1' : [ '/dst1', '/dst2' ], '/src2' : [ '/dst1' ] };
  var dstMap = { '/src1' : [ '/dst1', '/dst2' ], '/src2' : '/dst1' };
  var srcMap = { '/src1' : [ '/dst1', '/dst2' ], '/src2' : '/dst1' };
  var dstPath = '/dst2';
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map, srcMap=map, dstPath=str, rewrite';
  var expected = { '/src1' : [ '/dst2', '/dst1' ], '/src2' : [ '/dst3', '/dst1' ] };
  var dstMap = { '/src1' : '/dst1', '/src2' : '/dst1' };
  var srcMap = { '/src1' : null, '/src2' : '/dst3' };
  var dstPath = '/dst2';
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map, srcMap=map, dstPath=str, rewrite';
  var expected = { '/src1' : [ '/dst2', '/dst1' ], '/src2' : [ '/dst3', '/dst1' ] };
  var dstMap = { '/src1' : '/dst1', '/src2' : '/dst1' };
  var srcMap = { '/src1' : null, '/src2' : '/dst3' };
  var dstPath = '/dst2';
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map, srcMap=null, dstPath=str';
  var expected = { '/src1' : '/dst', '/src2' : '/dst' };
  var dstMap = { '/src1' : null, '/src2' : '' };
  var srcMap = null;
  var dstPath = '/dst';
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=null, dstPath=str';
  var expected = { '' : '/dst2' };
  var dstMap = { '' : '/dst2' };
  var srcMap = null;
  var dstPath = '/dst2';
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=null, dstPath=null';
  var expected = { '' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = null;
  var dstPath = null;
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=empty, dstPath=null';
  var expected = { '' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = '';
  var dstPath = null;
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=string, dstPath=null';
  var expected = { '/src' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = '/src';
  var dstPath = null;
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=array, dstPath=null';
  var expected = { '/src1' : '/dst', '/src2' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = [ '/src1', '/src2' ];
  var dstPath = null;
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=empty array, dstPath=null';
  var expected = { '' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = [];
  var dstPath = null;
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=empty map, dstPath=null';
  var expected = { '' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = {};
  var dstPath = null;
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=empty str, dstPath=null';
  var expected = { '' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = '';
  var dstPath = null;
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=empty str, dstPath=empty str';
  var expected = { '' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = '';
  var dstPath = '';
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=not normal empty map, dstPath=null';
  var expected = { '' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = { '' : '' };
  var dstPath = null;
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=map with only src, dstPath=null';
  var expected = { '/src1' : '/dst', '/src2' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = { '/src1' : null, '/src2' : null };
  var dstPath = null;
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=map, dstPath=null';
  var expected = { '/null' : '/dst', '/str' : '/dst2', '/empty1' : '/dst', '/empty2' : '/dst', '/true' : true, '/false' : false };
  var dstMap = { '' : '/dst' };
  var srcMap = { '/null' : null, '/str' : '/dst2', '/empty1' : '', '/empty2' : [ '' ], '/true' : true, '/false' : false };
  var dstPath = null;
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=not normal empty map, dstPath=empty str';
  var expected = { '' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = { '' : '' };
  var dstPath = '';
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=map with only src, dstPath=empty str';
  var expected = { '/src1' : '/dst', '/src2' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = { '/src1' : null, '/src2' : null };
  var dstPath = '';
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=map, dstPath=empty str';
  var expected = { '/null' : '/dst', '/str' : '/dst2', '/empty1' : '/dst', '/empty2' : '/dst', '/true' : true, '/false' : false };
  var dstMap = { '' : '/dst' };
  var srcMap = { '/null' : null, '/str' : '/dst2', '/empty1' : '', '/empty2' : [ '' ], '/true' : true, '/false' : false };
  var dstPath = '';
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=map, dstPath=str';
  var expected = { '/null' : '/dstx', '/str' : '/dst2', '/empty1' : '/dstx', '/empty2' : '/dstx', '/true' : true, '/false' : false, '' : '/dst' };
  var dstMap = { '' : '/dst' };
  var srcMap = { '/null' : null, '/str' : '/dst2', '/empty1' : '', '/empty2' : [ '' ], '/true' : true, '/false' : false };
  var dstPath = '/dstx';
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=map, dstPath=str, same as in dst map';
  var expected = { '/null' : '/dst', '/str' : '/dst2', '/empty1' : '/dst', '/empty2' : '/dst', '/true' : true, '/false' : false };
  var dstMap = { '' : '/dst' };
  var srcMap = { '/null' : null, '/str' : '/dst2', '/empty1' : '', '/empty2' : [ '' ], '/true' : true, '/false' : false };
  var dstPath = '/dst';
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  test.case = 'dstMap=map with empty src, srcMap=map, dstPath=null';
  var expected = { '' : '/dst', '/src1' : '/dst1', '/src2' : '/dst2' };
  var dstMap = { '' : '/dst' };
  var srcMap = { '/src1' : '/dst1', '/src2' : '/dst2' };
  var dstPath = null;
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );
  test.true( got === dstMap );

  // test.case = 'dstMap=map with empty src, srcMap=complex map, dstPath=null';
  // var expected = { "" : "/dst", '/True' : true, '/False' : false, '/Zero' : false, '/One' : true,
  //  '/Null' : '/dst', '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  // var dstMap = { "" : "/dst" };
  // var srcMap = { '' : null, '/True' : true, '/False' : false, '/Zero' : 0, '/One' : 1,
  //  '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  // var dstPath = null;
  // var got = path.mapPrepend( dstMap, srcMap, dstPath );
  // test.identical( got, expected );

  test.case = 'dstMap=map with empty src, srcMap=string, dstPath=string';
  var expected = { '' : '/dst', '/src' : '/dst2' };
  var dstMap = { '' : '/dst' };
  var srcMap = '/src';
  var dstPath = '/dst2';
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  /* - */

  test.open( 'src<>map, dst<>map' );

  test.case = 'src=str, dst=str, dstPath=null';
  var expected = { '/a' : '', '/b' : '' }
  var dstMap = '/a';
  var srcMap = '/b';
  var dstPath = null;
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'src=arr, dst=str, dstPath=arr';
  var expected = { '/a' : '', '/b' : '' }
  var dstMap = '/a';
  var srcMap = [ '/b' ];
  var dstPath = [ null ];
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'src=arr, dst=arr, dstPath=arr';
  var expected = { '/a' : '', '/b' : '' }
  var dstMap = [ '/a' ];
  var srcMap = [ '/b' ];
  var dstPath = [ null ];
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'src=str, dst=str, dstPath=null';
  var expected = { '/a' : '', '/b' : '' }
  var dstMap = '/a';
  var srcMap = '/b';
  var dstPath = '';
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'src=arr, dst=str, dstPath=arr';
  var expected = { '/a' : '', '/b' : '' }
  var dstMap = '/a';
  var srcMap = [ '/b' ];
  var dstPath = [ '' ];
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.case = 'src=arr, dst=arr, dstPath=arr';
  var expected = { '/a' : '', '/b' : '' }
  var dstMap = [ '/a' ];
  var srcMap = [ '/b' ];
  var dstPath = [ '' ];
  var got = path.mapPrepend( dstMap, srcMap, dstPath );
  test.identical( got, expected );

  test.close( 'src<>map, dst<>map' );

  /* - */

  test.open( 'defaultDstPath:true' );

  /* - */

  test.open( 'dst:null' );

  test.case = 'src:string';
  var expected = { '/a/b' : true }
  var got = path.mapPrepend( null, '/a/b', true );
  test.identical( got, expected );

  test.case = 'src:array';
  var expected = { '/a/b' : true, '/c/d' : true }
  var got = path.mapPrepend( null, [ '/a/b', '/c/d' ], true );
  test.identical( got, expected );

  test.case = 'src:map with null';
  var expected = { '/a/b' : true, '/c/d' : true, '/true' : true, '/false' : false }
  var got = path.mapPrepend( null, { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, true );
  test.identical( got, expected );

  test.close( 'dst:null' );

  /* */

  test.open( 'dst:string' );

  test.case = 'src:string';
  var expected = { '/z' : true, '/a/b' : true }
  var got = path.mapPrepend( '/z', '/a/b', true );
  test.identical( got, expected );

  test.case = 'src:array';
  var expected = { '/z' : true, '/a/b' : true, '/c/d' : true }
  var got = path.mapPrepend( '/z', [ '/a/b', '/c/d' ], true );
  test.identical( got, expected );

  test.case = 'src:map with null';
  var expected = { '/z' : true, '/a/b' : true, '/c/d' : true, '/true' : true, '/false' : false }
  var got = path.mapPrepend( '/z', { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, true );
  test.identical( got, expected );

  test.close( 'dst:string' );

  /* */

  test.open( 'no dstPath' );

  test.case = 'no orphan';
  var expected = { '/One' : true, '/Str' : 'str', '/EmptyString1' : '', '/EmptyString2' : '', '/Null1' : '', '/Null2' : '' }
  var dst = { '/One' : 1, '/EmptyString1' : '', '/Null1' : null }
  var src = { '/One' : 0, '/Str' : 'str', '/EmptyString2' : '', '/Null2' : null }
  var got = path.mapPrepend( dst, src );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'dst has orphan';
  var expected = { '/One' : true, '/Str' : 'str', '/EmptyString1' : '/dst', '/EmptyString2' : '/dst', '/Null1' : '/dst', '/Null2' : '/dst' }
  var dst = { '/One' : 1, '/EmptyString1' : '', '/Null1' : null, '' : '/dst' }
  var src = { '/One' : 0, '/Str' : 'str', '/EmptyString2' : '', '/Null2' : null }
  var got = path.mapPrepend( dst, src );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src has orphan';
  var expected = { '/One' : true, '/Str' : 'str', '/EmptyString1' : '/dst', '/EmptyString2' : '/dst', '/Null1' : '/dst', '/Null2' : '/dst' }
  var dst = { '/One' : 1, '/EmptyString1' : '', '/Null1' : null }
  var src = { '/One' : 0, '/Str' : 'str', '/EmptyString2' : '', '/Null2' : null, '' : '/dst' }
  var got = path.mapPrepend( dst, src );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'dst has orphan, no place for it';
  var expected = { '/One' : true, '' : '/dst' }
  var dst = { '/One' : 1, '' : '/dst' }
  var src = { '/One' : 0 }
  var got = path.mapPrepend( dst, src );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src has orphan, no place for it';
  var expected = { '/One' : true, '' : '/dst' }
  var dst = { '/One' : 1 }
  var src = { '/One' : 0, '' : '/dst' }
  var got = path.mapPrepend( dst, src );
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'no dstPath' )

  test.close( 'defaultDstPath:true' );

  /* */

  test.open( 'src:null' )

  test.case = 'src:null, dstPath:str';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '/dstx', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = '/dstx'
  var got = path.mapPrepend( dst, null, dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:null';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapPrepend( dst, null, null );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty str';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapPrepend( dst, null, '' );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 1';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [];
  var got = path.mapPrepend( dst, null, dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 2';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ '', '' ];
  var got = path.mapPrepend( dst, null, dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 2';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ null, null ];
  var got = path.mapPrepend( dst, null, dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:true';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapPrepend( dst, null, true );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:false';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapPrepend( dst, null, false );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:array';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : [ '/a', '/b' ], '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ '/a', '/b' ]
  var got = path.mapPrepend( dst, null, dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'src:null' )

  /* */

  test.open( 'src:empty str' )

  test.case = 'src:null, dstPath:str';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '/dstx', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = '/dstx'
  var got = path.mapPrepend( dst, '', dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:null';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapPrepend( dst, '', null );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty str';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapPrepend( dst, '', '' );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 1';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [];
  var got = path.mapPrepend( dst, '', dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 2';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ '', '' ];
  var got = path.mapPrepend( dst, '', dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 2';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ null, null ];
  var got = path.mapPrepend( dst, '', dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:true';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapPrepend( dst, '', true );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:false';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' :  [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapPrepend( dst, '', false );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:array';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : [ '/a', '/b' ], '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ '/a', '/b' ]
  var got = path.mapPrepend( dst, '', dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'src:empty str' )

  /* */

  test.open( 'src:empty arr' )

  test.case = 'src:null, dstPath:str';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '/dstx', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = '/dstx'
  var got = path.mapPrepend( dst, [ '', null, '' ], dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:null';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapPrepend( dst, [ '', null, '' ], null );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty str';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapPrepend( dst, [ '', null, '' ], '' );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 1';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [];
  var got = path.mapPrepend( dst, [ '', null, '' ], dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 2';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ '', '' ];
  var got = path.mapPrepend( dst, [ '', null, '' ], dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 2';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ null, null ];
  var got = path.mapPrepend( dst, [ '', null, '' ], dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:true';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapPrepend( dst, [ '', null, '' ], true );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:false';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapPrepend( dst, [ '', null, '' ], false );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:array';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : [ '/a', '/b' ], '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ '/a', '/b' ];
  var got = path.mapPrepend( dst, [ '', null, '' ], dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'src:empty arr' )

  /* */

  test.open( 'src:empty map' )

  test.case = 'src:null, dstPath:str';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '/dstx', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = '/dstx'
  var got = path.mapPrepend( dst, { '' : '' }, dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:null';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapPrepend( dst, { '' : '' }, null );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty str';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapPrepend( dst, { '' : '' }, '' );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 1';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [];
  var got = path.mapPrepend( dst, { '' : '' }, dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 2';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ '', '' ];
  var got = path.mapPrepend( dst, { '' : '' }, dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:empty array 2';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : '', '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ null, null ];
  var got = path.mapPrepend( dst, { '' : '' }, dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:true';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapPrepend( dst, { '' : '' }, true );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:false';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapPrepend( dst, { '' : '' }, false );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, dstPath:array';
  var expected = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : [ '/a', '/b' ], '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dst = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var dstPath = [ '/a', '/b' ];
  var got = path.mapPrepend( dst, { '' : '' }, dstPath );
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'src:empty map' )

  /* */

  test.open( 'dst:map' );

  test.case = 'src:string';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : true }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapPrepend( dst, '/a/b', true );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:array';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : true, '/c/d' : true }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapPrepend( dst, [ '/a/b', '/c/d' ], true );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:array';
  var expected = { '/wasTrue' : true, '/wasFalse' : false }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapPrepend( dst, [ '/wasTrue', '/wasFalse' ], true );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:map with null';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : true, '/c/d' : true }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapPrepend( dst, { '/a/b' : null, '/c/d' : null }, true );
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'dst:map' );

  test.open( 'dst:map, collision' );

  test.case = 'dst is true';
  var exp = { '/One' : false, '/Zero' : true, '/True' : true, '/False' : true, '/Null' : true, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : [], '/EmptyArray2' : [], '/EmptyArray3' : [] }
  var dst = { '/One' : 0, '/Zero' : 1, '/True' : true, '/False' : true, '/Null' : true, '/String1' : true, '/String2' : true, '/Array' : true, '/Object' : true, '/EmptyArray1' : [ '' ], '/EmptyArray2' : [], '/EmptyArray3' : [ null ] }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapPrepend( dst, src, true );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is false';
  var exp = { '/One' : true, '/Zero' : false, '/True' : false, '/False' : false, '/Null' : false, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : true, '/EmptyArray2' : true, '/EmptyArray3' : true }
  var dst = { '/True' : false, '/False' : false, '/Null' : false, '/String1' : false, '/String2' : false, '/Array' : false, '/Object' : false }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapPrepend( dst, src, true );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is 1';
  var exp = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : true, '/Null' : true, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : true, '/EmptyArray2' : true, '/EmptyArray3' : true }
  var dst = { '/True' : 1, '/False' : 1, '/Null' : 1, '/String1' : 1, '/String2' : 1, '/Array' : 1, '/Object' : 1 }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapPrepend( dst, src, true );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is 0';
  var exp = { '/One' : true, '/Zero' : false, '/True' : false, '/False' : false, '/Null' : false, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : true, '/EmptyArray2' : true, '/EmptyArray3' : true }
  var dst = { '/True' : 0, '/False' : 0, '/Null' : 0, '/String1' : 1, '/String2' : 0, '/Array' : 0, '/Object' : 0 }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapPrepend( dst, src, true );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is null';
  var exp = { '/One' : true, '/Zero' : false, '/True' : false, '/False' : false, '/Null' : true, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : true, '/EmptyArray2' : true, '/EmptyArray3' : true }
  var dst = { '/True' : null, '/False' : null, '/Null' : null, '/String1' : null, '/String2' : null, '/Array' : null, '/Object' : null }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : false, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapPrepend( dst, src, true );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is string';
  var exp = { '/One' : true, '/Zero' : false, '/True' : '/dir2', '/False' : '/dir2', '/Null' : '/dir2', '/String1' : [ '/dir1', '/dir2' ], '/String2' : [ '/dir2' ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : [ obj1, '/dir2' ], '/EmptyArray1' : true, '/EmptyArray2' : true, '/EmptyArray3' : true }
  var dst = { '/True' : '/dir2', '/False' : '/dir2', '/Null' : '/dir2', '/String1' : '/dir2', '/String2' : '/dir2', '/Array' : '/dir2', '/Object' : '/dir2' }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapPrepend( dst, src, true );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is array';
  var exp = { '/True' : [ '/dir2', '/dir3' ], '/False' : [ '/dir2', '/dir3' ], '/Null' : [ '/dir2', '/dir3' ], '/String1' : [ '/dir1', '/dir2', '/dir3' ], '/String2' : [ '/dir2', '/dir3' ], '/Array' : [ '/dir1', '/dir2', '/dir3' ], '/Object' : [ obj1, 'dst1', 'dst2' ], '/One' : true, '/Zero' : false, '/EmptyArray1' : true, '/EmptyArray2' : true, '/EmptyArray3' : true }
  var dst = { '/True' : [ '/dir2', '/dir3' ], '/False' : [ '/dir2', '/dir3' ], '/Null' : [ '/dir2', '/dir3' ], '/String1' : [ '/dir2', '/dir3' ], '/String2' : [ '/dir2', '/dir3' ], '/Array' : [ '/dir2', '/dir3' ], '/Object' : [ 'dst1', 'dst2' ] }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapPrepend( dst, src, true );
  test.identical( got, exp );
  test.true( got === dst );

  test.close( 'dst:map, collision' );

  /* - */

  test.open( 'defaultDstPath:false' )

  /* - */

  test.open( 'dst:null' );

  test.case = 'src:string';
  var expected = { '/a/b' : false }
  var got = path.mapPrepend( null, '/a/b', false );
  test.identical( got, expected );

  test.case = 'src:array';
  var expected = { '/a/b' : false, '/c/d' : false }
  var got = path.mapPrepend( null, [ '/a/b', '/c/d' ], false );
  test.identical( got, expected );

  test.case = 'src:map with null';
  var expected = { '/a/b' : false, '/c/d' : false, '/true' : true, '/false' : false }
  var got = path.mapPrepend( null, { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, false );
  test.identical( got, expected );

  test.close( 'dst:null' );

  /* */

  test.open( 'dst:string' );

  test.case = 'src:string';
  var expected = { '/z' : false, '/a/b' : false }
  var got = path.mapPrepend( '/z', '/a/b', false );
  test.identical( got, expected );

  test.case = 'src:array';
  var expected = { '/z' : false, '/a/b' : false, '/c/d' : false }
  var got = path.mapPrepend( '/z', [ '/a/b', '/c/d' ], false );
  test.identical( got, expected );

  test.case = 'src:map with null';
  var expected = { '/z' : false, '/a/b' : false, '/c/d' : false, '/true' : true, '/false' : false }
  var got = path.mapPrepend( '/z', { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, false );
  test.identical( got, expected );

  test.close( 'dst:string' );

  /* */

  test.open( 'dst:map' );

  test.case = 'src:string';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : false }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapPrepend( dst, '/a/b', false );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:array';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : false, '/c/d' : false }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapPrepend( dst, [ '/a/b', '/c/d' ], false );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:map with null';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : false, '/c/d' : false, '/true' : true, '/false' : false }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapPrepend( dst, { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, false );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/wasNull' : null }
  var dst = { '/wasTrue' : true, '/wasFalse' : false, '/wasNull' : null }
  var got = path.mapPrepend( dst, null, false );
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'dst:map' );

  /* */

  test.open( 'dst:map, collision' );

  test.case = 'dst is true';
  var exp = { '/One' : false, '/Zero' : true, '/True' : true, '/False' : true, '/Null' : true, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : [], '/EmptyArray2' : [], '/EmptyArray3' : [] }
  var dst = { '/One' : 0, '/Zero' : 1, '/True' : true, '/False' : true, '/Null' : true, '/String1' : true, '/String2' : true, '/Array' : true, '/Object' : true, '/EmptyArray1' : [ '' ], '/EmptyArray2' : [], '/EmptyArray3' : [ null ] }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapPrepend( dst, src, false );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is false';
  var exp = { '/One' : true, '/Zero' : false, '/True' : false, '/False' : false, '/Null' : false, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : false, '/EmptyArray2' : false, '/EmptyArray3' : false }
  var dst = { '/True' : false, '/False' : false, '/Null' : false, '/String1' : false, '/String2' : false, '/Array' : false, '/Object' : false }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapPrepend( dst, src, false );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is 1';
  var exp = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : true, '/Null' : true, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : false, '/EmptyArray2' : false, '/EmptyArray3' : false }
  var dst = { '/True' : 1, '/False' : 1, '/Null' : 1, '/String1' : 1, '/String2' : 1, '/Array' : 1, '/Object' : 1 }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapPrepend( dst, src, false );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is 0';
  var exp = { '/True' : false, '/False' : false, '/Null' : false, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/One' : true, '/Zero' : false, '/EmptyArray1' : false, '/EmptyArray2' : false, '/EmptyArray3' : false };
  var dst = { '/True' : 0, '/False' : 0, '/Null' : 0, '/String1' : 0, '/String2' : 0, '/Array' : 0, '/Object' : 0 }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapPrepend( dst, src, false );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is null';
  var exp = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : false, '/Null' : false, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : false, '/EmptyArray2' : false, '/EmptyArray3' : false }
  var dst = { '/True' : null, '/False' : null, '/Null' : null, '/String1' : null, '/String2' : null, '/Array' : null, '/Object' : null }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapPrepend( dst, src, false );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is string';
  var exp = { '/True' : '/dir2', '/False' : '/dir2', '/Null' : '/dir2', '/String1' : [ '/dir1', '/dir2' ], '/String2' : [ '/dir2' ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : [ obj1, '/dir2' ], '/One' : true, '/Zero' : false, '/EmptyArray1' : false, '/EmptyArray2' : false, '/EmptyArray3' : false };
  var dst = { '/True' : '/dir2', '/False' : '/dir2', '/Null' : '/dir2', '/String1' : '/dir2', '/String2' : '/dir2', '/Array' : '/dir2', '/Object' : '/dir2' }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapPrepend( dst, src, false );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is array';
  var exp = { '/True' : [ '/dir2', '/dir3' ], '/False' : [ '/dir2', '/dir3' ], '/Null' : [ '/dir2', '/dir3' ], '/String1' : [ '/dir1', '/dir2', '/dir3' ], '/String2' : [ '/dir2', '/dir3' ], '/Array' : [ '/dir1', '/dir2', '/dir3' ], '/One' : true, '/Zero' : false, '/Object' : [ obj1, '/dir2', '/dir3' ], '/EmptyArray1' : false, '/EmptyArray2' : false, '/EmptyArray3' : false }
  var dst = { '/True' : [ '/dir2', '/dir3' ], '/False' : [ '/dir2', '/dir3' ], '/Null' : [ '/dir2', '/dir3' ], '/String1' : [ '/dir2', '/dir3' ], '/String2' : [ '/dir2', '/dir3' ], '/Array' : [ '/dir2', '/dir3' ], '/Object' : [ '/dir2', '/dir3' ] }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapPrepend( dst, src, false );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is object';
  var exp = { '/True' : obj0, '/False' : obj0, '/Null' : obj0, '/String1' : [ '/dir1', obj0 ], '/String2' : [ '/dir2', obj0 ], '/Array' : [ '/dir1', '/dir2', obj0 ], '/Object' : [ obj1, obj0 ], '/One' : true, '/Zero' : false, '/EmptyArray1' : false, '/EmptyArray2' : false, '/EmptyArray3' : false }
  var dst = { '/True' : obj0, '/False' : obj0, '/Null' : obj0, '/String1' : obj0, '/String2' : obj0, '/Array' : obj0, '/Object' : obj0 }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapPrepend( dst, src, false );
  test.identical( got, exp );
  test.true( got === dst );

  test.close( 'dst:map, collision' );

  /* - */

  test.close( 'defaultDstPath:false' )
  test.open( 'defaultDstPath:array' )

  /* - */

  test.open( 'dst:null' );

  test.case = 'src:string';
  var expected = { '/a/b' : [ '/dir2', '/dir3' ] }
  var got = path.mapPrepend( null, '/a/b', [ '/dir2', '/dir3' ] );
  test.identical( got, expected );

  test.case = 'src:array';
  var expected = { '/a/b' : [ '/dir2', '/dir3' ], '/c/d' : [ '/dir2', '/dir3' ] }
  var got = path.mapPrepend( null, [ '/a/b', '/c/d' ], [ '/dir2', '/dir3' ] );
  test.identical( got, expected );

  test.case = 'src:map with null';
  var expected = { '/a/b' : [ '/dir2', '/dir3' ], '/c/d' : [ '/dir2', '/dir3' ], '/true' : true, '/false' : false }
  var got = path.mapPrepend( null, { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, [ '/dir2', '/dir3' ] );
  test.identical( got, expected );

  test.close( 'dst:null' );

  /* */

  test.open( 'dst:string' );

  test.case = 'src:string';
  var expected = { '/z' : [ '/dir2', '/dir3' ], '/a/b' : [ '/dir2', '/dir3' ] }
  var got = path.mapPrepend( '/z', '/a/b', [ '/dir2', '/dir3' ] );
  test.identical( got, expected );

  test.case = 'src:array';
  var expected = { '/z' : [ '/dir2', '/dir3' ], '/a/b' : [ '/dir2', '/dir3' ], '/c/d' : [ '/dir2', '/dir3' ] }
  var got = path.mapPrepend( '/z', [ '/a/b', '/c/d' ], [ '/dir2', '/dir3' ] );
  test.identical( got, expected );

  test.case = 'src:map with null';
  var expected = { '/z' : [ '/dir2', '/dir3' ], '/a/b' : [ '/dir2', '/dir3' ], '/c/d' : [ '/dir2', '/dir3' ], '/true' : true, '/false' : false }
  var got = path.mapPrepend( '/z', { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, [ '/dir2', '/dir3' ] );
  test.identical( got, expected );

  test.close( 'dst:string' );

  /* */

  test.open( 'dst:map' );

  test.case = 'src:string';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : [ '/dir2', '/dir3' ] }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapPrepend( dst, '/a/b', [ '/dir2', '/dir3' ] );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:array';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : [ '/dir2', '/dir3' ], '/c/d' : [ '/dir2', '/dir3' ] }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapPrepend( dst, [ '/a/b', '/c/d' ], [ '/dir2', '/dir3' ] );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:map with null';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : [ '/dir2', '/dir3' ], '/c/d' : [ '/dir2', '/dir3' ], '/true' : true, '/false' : false }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapPrepend( dst, { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, [ '/dir2', '/dir3' ] );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/wasNull' : [ '/dir1', '/dir2' ] }
  var dst = { '/wasTrue' : true, '/wasFalse' : false, '/wasNull' : null }
  var got = path.mapPrepend( dst, null, [ '/dir1', '/dir2' ] );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null, only bools';
  var expected = { '/wasTrue' : true, '/wasFalse' : false }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapPrepend( dst, null, [ '/dir1', '/dir2' ] );
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'dst:map' );

  /* */

  test.open( 'dst:map, collision' );

  test.case = 'dst is true';
  var exp = { '/One' : false, '/Zero' : true, '/True' : true, '/False' : true, '/Null' : [ '/dir1', '/dir2' ], '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : [ '/dir1', '/dir2' ], '/EmptyArray2' : [ '/dir1', '/dir2' ], '/EmptyArray3' : [ '/dir1', '/dir2' ] };
  var dst = { '/One' : 0, '/Zero' : 1, '/True' : true, '/False' : true, '/Null' : true, '/String1' : true, '/String2' : true, '/Array' : true, '/Object' : true, '/EmptyArray1' : [ '' ], '/EmptyArray2' : [], '/EmptyArray3' : [ null ] };
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapPrepend( dst, src, [ '/dir1', '/dir2' ] );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is false';
  var exp = { '/One' : true, '/Zero' : false, '/True' : false, '/False' : false, '/Null' : [ '/dir1', '/dir2' ], '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : [ '/dir1', '/dir2' ], '/EmptyArray2' : [ '/dir1', '/dir2' ], '/EmptyArray3' : [ '/dir1', '/dir2' ] }
  var dst = { '/True' : false, '/False' : false, '/Null' : false, '/String1' : false, '/String2' : false, '/Array' : false, '/Object' : false }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapPrepend( dst, src, [ '/dir1', '/dir2' ] );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is 1';
  var exp = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : true, '/Null' : [ '/dir1', '/dir2' ], '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : [ '/dir1', '/dir2' ], '/EmptyArray2' : [ '/dir1', '/dir2' ], '/EmptyArray3' : [ '/dir1', '/dir2' ] }
  var dst = { '/True' : 1, '/False' : 1, '/Null' : 1, '/String1' : 1, '/String2' : 1, '/Array' : 1, '/Object' : 1 }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapPrepend( dst, src, [ '/dir1', '/dir2' ] );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is 0';
  var exp = { '/One' : true, '/Zero' : false, '/True' : false, '/False' : false, '/Null' : [ '/dir1', '/dir2' ], '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : [ '/dir1', '/dir2' ], '/EmptyArray2' : [ '/dir1', '/dir2' ], '/EmptyArray3' : [ '/dir1', '/dir2' ] };
  var dst = { '/True' : 0, '/False' : 0, '/Null' : 0, '/String1' : 0, '/String2' : 0, '/Array' : 0, '/Object' : 0 }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : [ '/dir1', '/dir2' ], '/EmptyArray2' : [ '/dir1', '/dir2' ], '/EmptyArray3' : [ '/dir1', '/dir2' ] }
  var got = path.mapPrepend( dst, src, [ '/dir1', '/dir2' ] );
  test.identical( got, exp );
  test.true( got === dst );

  // test.case = 'dst is null';
  // var exp = { '/True' : [ '/dir1', '/dir2' ], '/False' : [ '/dir1', '/dir2' ], '/Null' : [ '/dir1', '/dir2' ], '/String1' : [ '/dir1', '/dir2' ], '/String2' : [ '/dir1', '/dir2' ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : [ '/dir1', '/dir2', obj1 ], '/One' : true, '/Zero' : false, '/EmptyArray1' : [ '/dir1', '/dir2' ], '/EmptyArray2' : [ '/dir1', '/dir2' ], '/EmptyArray3' : [ '/dir1', '/dir2' ] };
  // var dst = { '/True' : null, '/False' : null, '/Null' : null, '/String1' : null, '/String2' : null, '/Array' : null, '/Object' : null }
  // var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  // var got = path.mapPrepend( dst, src, [ '/dir1', '/dir2' ] );
  // test.identical( got, exp );
  // test.true( got === dst );

  test.case = 'dst is string';
  var exp = { '/True' : '/dir2', '/False' : '/dir2', '/One' : true, '/Zero' : false, '/Null' : [ '/dir1', '/dir2' ], '/String1' : [ '/dir1', '/dir2' ], '/String2' : [ '/dir2' ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : [ obj1, '/dir2' ], '/EmptyArray1' : [ '/dir1', '/dir2' ], '/EmptyArray2' : [ '/dir1', '/dir2' ], '/EmptyArray3' : [ '/dir1', '/dir2' ] };
  var dst = { '/True' : '/dir2', '/False' : '/dir2', '/Null' : '/dir2', '/String1' : '/dir2', '/String2' : '/dir2', '/Array' : '/dir2', '/Object' : '/dir2' }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapPrepend( dst, src, [ '/dir1', '/dir2' ] );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is array';
  var exp = { '/True' : [ '/dir2', '/dir3' ], '/False' : [ '/dir2', '/dir3' ], '/One' : true, '/Zero' : false, '/Null' : [ '/dir1', '/dir2', '/dir3' ], '/String1' :  [ '/dir1', '/dir2', '/dir3' ], '/String2' :  [ '/dir2', '/dir3' ], '/Array' :  [ '/dir1', '/dir2', '/dir3' ], '/Object' :  [ obj1, '/dir2', '/dir3' ], '/EmptyArray1' : [ '/dir1', '/dir2' ], '/EmptyArray2' : [ '/dir1', '/dir2' ], '/EmptyArray3' : [ '/dir1', '/dir2' ] };
  var dst = { '/True' : [ '/dir2', '/dir3' ], '/False' : [ '/dir2', '/dir3' ], '/Null' : [ '/dir2', '/dir3' ], '/String1' : [ '/dir2', '/dir3' ], '/String2' : [ '/dir2', '/dir3' ], '/Array' : [ '/dir2', '/dir3' ], '/Object' : [ '/dir2', '/dir3' ] };
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapPrepend( dst, src, [ '/dir1', '/dir2' ] );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is object';
  var exp = { '/True' : obj0, '/False' : obj0, '/Null' : [ '/dir1', '/dir2', obj0 ], '/String1' : [ '/dir1', obj0 ], '/String2' : [ '/dir2', obj0 ], '/Array' : [ '/dir1', '/dir2', obj0 ], '/Object' : [ obj1, obj0 ], '/One' : true, '/Zero' : false, '/EmptyArray1' : [ '/dir1', '/dir2' ], '/EmptyArray2' : [ '/dir1', '/dir2' ], '/EmptyArray3' : [ '/dir1', '/dir2' ] };
  var dst = { '/True' : obj0, '/False' : obj0, '/Null' : obj0, '/String1' : obj0, '/String2' : obj0, '/Array' : obj0, '/Object' : obj0 }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapPrepend( dst, src, [ '/dir1', '/dir2' ] );
  test.identical( got, exp );
  test.true( got === dst );

  test.close( 'dst:map, collision' );

  /* - */

  test.close( 'defaultDstPath:array' )
  test.open( 'defaultDstPath:obj' )

  /* - */

  test.open( 'dst:null' );

  test.case = 'src:string';
  var expected = { '/a/b' : obj2 }
  var got = path.mapPrepend( null, '/a/b', obj2 );
  test.identical( got, expected );

  test.case = 'src:array';
  var expected = { '/a/b' : obj2, '/c/d' : obj2 }
  var got = path.mapPrepend( null, [ '/a/b', '/c/d' ], obj2 );
  test.identical( got, expected );

  test.case = 'src:map with null';
  var expected = { '/a/b' : obj2, '/c/d' : obj2, '/true' : true, '/false' : false }
  var got = path.mapPrepend( null, { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, obj2 );
  test.identical( got, expected );

  test.close( 'dst:null' );

  /* */

  test.open( 'dst:string' );

  test.case = 'src:string';
  var expected = { '/z' : obj2, '/a/b' : obj2 }
  var got = path.mapPrepend( '/z', '/a/b', obj2 );
  test.identical( got, expected );

  test.case = 'src:array';
  var expected = { '/z' : obj2, '/a/b' : obj2, '/c/d' : obj2 }
  var got = path.mapPrepend( '/z', [ '/a/b', '/c/d' ], obj2 );
  test.identical( got, expected );

  test.case = 'src:map with null';
  var expected = { '/z' : obj2, '/a/b' : obj2, '/c/d' : obj2, '/true' : true, '/false' : false }
  var got = path.mapPrepend( '/z', { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, obj2 );
  test.identical( got, expected );

  test.close( 'dst:string' );

  /* */

  test.open( 'dst:map' );

  test.case = 'src:string';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : obj2 }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapPrepend( dst, '/a/b', obj2 );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:array';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : obj2, '/c/d' : obj2 }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapPrepend( dst, [ '/a/b', '/c/d' ], obj2 );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:map with null';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/a/b' : obj2, '/c/d' : obj2, '/true' : true, '/false' : false }
  var dst = { '/wasTrue' : true, '/wasFalse' : false }
  var got = path.mapPrepend( dst, { '/a/b' : null, '/c/d' : null, '/true' : true, '/false' : false }, obj2 );
  test.identical( got, expected );
  test.true( got === dst );

  test.case = 'src:null';
  var expected = { '/wasTrue' : true, '/wasFalse' : false, '/wasNull' : obj2 }
  var dst = { '/wasTrue' : true, '/wasFalse' : false, '/wasNull' : null }
  var got = path.mapPrepend( dst, null, obj2 );
  test.identical( got, expected );
  test.true( got === dst );

  test.close( 'dst:map' );

  /* */

  test.open( 'dst:map, collision' );

  test.case = 'dst is true';
  var exp = { '/One' : false, '/Zero' : true, '/True' : true, '/False' : true, '/Null' : obj2, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : [ obj2 ], '/EmptyArray2' : [ obj2 ], '/EmptyArray3' : [ obj2 ] }
  var dst = { '/One' : 0, '/Zero' : 1, '/True' : true, '/False' : true, '/Null' : true, '/String1' : true, '/String2' : true, '/Array' : true, '/Object' : true, '/EmptyArray1' : [ obj2 ], '/EmptyArray2' : [ obj2 ], '/EmptyArray3' : [ obj2 ] }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapPrepend( dst, src, obj2 );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is false';
  var exp = { '/One' : true, '/Zero' : false, '/True' : false, '/False' : false, '/Null' : obj2, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : obj2, '/EmptyArray2' : obj2, '/EmptyArray3' : obj2 };
  var dst = { '/True' : false, '/False' : false, '/Null' : false, '/String1' : false, '/String2' : false, '/Array' : false, '/Object' : false };
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapPrepend( dst, src, obj2 );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is 1';
  var exp = { '/One' : true, '/Zero' : false, '/True' : true, '/False' : true, '/Null' : obj2, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : obj2, '/EmptyArray2' : obj2, '/EmptyArray3' : obj2 };
  var dst = { '/True' : 1, '/False' : 1, '/Null' : 1, '/String1' : 1, '/String2' : 1, '/Array' : 1, '/Object' : 1 };
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapPrepend( dst, src, obj2 );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is 0';
  var exp = { '/One' : true, '/Zero' : false, '/True' : false, '/False' : false, '/Null' : obj2, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1, '/EmptyArray1' : obj2, '/EmptyArray2' : obj2, '/EmptyArray3' : obj2 };
  var dst = { '/True' : 0, '/False' : 0, '/Null' : 0, '/String1' : 0, '/String2' : 0, '/Array' : 0, '/Object' : 0 };
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapPrepend( dst, src, obj2 );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is null';
  var exp = { '/One' : true, '/Zero' : false, '/True' : obj2, '/False' : obj2, '/Null' : [ obj2 ], '/String1' : [ '/dir1', obj2 ], '/String2' : [ '/dir2', obj2 ], '/Array' : [ '/dir1', '/dir2', obj2 ], '/Object' : [ obj1, obj2 ], '/EmptyArray1' : obj2, '/EmptyArray2' : obj2, '/EmptyArray3' : obj2 }
  var dst = { '/True' : null, '/False' : null, '/Null' : null, '/String1' : null, '/String2' : null, '/Array' : null, '/Object' : null }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 }
  var got = path.mapPrepend( dst, src, obj2 );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is string';
  var exp = { '/True' : '/dir2', '/False' : '/dir2', '/Null' : [ obj2, '/dir2' ], '/String1' : [ '/dir1', '/dir2' ], '/String2' : [ '/dir2' ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : [ obj1, '/dir2' ], '/One' : true, '/Zero' : false, '/EmptyArray1' : obj2, '/EmptyArray2' : obj2, '/EmptyArray3' : obj2 };
  var dst = { '/True' : '/dir2', '/False' : '/dir2', '/Null' : '/dir2', '/String1' : '/dir2', '/String2' : '/dir2', '/Array' : '/dir2', '/Object' : '/dir2' };
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapPrepend( dst, src, obj2 );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is array';
  var exp = { '/True' : [ '/dir2', '/dir3' ], '/False' : [ '/dir2', '/dir3' ], '/Null' : [ obj2, '/dir2', '/dir3' ], '/String1' : [ '/dir1', '/dir2', '/dir3' ], '/String2' : [ '/dir2', '/dir3' ], '/Array' : [ '/dir1', '/dir2', '/dir3' ], '/Object' : [ obj1, '/dir2', '/dir3' ], '/One' : true, '/Zero' : false, '/EmptyArray1' : obj2, '/EmptyArray2' : obj2, '/EmptyArray3' : obj2 };
  var dst = { '/True' : [ '/dir2', '/dir3' ], '/False' : [ '/dir2', '/dir3' ], '/Null' : [ '/dir2', '/dir3' ], '/String1' : [ '/dir2', '/dir3' ], '/String2' : [ '/dir2', '/dir3' ], '/Array' : [ '/dir2', '/dir3' ], '/Object' : [ '/dir2', '/dir3' ] }
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapPrepend( dst, src, obj2 );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is object';
  var exp = { '/True' : obj0, '/False' : obj0, '/Null' : [ obj2, obj0 ], '/String1' : [ '/dir1', obj0 ], '/String2' : [ '/dir2', obj0 ], '/Array' : [ '/dir1', '/dir2', obj0 ], '/Object' : [ obj1, obj0 ], '/One' : true, '/Zero' : false, '/EmptyArray1' : obj2, '/EmptyArray2' : obj2, '/EmptyArray3' : obj2 };
  var dst = { '/True' : obj0, '/False' : obj0, '/Null' : obj0, '/String1' : obj0, '/String2' : obj0, '/Array' : obj0, '/Object' : obj0 };
  var src = { '/One' : 1, '/Zero' : 0, '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/EmptyArray1' : [], '/EmptyArray2' : [ '', '' ], '/EmptyArray3' : [ null, null ], '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  var got = path.mapPrepend( dst, src, obj2 );
  test.identical( got, exp );
  test.true( got === dst );

  test.case = 'dst is the same object';
  var exp = { '/True' : true, '/False' : obj0, '/Null' : [ obj0 ], '/String1' : [ '/dir1', obj0 ], '/String2' : [ '/dir2', obj0 ], '/Array' : [ '/dir1', '/dir2', obj0 ], '/Object' : [ obj0 ] };
  var dst = { '/True' : true, '/False' : obj0, '/Null' : obj0, '/String1' : obj0, '/String2' : obj0, '/Array' : obj0, '/Object' : obj0 };
  var src = { '/True' : true, '/False' : false, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj0 };
  var got = path.mapPrepend( dst, src, obj0 );
  test.identical( got, exp );
  test.true( got === dst );

  test.close( 'dst:map, collision' );

  test.close( 'defaultDstPath:obj' )

  /* - */

  test.open( 'throwing' )

  test.case = 'dstMap=null, srcMap=null, dstPath=map';
  var dstMap = null;
  var srcMap = null;
  var dstPath = { '/True' : true, '/False' : false, '/Zero' : 0, '/One' : 1, '/Null' : null, '/String1' : '/dir1', '/String2' : '/dir2', '/Array' : [ '/dir1', '/dir2' ], '/Object' : obj1 };
  test.shouldThrowErrorSync( () => path.mapPrepend( dstMap, srcMap, dstPath ) );
  test.shouldThrowErrorSync( () => path.mapPrepend( {}, {}, {} ) );

  test.close( 'throwing' )

}

//

function mapsPair( test )
{
  let path = _.path;

  test.case = 'dst=map with src=string, dst=string and src=string';
  var exp = { '/src' : '/dst' }
  var dst = { '/src' : '/dst' }
  var src = '/src';
  var got = path.mapsPair( dst, src );
  test.identical( got, exp );
  test.true( got !== dst );
  test.true( got !== src );

  test.case = 'dst=null, src=null';
  var exp = null;
  var dst = null;
  var src = null;
  var got = path.mapsPair( dst, src );
  test.identical( got, exp );

  test.case = 'src=null, dst=dot to null';
  var exp = null;
  var dst = { '.' : null };
  var src = null;
  var got = path.mapsPair( dst, src );
  test.identical( got, exp );

  test.case = 'dst=null, src=dot to null';
  var exp = null;
  var dst = null;
  var src = { '.' : null };
  var got = path.mapsPair( dst, src );
  test.identical( got, exp );

  test.case = 'src=null, dst=empty to null';
  var exp = null;
  var dst = { '' : null };
  var src = null;
  var got = path.mapsPair( dst, src );
  test.identical( got, exp );

  test.case = 'dst=null, src=empty to null';
  var exp = null;
  var dst = null;
  var src = { '' : null };
  var got = path.mapsPair( dst, src );
  test.identical( got, exp );

  test.case = 'src=null, dst=empty to empty';
  var exp = null;
  var dst = { '' : '' };
  var src = null;
  var got = path.mapsPair( dst, src );
  test.identical( got, exp );

  test.case = 'dst=null, src=empty to empty';
  var exp = null;
  var dst = null;
  var src = { '' : '' };
  var got = path.mapsPair( dst, src );
  test.identical( got, exp );

  test.case = 'dst=str, src=null';
  var exp = { '' : 'dir' };
  var dst = 'dir';
  var src = null;
  var got = path.mapsPair( dst, src );
  test.identical( got, exp );
  test.true( got !== dst );
  test.true( got !== src );

  test.case = 'dst=null, src=str';
  var exp = { 'dir' : '' };
  var dst = null;
  var src = 'dir';
  var got = path.mapsPair( dst, src );
  test.identical( got, exp );
  test.true( got !== dst );
  test.true( got !== src );

  test.case = 'dst=str, src=map with some str and null in dst';
  var exp = { 'c' : 'c2', 'd' : 'dir' };
  var dst = 'dir';
  var src = { 'c' : 'c2', 'd' : null };
  var got = path.mapsPair( dst, src );
  test.identical( got, exp );
  test.true( got !== dst );
  test.true( got !== src );

  test.case = 'dst=str, src=dot to null';
  var exp = { '.' : '/a/dst/file' }
  var dst = '/a/dst/file';
  var src = { '.' : null }
  var got = path.mapsPair( dst, src );
  test.identical( got, exp );
  test.true( got !== dst );
  test.true( got !== src );

  test.case = 'dst=dot, src=map';
  var exp = { 'c' : 'c2', 'd' : '.' }
  var dst = '.';
  var src = { 'c' : 'c2', 'd' : null }
  var got = path.mapsPair( dst, src );
  test.identical( got, exp );
  test.true( got !== dst );
  test.true( got !== src );

  test.case = 'dst=map with src=dot and dst=null, dst=map with src=dot and dst=null';
  var exp = { '.' : '' }
  var dst = { '.' : null }
  var src = { '.' : null }
  var got = path.mapsPair( dst, src );
  test.identical( got, exp );
  test.true( got !== dst );
  test.true( got !== src );

  test.case = 'dst=map with src=dot and dst=null, dst=map with src=dot and dst=null';
  var exp = { '/src' : '/dst' }
  var dst = { '/src' : '/dst' }
  var src = '/src'
  var got = path.mapsPair( dst, src );
  test.identical( got, exp );
  test.true( got !== dst );
  test.true( got !== src );

  test.case = 'dst=map with src=string, dst=empty and dst=string';
  var exp = { '/src' : '/dst' }
  var dst = { '' : '/dst' }
  var src = '/src';
  var got = path.mapsPair( dst, src );
  test.identical( got, exp );
  test.true( got !== dst );
  test.true( got !== src );

}

//

function simplify( test )
{
  /* simple tests, not a string, not an array, not a map */

  test.case = 'number';
  var got = _.path.simplify( 2 );
  test.identical( got, 2 );

  test.case = 'number - boolLike';
  var got = _.path.simplify( 1 );
  test.identical( got, true );

  test.case = 'undefined';
  var got = _.path.simplify( undefined );
  test.identical( got, undefined );

  test.case = 'boolLike';
  var got = _.path.simplify( true );
  test.identical( got, true );

  test.case = 'instance of constructor';
  function constr1( val )
  {
    this.value = val;
    return this;
  }
  var obj = new constr1( '/dir' );
  var got = _.path.simplify( obj );
  test.identical( got, obj );
  test.true( got === obj );

  /* simple tests with null and strings */

  test.case = 'null';
  var got = _.path.simplify( null );
  test.identical( got, '' );

  test.case = 'string';
  var got = _.path.simplify( '' );
  test.identical( got, '' );

  var got = _.path.simplify( '/string' );
  test.identical( got, '/string' );

  /* tests with arrays of paths */

  test.case = 'empty array';
  var got = _.path.simplify( [] );
  test.identical( got, '' );

  test.case = 'array has one path';
  var src = [ '/dir1' ];
  var got = _.path.simplify( src );
  test.identical( got, '/dir1' );

  test.case = 'simple array of paths';
  var src = [ '/dir1', '/dir2', '/dir3' ];
  var got = _.path.simplify( src );
  var expected = [ '/dir1', '/dir2', '/dir3' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'array has duplicates';
  var src = [ '/dir1', '/dir2', '/dir3', '/dir2' ];
  var got = _.path.simplify( src );
  var expected = [ '/dir1', '/dir2', '/dir3' ];
  test.identical( got, expected );

  var src = [ '/dir1', '/dir2', '/dir3', '/dir2', '/dir3', '/dir2' ];
  var got = _.path.simplify( src );
  var expected = [ '/dir1', '/dir2', '/dir3' ];
  test.identical( got, expected );

  test.case = 'array has empty strings and null';
  var src = [ '/dir1', '', '/dir2', '', '/dir3', null, '', '/path' ];
  var got = _.path.simplify( src );
  var expected = [ '/dir1', '/dir2', '/dir3', '/path' ];
  test.identical( got, expected );

  test.case = 'array has empty strings and nulls, one argument in result';
  var src = [ '/dir1', '', null, '', null, '' ];
  var got = _.path.simplify( src );
  var expected = '/dir1';
  test.identical( got, expected );

  test.case = 'array with empty strings and nulls';
  var src = [ '', '', null, null, '' ];
  var got = _.path.simplify( src );
  var expected = '';
  test.identical( got, expected );

  /* tests with map of paths */

  test.case = 'empty map';
  var got = _.path.simplify( {} );
  test.identical( got, '' );

  test.case = 'key is empty string, value is empty string';
  var got = _.path.simplify( { '' : '' } );
  test.identical( got, '' );

  test.case = 'key is empty string';
  var src = { '' : '/dir' };
  var got = _.path.simplify( src );
  test.identical( got, { '' : '/dir' } );
  test.true( got === src );

  test.case = 'key, value is empty string';
  var got = _.path.simplify( { '/dir1' : '' } );
  test.identical( got, '/dir1' );

  var src = { '/dir1' : '', '' : '' };
  var got = _.path.simplify( src );
  test.identical( got, { '/dir1' : '' } );
  test.notIdentical( got, '/dir1' );
  test.true( got === src );

  test.case = 'key, value is array';
  var src = { '/dir1' : [ '/dir1', '/dir2' ], '/dir2' : '/a/b' };
  var got = _.path.simplify( src );
  test.identical( got, { '/dir1' : [ '/dir1', '/dir2' ], '/dir2' : '/a/b' } );
  test.true( got === src );

  var src = { '/dir1' : [ '/dir1', null, '', '/dir2', '' ], '/dir2' : '/a/b' };
  var got = _.path.simplify( src );
  test.identical( got, { '/dir1' : [ '/dir1', '/dir2' ], '/dir2' : '/a/b' } );
  test.true( got === src );

  test.case = 'complex map of paths';
  function constr2( val )
  {
    this.value = val;
    return this;
  }
  var obj = new constr2( '/dir' );
  var src =
  {
    '/false' : false,
    '/true' : true,
    '/undefined' : undefined,
    '/null' : null,
    '/string' : '/dir',
    '/emptyString' : '',
    '' : '',
    '/number' : 10,
    '/array' : [ '', '/', '/dir' ],
    '/emptyArray' : [],
    '/emptyMap' : {},
    '/map' : { '/str' : '/dir2' },
    '/instance' : obj,
  };
  var got = _.path.simplify( src );
  test.identical( got, src );
  test.true( got === src );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'without arguments';
  test.shouldThrowErrorSync( () => _.path.simplify() );

  test.case = 'extra arguments';
  test.shouldThrowErrorSync( () => _.path.simplify( '', '' ) );
}

//

function simplifyDst( test )
{
  /* simple tests, not a string, not an array, not a map */

  test.case = 'number';
  var got = _.path.simplifyDst( 2 );
  test.identical( got, 2 );

  test.case = 'number - boolLike';
  var got = _.path.simplifyDst( 1 );
  test.identical( got, true );

  test.case = 'undefined';
  var got = _.path.simplifyDst( undefined );
  test.identical( got, undefined );

  test.case = 'boolLike';
  var got = _.path.simplifyDst( true );
  test.identical( got, true );

  test.case = 'instance of constructor';
  function constr1( val )
  {
    this.value = val;
    return this;
  }
  var obj = new constr1( '/dir' );
  var got = _.path.simplifyDst( obj );
  test.identical( got, obj );
  test.true( got === obj );

  /* simple tests with null and strings */

  test.case = 'null';
  var got = _.path.simplifyDst( null );
  test.identical( got, '' );

  test.case = 'string';
  var got = _.path.simplifyDst( '' );
  test.identical( got, '' );

  var got = _.path.simplifyDst( '/string' );
  test.identical( got, '/string' );

  /* tests with arrays of paths */

  test.case = 'empty array';
  var got = _.path.simplifyDst( [] );
  test.identical( got, '' );

  test.case = 'array has one path';
  var src = [ '/dir1' ];
  var got = _.path.simplifyDst( src );
  test.identical( got, '/dir1' );

  test.case = 'simple array of paths';
  var src = [ '/dir1', '/dir2', '/dir3' ];
  var got = _.path.simplifyDst( src );
  var expected = [ '/dir1', '/dir2', '/dir3' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'array has duplicates';
  var src = [ '/dir1', '/dir2', '/dir3', '/dir2' ];
  var got = _.path.simplifyDst( src );
  var expected = [ '/dir1', '/dir2', '/dir3' ];
  test.identical( got, expected );

  var src = [ '/dir1', '/dir2', '/dir3', '/dir2', '/dir3', '/dir2' ];
  var got = _.path.simplifyDst( src );
  var expected = [ '/dir1', '/dir2', '/dir3' ];
  test.identical( got, expected );

  test.case = 'array has empty strings and null';
  var src = [ '/dir1', '', '/dir2', '', '/dir3', null, '', '/path' ];
  var got = _.path.simplifyDst( src );
  var expected = [ '/dir1', '/dir2', '/dir3', '/path' ];
  test.identical( got, expected );

  test.case = 'array has empty strings and nulls, one argument in result';
  var src = [ '/dir1', '', null, '', null, '' ];
  var got = _.path.simplifyDst( src );
  var expected = '/dir1';
  test.identical( got, expected );

  test.case = 'array with empty strings and nulls';
  var src = [ '', '', null, null, '' ];
  var got = _.path.simplifyDst( src );
  var expected = '';
  test.identical( got, expected );

  /* tests with map of paths */

  test.case = 'empty map';
  var got = _.path.simplifyDst( {} );
  test.identical( got, '' );

  test.case = 'key is empty string, value is empty string';
  var got = _.path.simplifyDst( { '' : '' } );
  test.identical( got, '' );

  test.case = 'key is empty string';
  var src = { '' : '/dir' };
  var got = _.path.simplifyDst( src );
  test.identical( got, '/dir' );
  test.true( got !== src );

  test.case = 'key, value is empty string';
  var got = _.path.simplifyDst( { '/dir1' : '' } );
  test.identical( got, { '/dir1' : '' } );

  var src = { '/dir1' : '', '' : '' };
  var got = _.path.simplifyDst( src );
  test.identical( got, { '/dir1' : '', '' : '' } );
  test.notIdentical( got, { '/dir1' : '' } );
  test.true( got === src );

  test.case = 'key, value is array';
  var src = { '/dir1' : [ '/dir1', '/dir2' ], '/dir2' : '/a/b' };
  var got = _.path.simplifyDst( src );
  test.identical( got, { '/dir1' : [ '/dir1', '/dir2' ], '/dir2' : '/a/b' } );
  test.true( got === src );

  var src = { '/dir1' : [ '/dir1', null, '', '/dir2', '' ], '/dir2' : '/a/b' };
  var got = _.path.simplifyDst( src );
  test.identical( got, { '/dir1' : [ '/dir1', '/dir2' ], '/dir2' : '/a/b' } );
  test.true( got === src );

  test.case = 'complex map of paths';
  function constr2( val )
  {
    this.value = val;
    return this;
  }
  var obj = new constr2( '/dir' );
  var src =
  {
    '/false' : false,
    '/true' : true,
    '/undefined' : undefined,
    '/null' : null,
    '/string' : '/dir',
    '/emptyString' : '',
    '' : '',
    '/number' : 10,
    '/array' : [ '', '/', '/dir' ],
    '/emptyArray' : [],
    '/emptyMap' : {},
    '/map' : { '/str' : '/dir2' },
    '/instance' : obj,
  };
  var got = _.path.simplifyDst( src );
  test.identical( got, src );
  test.true( got === src );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'without arguments';
  test.shouldThrowErrorSync( () => _.path.simplifyDst() );

  test.case = 'extra arguments';
  test.shouldThrowErrorSync( () => _.path.simplifyDst( '', '' ) );
}

//

function simplifyInplace( test )
{
  /* simple tests, not a string, not an array, not a map */

  test.case = 'number';
  var got = _.path.simplifyInplace( 2 );
  test.identical( got, 2 );

  test.case = 'number - boolLike';
  var got = _.path.simplifyInplace( 1 );
  test.identical( got, true );

  test.case = 'undefined';
  var got = _.path.simplifyInplace( undefined );
  test.identical( got, undefined );

  test.case = 'boolLike';
  var got = _.path.simplifyInplace( true );
  test.identical( got, true );

  test.case = 'instance of constructor';
  function constr1( val )
  {
    this.value = val;
    return this;
  }
  var obj = new constr1( '/dir' );
  var got = _.path.simplifyInplace( obj );
  test.identical( got, obj );
  test.true( got === obj );

  /* simple tests with null and strings */

  test.case = 'null';
  var got = _.path.simplifyInplace( null );
  test.identical( got, '' );

  test.case = 'string';
  var got = _.path.simplifyInplace( '' );
  test.identical( got, '' );

  var got = _.path.simplifyInplace( '/string' );
  test.identical( got, '/string' );

  /* tests with arrays of paths */

  test.case = 'empty array';
  var src = [];
  var got = _.path.simplifyInplace( src );
  test.identical( got, [] );
  test.true( got === src );

  test.case = 'array has one path';
  var src = [ '/dir1' ];
  var got = _.path.simplifyInplace( src );
  test.identical( got, [ '/dir1' ] );
  test.true( got === src );

  test.case = 'simple array of paths';
  var src = [ '/dir1', '/dir2', '/dir3' ];
  var got = _.path.simplifyInplace( src );
  var expected = [ '/dir1', '/dir2', '/dir3' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'array has duplicates';
  var src = [ '/dir1', '/dir2', '/dir3', '/dir2' ];
  var got = _.path.simplifyInplace( src );
  var expected = [ '/dir1', '/dir2', '/dir3' ];
  test.identical( got, expected );
  test.true( got === src );

  var src = [ '/dir1', '/dir2', '/dir3', '/dir2', '/dir3', '/dir2' ];
  var got = _.path.simplifyInplace( src );
  var expected = [ '/dir1', '/dir2', '/dir3' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'array has empty strings and null';
  var src = [ '/dir1', '', '/dir2', '', '/dir3', null, '', '/path' ];
  var got = _.path.simplifyInplace( src );
  var expected = [ '/dir1', '/dir2', '/dir3', '/path' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'array has empty strings and nulls, one argument in result';
  var src = [ '/dir1', '', null, '', null, '' ];
  var got = _.path.simplifyInplace( src );
  var expected = [ '/dir1' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'array with empty strings and nulls';
  var src = [ '', '', null, null, '' ];
  var got = _.path.simplifyInplace( src );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  /* tests with map of paths */

  test.case = 'empty map';
  var src = {};
  var got = _.path.simplifyInplace( src );
  test.identical( got, {} );
  test.true( got === src );

  test.case = 'key is empty string, value is empty string';
  var got = _.path.simplifyInplace( { '' : '' } );
  test.identical( got, { '' : '' } );

  test.case = 'key is empty string';
  var src = { '' : '/dir' };
  var got = _.path.simplifyInplace( src );
  test.identical( got, { '' : '/dir' } );
  test.true( got === src );

  test.case = 'key, value is empty string';
  var got = _.path.simplifyInplace( { '/dir1' : '' } );
  test.identical( got, { '/dir1' : '' } );

  var src = { '/dir1' : '', '' : '' };
  var got = _.path.simplifyInplace( src );
  test.identical( got, { '/dir1' : '', '' : '' } );
  test.notIdentical( got, '/dir1' );
  test.true( got === src );

  test.case = 'key, value is array';
  var src = { '/dir1' : [ '/dir1', '/dir2' ], '/dir2' : '/a/b' };
  var got = _.path.simplifyInplace( src );
  test.identical( got, { '/dir1' : [ '/dir1', '/dir2' ], '/dir2' : '/a/b' } );
  test.true( got === src );

  var src = { '/dir1' : [ '/dir1', null, '', '/dir2', '' ], '/dir2' : '/a/b' };
  var got = _.path.simplifyInplace( src );
  test.identical( got, { '/dir1' : [ '/dir1', '/dir2' ], '/dir2' : '/a/b' } );
  test.true( got === src );

  test.case = 'complex map of paths';
  function constr2( val )
  {
    this.value = val;
    return this;
  }
  var obj = new constr2( '/dir' );
  var src =
  {
    '/false' : false,
    '/true' : true,
    '/undefined' : undefined,
    '/null' : null,
    '/string' : '/dir',
    '/emptyString' : '',
    '' : '',
    '/number' : 10,
    '/array' : [ '', '/', '/dir' ],
    '/emptyArray' : [],
    '/emptyMap' : {},
    '/map' : { '/str' : '/dir2' },
    '/instance' : obj,
  };
  var got = _.path.simplifyInplace( src );
  test.identical( got, src );
  test.true( got === src );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'without arguments';
  test.shouldThrowErrorSync( () => _.path.simplifyInplace() );

  test.case = 'extra arguments';
  test.shouldThrowErrorSync( () => _.path.simplifyInplace( '', '' ) );
}

//

function simplify_( test )
{
  /* simple tests, not a string, not an array, not a map */

  test.case = 'number';
  var got = _.path.simplify_( 2 );
  test.identical( got, 2 );

  test.case = 'number - boolLike';
  var got = _.path.simplify_( 1 );
  test.identical( got, true );

  test.case = 'undefined';
  var got = _.path.simplify_( undefined );
  test.identical( got, undefined );

  test.case = 'boolLike';
  var got = _.path.simplify_( true );
  test.identical( got, true );

  test.case = 'instance of constructor';
  function constr1( val )
  {
    this.value = val;
    return this;
  }
  var obj = new constr1( '/dir' );
  var got = _.path.simplify_( obj );
  test.identical( got, obj );
  test.true( got === obj );

  /* simple tests with null and strings */

  test.case = 'null';
  var got = _.path.simplify_( null );
  test.identical( got, '' );

  test.case = 'string';
  var got = _.path.simplify_( '' );
  test.identical( got, '' );

  var got = _.path.simplify_( '/string' );
  test.identical( got, '/string' );

  /* tests with arrays of paths */

  test.case = 'empty array';
  var got = _.path.simplify_( [] );
  test.identical( got, '' );

  test.case = 'array has one path';
  var src = [ '/dir1' ];
  var got = _.path.simplify_( src );
  test.identical( got, '/dir1' );

  test.case = 'simple array of paths';
  var src = [ '/dir1', '/dir2', '/dir3' ];
  var got = _.path.simplify_( src );
  var expected = [ '/dir1', '/dir2', '/dir3' ];
  test.identical( got, expected );
  test.true( got !== src );

  test.case = 'array has duplicates';
  var src = [ '/dir1', '/dir2', '/dir3', '/dir2' ];
  var got = _.path.simplify_( src );
  var expected = [ '/dir1', '/dir2', '/dir3' ];
  test.identical( got, expected );

  var src = [ '/dir1', '/dir2', '/dir3', '/dir2', '/dir3', '/dir2' ];
  var got = _.path.simplify_( src );
  var expected = [ '/dir1', '/dir2', '/dir3' ];
  test.identical( got, expected );

  test.case = 'array has empty strings and null';
  var src = [ '/dir1', '', '/dir2', '', '/dir3', null, '', '/path' ];
  var got = _.path.simplify_( src );
  var expected = [ '/dir1', '/dir2', '/dir3', '/path' ];
  test.identical( got, expected );

  test.case = 'array has empty strings and nulls, one argument in result';
  var src = [ '/dir1', '', null, '', null, '' ];
  var got = _.path.simplify_( src );
  var expected = '/dir1';
  test.identical( got, expected );

  test.case = 'array with empty strings and nulls';
  var src = [ '', '', null, null, '' ];
  var got = _.path.simplify_( src );
  var expected = '';
  test.identical( got, expected );

  /* tests with map of paths */

  test.case = 'empty map';
  var got = _.path.simplify_( {} );
  test.identical( got, '' );

  test.case = 'key is empty string, value is empty string';
  var got = _.path.simplify_( { '' : '' } );
  test.identical( got, '' );

  test.case = 'key is empty string';
  var src = { '' : '/dir' };
  var got = _.path.simplify_( src );
  test.identical( got, { '' : '/dir' } );
  test.true( got !== src );

  test.case = 'key, value is empty string';
  var got = _.path.simplify_( { '/dir1' : '' } );
  test.identical( got, '/dir1' );

  var src = { '/dir1' : '', '' : '' };
  var got = _.path.simplify_( src );
  test.identical( got, { '/dir1' : '' } );
  test.notIdentical( got, '/dir1' );
  test.true( got !== src );

  test.case = 'key, value is array';
  var src = { '/dir1' : [ '/dir1', '/dir2' ], '/dir2' : '/a/b' };
  var got = _.path.simplify_( src );
  test.identical( got, { '/dir1' : [ '/dir1', '/dir2' ], '/dir2' : '/a/b' } );
  test.true( got !== src );

  var src = { '/dir1' : [ '/dir1', null, '', '/dir2', '' ], '/dir2' : '/a/b' };
  var got = _.path.simplify_( src );
  test.identical( got, { '/dir1' : [ '/dir1', '/dir2' ], '/dir2' : '/a/b' } );
  test.true( got !== src );

  test.case = 'complex map of paths';
  function constr2( val )
  {
    this.value = val;
    return this;
  }
  var obj = new constr2( '/dir' );
  var src =
  {
    '/false' : false,
    '/true' : true,
    '/undefined' : undefined,
    '/null' : null,
    '/string' : '/dir',
    '/emptyString' : '',
    '' : '',
    '/number' : 10,
    '/number/boolLike' : 1,
    '/array' : [ '', '/', '/dir' ],
    '/emptyArray' : [],
    '/emptyMap' : {},
    '/map' : { '/str' : '/dir2' },
    '/instance' : obj,
  };
  var got = _.path.simplify_( src );
  var exp =
  {
    '/false' : false,
    '/true' : true,
    '/undefined' : undefined,
    '/null' : '',
    '/string' : '/dir',
    '/emptyString' : '',
    '/number' : 10,
    '/number/boolLike' : true,
    '/array' : [ '/', '/dir' ],
    '/emptyArray' : '',
    '/emptyMap' : '',
    '/map' : { '/str' : '/dir2' },
    '/instance' : obj,
  };
  test.identical( got, exp );
  test.true( got !== src );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'without arguments';
  test.shouldThrowErrorSync( () => _.path.simplify_() );

  test.case = 'extra arguments';
  test.shouldThrowErrorSync( () => _.path.simplify_( '', '', 'extra' ) );
}

//

function simplifyInplace_( test )
{
  /* simple tests, not a string, not an array, not a map */

  test.case = 'number';
  var src = 2;
  var got = _.path.simplify_( src, src );
  test.identical( got, 2 );

  test.case = 'number - boolLike';
  var src = 1;
  var got = _.path.simplify_( src, src );
  test.identical( got, true );

  test.case = 'undefined';
  var src = undefined;
  var got = _.path.simplify_( src, src );
  test.identical( got, undefined );

  test.case = 'boolean';
  var src = true;
  var got = _.path.simplify_( src, src );
  test.identical( got, true );

  test.case = 'instance of constructor';
  function constr1( val )
  {
    this.value = val;
    return this;
  }
  var src = new constr1( '/dir' );
  var got = _.path.simplify_( src, src );
  test.identical( got, src );
  test.true( got === src );

  /* simple tests with null and strings */

  test.case = 'null';
  var src = null;
  var got = _.path.simplify_( src, src );
  test.identical( got, '' );

  test.case = 'empty string';
  var src = '';
  var got = _.path.simplify_( src, src );
  test.identical( got, '' );

  test.case = 'string';
  var src = '/string'
  var got = _.path.simplify_( src, src );
  test.identical( got, '/string' );

  /* tests with arrays of paths */

  test.case = 'empty array';
  var src = [];
  var got = _.path.simplify_( src, src );
  test.identical( got, [] );
  test.true( got === src );

  test.case = 'array has one path';
  var src = [ '/dir1' ];
  var got = _.path.simplify_( src, src );
  test.identical( got, [ '/dir1' ] );
  test.true( got === src );

  test.case = 'simple array of paths';
  var src = [ '/dir1', '/dir2', '/dir3' ];
  var got = _.path.simplify_( src, src );
  var expected = [ '/dir1', '/dir2', '/dir3' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'array has duplicates';
  var src = [ '/dir1', '/dir2', '/dir3', '/dir2' ];
  var got = _.path.simplify_( src, src );
  var expected = [ '/dir1', '/dir2', '/dir3' ];
  test.identical( got, expected );
  test.true( got === src );

  var src = [ '/dir1', '/dir2', '/dir3', '/dir2', '/dir3', '/dir2' ];
  var got = _.path.simplify_( src, src );
  var expected = [ '/dir1', '/dir2', '/dir3' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'array has empty strings and null';
  var src = [ '/dir1', '', '/dir2', '', '/dir3', null, '', '/path' ];
  var got = _.path.simplify_( src, src );
  var expected = [ '/dir1', '/dir2', '/dir3', '/path' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'array has empty strings and nulls, one argument in result';
  var src = [ '/dir1', '', null, '', null, '' ];
  var got = _.path.simplify_( src, src );
  var expected = [ '/dir1' ];
  test.identical( got, expected );
  test.true( got === src );

  test.case = 'array with empty strings and nulls';
  var src = [ '', '', null, null, '' ];
  var got = _.path.simplify_( src, src );
  var expected = [];
  test.identical( got, expected );
  test.true( got === src );

  /* tests with map of paths */

  test.case = 'empty map';
  var src = {};
  var got = _.path.simplify_( src, src );
  test.identical( got, {} );
  test.true( got === src );

  test.case = 'key is empty string, value is empty string';
  var src = { '' : '' };
  var got = _.path.simplify_( src, src );
  test.identical( got, { '' : '' } );

  test.case = 'key is empty string';
  var src = { '' : '/dir' };
  var got = _.path.simplify_( src, src );
  test.identical( got, { '' : '/dir' } );
  test.true( got === src );

  test.case = 'key, value is empty string';
  var src = { '/dir1' : '' };
  var got = _.path.simplify_( src, src );
  test.identical( got, { '/dir1' : '' } );

  var src = { '/dir1' : '', '' : '' };
  var got = _.path.simplify_( src, src );
  test.identical( got, { '/dir1' : '', '' : '' } );
  test.notIdentical( got, '/dir1' );
  test.true( got === src );

  test.case = 'key, value is array';
  var src = { '/dir1' : [ '/dir1', '/dir2' ], '/dir2' : '/a/b' };
  var got = _.path.simplify_( src, src );
  test.identical( got, { '/dir1' : [ '/dir1', '/dir2' ], '/dir2' : '/a/b' } );
  test.true( got === src );

  var src = { '/dir1' : [ '/dir1', null, '', '/dir2', '' ], '/dir2' : '/a/b' };
  var got = _.path.simplify_( src, src );
  test.identical( got, { '/dir1' : [ '/dir1', '/dir2' ], '/dir2' : '/a/b' } );
  test.true( got === src );

  test.case = 'complex map of paths';
  function constr2( val )
  {
    this.value = val;
    return this;
  }
  var obj = new constr2( '/dir' );
  var src =
  {
    '/false' : false,
    '/true' : true,
    '/undefined' : undefined,
    '/null' : null,
    '/string' : '/dir',
    '/emptyString' : '',
    '' : '',
    '/number' : 10,
    '/array' : [ '', '/', '/dir' ],
    '/emptyArray' : [],
    '/emptyMap' : {},
    '/map' : { '/str' : '/dir2' },
    '/instance' : obj,
  };
  var got = _.path.simplify_( src, src );
  test.identical( got, src );
  test.true( got === src );

}

//

function simplifyWithDst_( test )
{
  /* simple tests, not a string, not an array, not a map */

  test.case = 'number';
  var dst = null;
  var src = 2;
  var got = _.path.simplify_( dst, src );
  test.identical( got, 2 );
  test.true( got !== dst );

  test.case = 'number - boolLike';
  var dst = null;
  var src = 1;
  var got = _.path.simplify_( dst, src );
  test.identical( got, true );
  test.true( got !== dst );

  test.case = 'undefined';
  var dst = [];
  var src = undefined;
  var got = _.path.simplify_( dst, src );
  test.identical( got, [ undefined ] );
  test.true( got === dst );

  test.case = 'boolean';
  var dst = {};
  var src = true;
  var got = _.path.simplify_( dst, src );
  test.identical( got, { 'true' : '' } );
  test.true( got === dst );

  test.case = 'instance of constructor';
  var dst = false;
  function constr1( val )
  {
    this.value = val;
    return this;
  }
  var src = new constr1( '/dir' );
  var got = _.path.simplify_( dst, src );
  test.identical( got, src );
  test.true( got === src );
  test.true( got !== dst );

  /* simple tests with null and strings */

  test.case = 'null';
  var dst = 'str';
  var src = null;
  var got = _.path.simplify_( dst, src );
  test.identical( got, '' );
  test.true( got !== src );
  test.true( got !== dst );

  test.case = 'empty string';
  var dst = [ '/path' ];
  var src = '';
  var got = _.path.simplify_( dst, src );
  test.identical( got, [ '/path' ] );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'string';
  var dst = {};
  var src = '/string'
  var got = _.path.simplify_( dst, src );
  test.identical( got, { '/string' : '' } );
  test.true( got !== src );
  test.true( got === dst );

  /* tests with arrays of paths */

  test.case = 'empty array';
  var dst = null;
  var src = [];
  var got = _.path.simplify_( dst, src );
  test.identical( got, '' );
  test.true( got !== src );
  test.true( got !== dst );

  test.case = 'array has one path';
  var dst = [ '/dir1', '/dir2' ];
  var src = [ '/dir1' ];
  var got = _.path.simplify_( dst, src );
  test.identical( got, [ '/dir1', '/dir2' ] );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'simple array of paths';
  var dst = [ '/dir1', '/dir2', '/dir3' ];
  var src = [ '/dir1', '/dir2', '/dir3' ];
  var got = _.path.simplify_( dst, src );
  var expected = [ '/dir1', '/dir2', '/dir3' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'array has duplicates';
  var dst = {};
  var src = [ '/dir1', '/dir2', '/dir3', '/dir2' ];
  var got = _.path.simplify_( dst, src );
  var expected = { '/dir1' : '', '/dir2' : '', '/dir3' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  var dst = [ '/dir1' ];
  var src = [ '/dir1', '/dir2', '/dir3', '/dir2', '/dir3', '/dir2' ];
  var got = _.path.simplify_( dst, src );
  var expected = [ '/dir1', '/dir2', '/dir3' ];
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'array has empty strings and null';
  var dst = {};
  var src = [ '/dir1', '', '/dir2', '', '/dir3', null, '', '/path' ];
  var got = _.path.simplify_( dst, src );
  var expected = { '/dir1' : '', '/dir2' : '', '/dir3' : '', '/path' : '' };
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'array has empty strings and nulls, one argument in result';
  var dst = true;
  var src = [ '/dir1', '', null, '', null, '' ];
  var got = _.path.simplify_( dst, src );
  var expected = '/dir1';
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got !== dst );

  test.case = 'array with empty strings and nulls';
  var dst = undefined;
  var src = [ '', '', null, null, '' ];
  var got = _.path.simplify_( dst, src );
  var expected = '';
  test.identical( got, expected );
  test.true( got !== src );
  test.true( got !== dst );

  /* tests with map of paths */

  test.case = 'empty map';
  var dst = [];
  var src = {};
  var got = _.path.simplify_( dst, src );
  test.identical( got, [] );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'key is empty string, value is empty string';
  var dst = '';
  var src = { '' : '' };
  var got = _.path.simplify_( dst, src );
  test.identical( got, '' );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'key is empty string';
  var dst = [ '/path' ];
  var src = { '' : '/dir' };
  var got = _.path.simplify_( dst, src );
  test.identical( got, [ '/path' ] );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'key, value is empty string';
  var dst = {};
  var src = { '/dir1' : '' };
  var got = _.path.simplify_( dst, src );
  test.identical( got, { '/dir1' : '' } );
  test.true( got !== src );
  test.true( got === dst );

  var dst = [];
  var src = { '/dir1' : '', '' : '' };
  var got = _.path.simplify_( dst, src );
  test.identical( got, [ '/dir1' ] );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'key, value is array';
  var dst = { 'a' : '/b' };
  var src = { '/dir1' : [ '/dir1', '/dir2' ], '/dir2' : '/a/b' };
  var got = _.path.simplify_( dst, src );
  test.identical( got, { 'a' : '/b', '/dir1' : [ '/dir1', '/dir2' ], '/dir2' : '/a/b' } );
  test.true( got !== src );
  test.true( got === dst );

  var dst = [];
  var src = { '/dir1' : [ '/dir1', null, '', '/dir2', '' ], '/dir2' : '/a/b' };
  var got = _.path.simplify_( dst, src );
  test.identical( got, [ '/dir1', '/dir2' ] );
  test.true( got !== src );
  test.true( got === dst );

  test.case = 'complex map of paths';
  function constr2( val )
  {
    this.value = val;
    return this;
  }
  var obj = new constr2( '/dir' );
  var dst = {};
  var src =
  {
    '/false' : false,
    '/true' : true,
    '/undefined' : undefined,
    '/null' : null,
    '/string' : '/dir',
    '/emptyString' : '',
    '' : '',
    '/number' : 10,
    '/number/boolLike' : 1,
    '/array' : [ '', '/', '/dir' ],
    '/emptyArray' : [],
    '/emptyMap' : {},
    '/map' : { '/str' : '/dir2' },
    '/instance' : obj,
  };
  var got = _.path.simplify_( dst, src );
  var exp =
  {
    '/false' : false,
    '/true' : true,
    '/undefined' : undefined,
    '/null' : '',
    '/string' : '/dir',
    '/emptyString' : '',
    '/number' : 10,
    '/number/boolLike' : true,
    '/array' : [ '/', '/dir' ],
    '/emptyArray' : '',
    '/emptyMap' : '',
    '/map' : { '/str' : '/dir2' },
    '/instance' : obj,
  };
  test.identical( got, exp );
  test.true( got !== src );
  test.true( got === dst );

}

//

function mapDstFromSrc( test )
{
  test.case = 'null';
  var exp = [];
  var src = null;
  var got = _.path.mapDstFromSrc( src );
  test.identical( got, exp );
  test.true( got !== src );

  test.case = 'boolean';
  var exp = [ null ];
  var src = true;
  var got = _.path.mapDstFromSrc( src );
  test.identical( got, exp );
  test.true( got !== src );

  test.case = 'dot';
  var exp = [ null ];
  var src = '.';
  var got = _.path.mapDstFromSrc( src );
  test.identical( got, exp );
  test.true( got !== src );

  test.case = 'string';
  var exp = [ null ];
  var src = '/dst';
  var got = _.path.mapDstFromSrc( src );
  test.identical( got, exp );
  test.true( got !== src );

  test.case = 'array';
  var exp = [ null ];
  var src = [ '/dst1', '/dst2' ];
  var got = _.path.mapDstFromSrc( src );
  test.identical( got, exp );
  test.true( got !== src );

  test.case = 'Map';
  var exp = [ null ];
  var src = new HashMap( [ [ 'str', 'str' ] ] );
  var got = _.path.mapDstFromSrc( src );
  test.identical( got, exp );
  test.true( got !== src );

  test.case = 'constructor, has not own properties';
  function Constr()
  {
    this.a = '/str';
    return this;
  };
  Constr.prototype.b = '';
  var exp = [ null ];
  var src = new Constr();
  var got = _.path.mapDstFromSrc( src );
  test.identical( got, exp );
  test.true( got !== src );

  test.case = 'empty map';
  var exp = [];
  var src = {};
  var got = _.path.mapDstFromSrc( src );
  test.identical( got, exp );
  test.true( got !== src );

  test.case = 'map, flat values';
  var exp = [ 'a', 'd', false ];
  var src = { 'a' : 'a', 'b' : 'a', 'c' : 'd', '' : false };
  var got = _.path.mapDstFromSrc( src );
  test.identical( got, exp );
  test.true( got !== src );

  test.case = 'map, arrays in values';
  var exp = [ 'a', 'b', 'c', 'cc', 'd', 'e', '' ];
  var src = { 'a' : [ 'a', 'b', 'c' ], 'b' : [ 'a', 'b', 'c' ], 'cc' : 'cc', 'c' : [ 'd', 'd', 'e' ], '' : '' };
  var got = _.path.mapDstFromSrc( src );
  test.identical( got, exp );
  test.true( got !== src );

  test.case = 'map, arrays in values, null';
  var exp = [ 'a', 'b', 'c', 'cc', 'd', 'e', null ];
  var src = { 'a' : [ 'a', 'b', 'c' ], 'b' : [ 'a', 'b', 'c' ], 'cc' : 'cc', 'c' : [ 'd', 'd', 'e' ], '' : null };
  var got = _.path.mapDstFromSrc( src );
  test.identical( got, exp );
  test.true( got !== src );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'without arguments';
  test.shouldThrowErrorSync( () => _.path.mapDstFromSrc() );

  test.case = 'extra arguments';
  test.shouldThrowErrorSync( () => _.path.mapDstFromSrc( '/str', 'extra' ) );
}

//

function mapDstFromDst( test )
{
  test.case = 'null';
  var exp = [];
  var src = null;
  var got = _.path.mapDstFromDst( src );
  test.identical( got, exp );
  test.true( got !== src );

  test.case = 'boolean';
  var exp = [ true ];
  var src = true;
  var got = _.path.mapDstFromDst( src );
  test.identical( got, exp );
  test.true( got !== src );

  test.case = 'dot';
  var exp = [ '.' ];
  var src = '.';
  var got = _.path.mapDstFromDst( src );
  test.identical( got, exp );
  test.true( got !== src );

  test.case = 'string';
  var exp = [ '/dst' ];
  var src = '/dst';
  var got = _.path.mapDstFromDst( src );
  test.identical( got, exp );
  test.true( got !== src );

  test.case = 'array';
  var exp = [ '/dst1', '/dst2' ];
  var src = [ '/dst1', '/dst2' ];
  var got = _.path.mapDstFromDst( src );
  test.identical( got, exp );
  test.true( got !== src );

  test.case = 'Map';
  var exp = [ new HashMap( [ [ 'str', 'str' ] ] ) ];
  var src = new HashMap( [ [ 'str', 'str' ] ] );
  var got = _.path.mapDstFromDst( src );
  test.identical( [ ... got[ 0 ].entries() ], [ ... exp[ 0 ].entries() ] );
  test.true( got !== src );

  test.case = 'constructor, has not own properties';
  function Constr()
  {
    this.a = '/str';
    return this;
  };
  Constr.prototype.b = '';
  var exp = '/str';
  var src = new Constr();
  var got = _.path.mapSrcFromSrc( src );
  test.identical( got[ 0 ].a, exp );
  test.identical( got.length, 1 );
  test.true( got !== src );

  test.case = 'empty map';
  var exp = [];
  var src = {};
  var got = _.path.mapDstFromDst( src );
  test.identical( got, exp );
  test.true( got !== src );

  test.case = 'map, flat values';
  var exp = [ 'a', 'd', false ];
  var src = { 'a' : 'a', 'b' : 'a', 'c' : 'd', '' : false };
  var got = _.path.mapDstFromDst( src );
  test.identical( got, exp );
  test.true( got !== src );

  test.case = 'map, arrays in values';
  var exp = [ 'a', 'b', 'c', 'cc', 'd', 'e', '' ];
  var src = { 'a' : [ 'a', 'b', 'c' ], 'b' : [ 'a', 'b', 'c' ], 'cc' : 'cc', 'c' : [ 'd', 'd', 'e' ], '' : '' };
  var got = _.path.mapDstFromDst( src );
  test.identical( got, exp );
  test.true( got !== src );

  test.case = 'map, arrays in values, null';
  var exp = [ 'a', 'b', 'c', 'cc', 'd', 'e', null ];
  var src = { 'a' : [ 'a', 'b', 'c' ], 'b' : [ 'a', 'b', 'c' ], 'cc' : 'cc', 'c' : [ 'd', 'd', 'e' ], '' : null };
  var got = _.path.mapDstFromDst( src );
  test.identical( got, exp );
  test.true( got !== src );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'without arguments';
  test.shouldThrowErrorSync( () => _.path.mapDstFromDst() );

  test.case = 'extra arguments';
  test.shouldThrowErrorSync( () => _.path.mapDstFromDst( '/str', 'extra' ) );

  test.case = 'wrong type of pathMap';
  test.shouldThrowErrorSync( () => _.path.mapDstFromDst( undefined ) );
  test.shouldThrowErrorSync( () => _.path.mapDstFromDst( _.argumentsArray.make( [ '/str' ] ) ) );
}

//

function mapSrcFromSrc( test )
{
  test.case = 'null';
  var exp = [];
  var src = null;
  var got = _.path.mapSrcFromSrc( src );
  test.identical( got, exp );
  test.true( got !== src );

  test.case = 'boolean';
  var exp = [ true ];
  var src = true;
  var got = _.path.mapSrcFromSrc( src );
  test.identical( got, exp );
  test.true( got !== src );

  test.case = 'dot';
  var exp = [ '.' ];
  var src = '.';
  var got = _.path.mapSrcFromSrc( src );
  test.identical( got, exp );
  test.true( got !== src );

  test.case = 'string';
  var exp = [ '/dst' ];
  var src = '/dst';
  var got = _.path.mapSrcFromSrc( src );
  test.identical( got, exp );
  test.true( got !== src );

  test.case = 'array';
  var exp = [ '/dst1', '/dst2' ];
  var src = [ '/dst1', '/dst2' ];
  var got = _.path.mapSrcFromSrc( src );
  test.identical( got, exp );
  test.true( got !== src );

  test.case = 'Map';
  var exp = [ new HashMap( [ [ 'str', 'str' ] ] ) ];
  var src = new HashMap( [ [ 'str', 'str' ] ] );
  var got = _.path.mapSrcFromSrc( src );
  test.identical( [ ... got[ 0 ].entries() ], [ ... exp[ 0 ].entries() ] );
  test.true( got !== src );

  test.case = 'constructor, has not own properties';
  function Constr()
  {
    this.a = '/str';
    return this;
  };
  Constr.prototype.b = '';
  var exp = '/str';
  var src = new Constr();
  var got = _.path.mapSrcFromSrc( src );
  test.identical( got[ 0 ].a, exp );
  test.identical( got.length, 1 );
  test.true( got !== src );

  test.case = 'empty map';
  var exp = [];
  var src = {};
  var got = _.path.mapSrcFromSrc( src );
  test.identical( got, exp );
  test.true( got !== src );

  test.case = 'map, flat values';
  var exp = [ 'a', 'b', 'c', '' ];
  var src = { 'a' : 'a', 'b' : 'a', 'c' : 'd', '' : false };
  var got = _.path.mapSrcFromSrc( src );
  test.identical( got, exp );
  test.true( got !== src );

  test.case = 'map, arrays in values';
  var exp = [ 'a', 'b', 'cc', 'c' ];
  var src = { 'a' : [ 'a', 'b', 'c' ], 'b' : [ 'a', 'b', 'c' ], 'cc' : 'cc', 'c' : [ 'd', 'd', 'e' ], '' : '' };
  var got = _.path.mapSrcFromSrc( src );
  test.identical( got, exp );
  test.true( got !== src );

  test.case = 'map, arrays in values, null';
  var exp = [ 'a', 'b', 'cc', 'c' ];
  var src = { 'a' : [ 'a', 'b', 'c' ], 'b' : [ 'a', 'b', 'c' ], 'cc' : 'cc', 'c' : [ 'd', 'd', 'e' ], '' : null };
  var got = _.path.mapSrcFromSrc( src );
  test.identical( got, exp );
  test.true( got !== src );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'without arguments';
  test.shouldThrowErrorSync( () => _.path.mapSrcFromSrc() );

  test.case = 'extra arguments';
  test.shouldThrowErrorSync( () => _.path.mapSrcFromSrc( '/str', 'extra' ) );

  test.case = 'wrong type of pathMap';
  test.shouldThrowErrorSync( () => _.path.mapSrcFromSrc( undefined ) );
  test.shouldThrowErrorSync( () => _.path.mapSrcFromSrc( _.argumentsArray.make( [ '/str' ] ) ) );
}

//

function mapSrcFromDst( test )
{
  test.case = 'null';
  var exp = [];
  var src = null;
  var got = _.path.mapSrcFromDst( src );
  test.identical( got, exp );
  test.true( got !== src );

  test.case = 'boolean';
  var exp = [ null ];
  var src = true;
  var got = _.path.mapSrcFromDst( src );
  test.identical( got, exp );
  test.true( got !== src );

  test.case = 'dot';
  var exp = [ null ];
  var src = '.';
  var got = _.path.mapSrcFromDst( src );
  test.identical( got, exp );
  test.true( got !== src );

  test.case = 'string';
  var exp = [ null ];
  var src = '/dst';
  var got = _.path.mapSrcFromDst( src );
  test.identical( got, exp );
  test.true( got !== src );

  test.case = 'array';
  var exp = [ null ];
  var src = [ '/dst1', '/dst2' ];
  var got = _.path.mapSrcFromDst( src );
  test.identical( got, exp );
  test.true( got !== src );

  test.case = 'Map';
  var exp = [ null ];
  var src = new HashMap( [ [ 'str', 'str' ] ] );
  var got = _.path.mapSrcFromDst( src );
  test.identical( got, exp );
  test.true( got !== src );

  test.case = 'constructor, has not own properties';
  function Constr()
  {
    this.a = '/str';
    return this;
  };
  Constr.prototype.b = '';
  var exp = [ null ];
  var src = new Constr();
  var got = _.path.mapSrcFromDst( src );
  test.identical( got, exp );
  test.true( got !== src );

  test.case = 'empty map';
  var exp = [];
  var src = {};
  var got = _.path.mapSrcFromDst( src );
  test.identical( got, exp );
  test.true( got !== src );

  test.case = 'map, flat values';
  var exp = [ 'a', 'b', 'c', '' ];
  var src = { 'a' : 'a', 'b' : 'a', 'c' : 'd', '' : false };
  var got = _.path.mapSrcFromDst( src );
  test.identical( got, exp );
  test.true( got !== src );

  test.case = 'map, arrays in values';
  var exp = [ 'a', 'b', 'cc', 'c', '' ];
  var src = { 'a' : [ 'a', 'b', 'c' ], 'b' : [ 'a', 'b', 'c' ], 'cc' : 'cc', 'c' : [ 'd', 'd', 'e' ], '' : '' };
  var got = _.path.mapSrcFromDst( src );
  test.identical( got, exp );
  test.true( got !== src );

  test.case = 'map, arrays in values, null';
  var exp = [ 'a', 'b', 'cc', 'c', '' ];
  var src = { 'a' : [ 'a', 'b', 'c' ], 'b' : [ 'a', 'b', 'c' ], 'cc' : 'cc', 'c' : [ 'd', 'd', 'e' ], '' : null };
  var got = _.path.mapSrcFromDst( src );
  test.identical( got, exp );
  test.true( got !== src );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'without arguments';
  test.shouldThrowErrorSync( () => _.path.mapSrcFromDst() );

  test.case = 'extra arguments';
  test.shouldThrowErrorSync( () => _.path.mapSrcFromDst( '/str', 'extra' ) );
}

// --
// etc
// --

function traceToRoot( test )
{

  /* */

  test.case = 'root';
  var src = '/';
  var got = _.path.traceToRoot( src );
  test.identical( got, [ '/' ] );

  test.case = 'not down';
  var src = '/...';
  var got = _.path.traceToRoot( src );
  test.identical( got, [ '/', '/...' ] );

  test.case = 'not double down';
  var src = '/.../...';
  var got = _.path.traceToRoot( src );
  test.identical( got, [ '/', '/...', '/.../...' ] );

  test.case = 'not down trailed';
  var src = '/.../';
  var got = _.path.traceToRoot( src );
  test.identical( got, [ '/', '/.../' ] );

  test.case = 'not double down trailed';
  var src = '/.../.../';
  var got = _.path.traceToRoot( src );
  test.identical( got, [ '/', '/...', '/.../.../' ] );

  /* */

  test.case = 'one dir';
  var src = '/tmp';
  var got = _.path.traceToRoot( src );
  test.identical( got, [ '/', '/tmp' ] );

  test.case = 'one dir, slash';
  var src = '/tmp/';
  var got = _.path.traceToRoot( src );
  test.identical( got, [ '/', '/tmp/' ] );

  test.case = 'three dirs';
  var src = '/tmp/tmp/tmp';
  var got = _.path.traceToRoot( src );
  test.identical( got, [ '/', '/tmp', '/tmp/tmp', '/tmp/tmp/tmp' ] );

  test.case = 'three dirs, slash';
  var src = '/tmp/tmp/tmp/';
  var got = _.path.traceToRoot( src );
  test.identical( got, [ '/', '/tmp', '/tmp/tmp', '/tmp/tmp/tmp/' ] );

  /* */

  test.case = 'one dir, dotted';
  var src = '/tmp/..';
  var got = _.path.traceToRoot( src );
  test.identical( got, [ '/' ] );

  test.case = 'one dir, dotted, slash';
  var src = '/tmp/../';
  var got = _.path.traceToRoot( src );
  test.identical( got, [ '/' ] );

  test.case = 'six dirs, dotted';
  var src = '/tmp/../tmp/../tmp/tmp';
  var got = _.path.traceToRoot( src );
  test.identical( got, [ '/', '/tmp', '/tmp/tmp' ] );

  test.case = 'six dirs, dotted, slash';
  var src = '/tmp/../tmp/../tmp/tmp/';
  var got = _.path.traceToRoot( src );
  test.identical( got, [ '/', '/tmp', '/tmp/tmp/' ] );

  /* */

  // test.case = 'one dir, dotted';
  // var src = './tmp/..';
  // var got = _.path.traceToRoot( src );
  // test.identical( got, [ '.' ] );
  //
  // test.case = 'one dir, dotted, slash';
  // var src = './tmp/../';
  // var got = _.path.traceToRoot( src );
  // test.identical( got, [ './' ] );
  //
  // test.case = 'six dirs, dotted';
  // var src = './tmp/../tmp/../tmp/tmp';
  // var got = _.path.traceToRoot( src );
  // test.identical( got, [ '.', 'tmp', 'tmp/tmp' ] );
  //
  // test.case = 'six dirs, dotted, slash';
  // var src = './tmp/../tmp/../tmp/tmp/';
  // var got = _.path.traceToRoot( src );
  // test.identical( got, [ '.', 'tmp', 'tmp/tmp/' ] );

  /* */

  if( !Config.debug )
  return;

  test.case = 'throwing';
  test.shouldThrowErrorSync( () => _.path.traceToRoot( '/temp/a/../../..' ) );
  test.shouldThrowErrorSync( () => _.path.traceToRoot( '/temp/a/../../../' ) );
  test.shouldThrowErrorSync( () => _.path.traceToRoot( '/../..' ) );
  test.shouldThrowErrorSync( () => _.path.traceToRoot( '/../../' ) );
  test.shouldThrowErrorSync( () => _.path.traceToRoot( '/..' ) );
  test.shouldThrowErrorSync( () => _.path.traceToRoot( '/../' ) );
  test.shouldThrowErrorSync( () => _.path.traceToRoot( '../aa/a' ) );
  test.shouldThrowErrorSync( () => _.path.traceToRoot( '..' ) );
  test.shouldThrowErrorSync( () => _.path.traceToRoot( './tmp/..' ) );
  test.shouldThrowErrorSync( () => _.path.traceToRoot( 'tmp' ) );
  test.shouldThrowErrorSync( () => _.path.traceToRoot( 'tmp/tmp' ) );

  // test.shouldThrowErrorSync( () => _.path.traceToRoot( '/...' ) );
  // test.shouldThrowErrorSync( () => _.path.traceToRoot( '/.../...' ) );
  // test.shouldThrowErrorSync( () => _.path.traceToRoot( '/.../' ) );
  // test.shouldThrowErrorSync( () => _.path.traceToRoot( '/.../.../' ) );

  /* */

}

//

function group( test )
{

  test.case = 'nothing common';
  var o =
  {
    keys : [ '.' ],
    vals : [ 'a', 'b', 'a/b' ]
  }
  var expected =
  {
    '/' : [ ],
    '.' : [ ]
  }
  var got = _.path.group( o );
  test.identical( got, expected )

  test.case = 'single key as string';
  var o =
  {
    keys : '/a',
    vals : [ '.', '/a', '/b', './a', '/a/b' ]
  }
  var expected =
  {
    '/' : [ '/a', '/a/b', '/b' ],
    '/a' : [ '/a', '/a/b' ]
  }
  var got = _.path.group( o );
  test.identical( got, expected )

  test.case = 'single key in array';
  var o =
  {
    keys : [ '/a' ],
    vals : [ '.', '/a', '/b', './a', '/a/b' ]
  }
  var expected =
  {
    '/' : [ '/a', '/a/b', '/b' ],
    '/a' : [ '/a', '/a/b' ]
  }
  var got = _.path.group( o );
  test.identical( got, expected )

  test.case = 'severals keys';
  var o =
  {
    keys : [ '/a', '/b', '.' ],
    vals : [ '.', '/a', '/b', './a', '/a/b' ]
  }
  var expected =
  {
    '/' : [ '/a', '/a/b', '/b' ],
    '/a' : [ '/a', '/a/b' ],
    '/b' : [ '/b' ],
    '.' : [ '.', './a' ]
  }
  var got = _.path.group( o );
  test.identical( got, expected )

  test.case = 'vals has inner arrays';
  var o =
  {
    keys : [ '/' ],
    vals : [ '.', '/a', '/b', './a', '/a/b' ]
  }
  var expected =
  {
    '/' : [ '/a', '/a/b', '/b' ],
  }
  var got = _.path.group( o );
  test.identical( got, expected )

  test.case = 'result is existing map'
  var o =
  {
    keys : [ '/' ],
    vals : [ '/a' ],
    result :
    {
      '/' : [ '/y' ]
    }
  }
  var expected =
  {
    '/' : [ '/a', '/y' ],
  }
  var got = _.path.group( o );
  test.identical( got, expected )

  test.case = 'vals has inner arrays';
  var o =
  {
    keys : [ '/' ],
    vals : [ '.', [ '/a', '/b' ], [ './a', '/a/b' ] ]
  }
  var expected =
  {
    '/' : [ '/a', '/a/b', '/b' ],
  }
  var got = _.path.group( o );
  test.identical( got, expected )

  test.case = 'keys as map';
  var o =
  {
    keys : { '/a' : true, '/b' : true, '.' : true },
    vals : [ '.', '/a', '/b', './a', '/a/b' ]
  }
  var expected =
  {
    '/' : [ '/a', '/a/b', '/b' ],
    '/a' : [ '/a', '/a/b' ],
    '/b' : [ '/b' ],
    '.' : [ '.', './a' ]
  }
  var got = _.path.group( o );
  test.identical( got, expected )

  if( !Config.debug )
  return;

  test.shouldThrowErrorSync( () => _.path.group( { vals : '/val', keys : '/' } ) )
}

//

function mapGroupByDst( test )
{
  let path = _.path;

  /* */

  test.case = 'trivial';
  var exp =
  {
    '/dir2/Output.js' :
    {
      '/dir/**' : '',
      '/dir/Exec' : false,
    },
  }
  var src =
  {
    '/dir/**' : `/dir2/Output.js`,
    '/dir/Exec' : 0,
  }
  var got = path.mapGroupByDst( src );
  test.identical( got, exp );
  test.true( got !== src );

  /* */

  test.case = 'parent dir';
  var exp =
  {
    '/dst' :
    {
      '/src1/d**' : '',
      '/src2/d/**' : '',
      '/**/b' : false
    },
  }
  var src =
  {
    '/src1/d**' : '/dst',
    '/src2/d/**' : '/dst',
    '/**/b' : false
  }
  var got = path.mapGroupByDst( src );
  test.identical( got, exp );
  test.true( got !== src );

  /* */

}

//
// function setOptimize( test )
// {
//   let path = _.path;
//
//   /* - */
//
//   test.open( 'all levels, relative' );
//
//   test.case = 'direct order';
//   var filePath =
//   {
//     "module1" : `.`,
//     "module1/ami" : `.`,
//     "module1/amid" : `.`,
//     "module1/amid/dir" : `.`,
//     "module1/amid/dir/terminal" : `.`,
//     "module1/amid/dir2" : `.`,
//     "module2" : `.`,
//     "module2/amid" : `.`,
//   }
//   var expected = [ 'module1', 'module2' ];
//   var got = path.setOptimize( filePath );
//   test.identical( got, expected );
//
//   test.case = 'revers order';
//   var filePath =
//   {
//     "module2/amid" : `.`,
//     "module2" : `.`,
//     "module1/amid/dir2" : `.`,
//     "module1/amid/dir/terminal" : `.`,
//     "module1/amid/dir" : `.`,
//     "module1/amid" : `.`,
//     "module1/ami" : `.`,
//     "module1" : `.`,
//   }
//   var expected = [ 'module1', 'module2' ];
//   var got = path.setOptimize( filePath );
//   test.identical( got, expected );
//
//   test.case = 'no order';
//   var filePath =
//   {
//     "module2/amid" : `.`,
//     "module2" : `.`,
//     "module1/amid" : `.`,
//     "module1/amid/dir2" : `.`,
//     "module1/amid/dir" : `.`,
//     "module1/amid/dir/terminal" : `.`,
//     "module1/ami" : `.`,
//     "module1" : `.`,
//   }
//   var expected = [ 'module1', 'module2' ];
//   var got = path.setOptimize( filePath );
//   test.identical( got, expected );
//
//   test.close( 'all levels, relative' );
//
//   /* - */
//
//   test.open( 'gap in levels, relative' );
//
//   test.case = 'direct order';
//   var filePath =
//   {
//     'a1' : '',
//     'a1/b1/c1' : '',
//     'a1/b1/c2' : '',
//     'a1/b1/c3' : '',
//     'a1/b1/c4/d1/e1/f1' : '',
//     'a2' : '',
//     'a2/b1/c1' : '',
//     'a2/b1/c1/d1/e1/f1' : '',
//     'a2/b1/c2' : '',
//   }
//   var expected = [ 'a1', 'a2' ];
//   var got = path.setOptimize( filePath );
//   test.identical( got, expected );
//
//   test.case = 'revers order';
//   var filePath =
//   {
//     'a1/b1/c4/d1/e1/f1' : '',
//     'a1/b1/c3' : '',
//     'a1/b1/c2' : '',
//     'a1/b1/c1' : '',
//     'a1' : '',
//     'a2/b1/c2' : '',
//     'a2/b1/c1/d1/e1/f1' : '',
//     'a2/b1/c1' : '',
//     'a2' : '',
//   }
//   var expected = [ 'a1', 'a2' ];
//   var got = path.setOptimize( filePath );
//   test.identical( got, expected );
//
//   test.case = 'no order, simpler';
//   var filePath =
//   {
//     'a2/b1/c1/d1/e1/f1' : '',
//     'a2' : '',
//     'a2/b1/c1' : '',
//     'a2/b1/c2' : '',
//   }
//   var expected = [ 'a2' ];
//   var got = path.setOptimize( filePath );
//   test.identical( got, expected );
//
//   test.case = 'no order';
//   var filePath =
//   {
//     'a1/b1/c3' : '',
//     'a1' : '',
//     'a1/b1/c1' : '',
//     'a1/b1/c2' : '',
//     'a1/b1/c4/d1/e1/f1' : '',
//     'a2/b1/c1/d1/e1/f1' : '',
//     'a2' : '',
//     'a2/b1/c1' : '',
//     'a2/b1/c2' : '',
//   }
//   var expected = [ 'a1', 'a2' ];
//   var got = path.setOptimize( filePath );
//   test.identical( got, expected );
//
//   test.close( 'gap in levels, relative' );
//
//   /* - */
//
//   test.open( 'all levels, absolute' );
//
//   test.case = 'direct order';
//   var filePath =
//   {
//     "/module1" : `.`,
//     "/module1/ami" : `.`,
//     "/module1/amid" : `.`,
//     "/module1/amid/dir" : `.`,
//     "/module1/amid/dir/terminal" : `.`,
//     "/module1/amid/dir2" : `.`,
//     "/module2" : `.`,
//     "/module2/amid" : `.`,
//   }
//   var expected = [ '/module1', '/module2' ];
//   var got = path.setOptimize( filePath );
//   test.identical( got, expected );
//
//   test.case = 'revers order';
//   var filePath =
//   {
//     "/module2/amid" : `.`,
//     "/module2" : `.`,
//     "/module1/amid/dir2" : `.`,
//     "/module1/amid/dir/terminal" : `.`,
//     "/module1/amid/dir" : `.`,
//     "/module1/amid" : `.`,
//     "/module1/ami" : `.`,
//     "/module1" : `.`,
//   }
//   var expected = [ '/module1', '/module2' ];
//   var got = path.setOptimize( filePath );
//   test.identical( got, expected );
//
//   test.case = 'no order';
//   var filePath =
//   {
//     "/module2/amid" : `.`,
//     "/module2" : `.`,
//     "/module1/amid" : `.`,
//     "/module1/amid/dir2" : `.`,
//     "/module1/amid/dir" : `.`,
//     "/module1/amid/dir/terminal" : `.`,
//     "/module1/ami" : `.`,
//     "/module1" : `.`,
//   }
//   var expected = [ '/module1', '/module2' ];
//   var got = path.setOptimize( filePath );
//   test.identical( got, expected );
//
//   test.close( 'all levels, absolute' );
//
//   /* - */
//
//   test.open( 'gap in levels, absolute' );
//
//   test.case = 'direct order';
//   var filePath =
//   {
//     '/a1' : '',
//     '/a1/b1/c1' : '',
//     '/a1/b1/c2' : '',
//     '/a1/b1/c3' : '',
//     '/a1/b1/c4/d1/e1/f1' : '',
//     '/a2' : '',
//     '/a2/b1/c1' : '',
//     '/a2/b1/c1/d1/e1/f1' : '',
//     '/a2/b1/c2' : '',
//   }
//   var expected = [ '/a1', '/a2' ];
//   var got = path.setOptimize( filePath );
//   test.identical( got, expected );
//
//   test.case = 'revers order';
//   var filePath =
//   {
//     '/a2/b1/c2' : '',
//     '/a2/b1/c1/d1/e1/f1' : '',
//     '/a2/b1/c1' : '',
//     '/a2' : '',
//     '/a1/b1/c4/d1/e1/f1' : '',
//     '/a1/b1/c3' : '',
//     '/a1/b1/c2' : '',
//     '/a1/b1/c1' : '',
//     '/a1' : '',
//   }
//   var expected = [ '/a1', '/a2' ];
//   var got = path.setOptimize( filePath );
//   test.identical( got, expected );
//
//   test.case = 'no order, simpler';
//   var filePath =
//   {
//     '/a2/b1/c1/d1/e1/f1' : '',
//     '/a2' : '',
//     '/a2/b1/c1' : '',
//     '/a2/b1/c2' : '',
//   }
//   var expected = [ '/a2' ];
//   var got = path.setOptimize( filePath );
//   test.identical( got, expected );
//
//   test.case = 'no order';
//   var filePath =
//   {
//     '/a1/b1/c3' : '',
//     '/a1' : '',
//     '/a1/b1/c1' : '',
//     '/a1/b1/c2' : '',
//     '/a1/b1/c4/d1/e1/f1' : '',
//     '/a2/b1/c1/d1/e1/f1' : '',
//     '/a2' : '',
//     '/a2/b1/c1' : '',
//     '/a2/b1/c2' : '',
//   }
//   var expected = [ '/a1', '/a2' ];
//   var got = path.setOptimize( filePath );
//   test.identical( got, expected );
//
//   test.close( 'gap in levels, absolute' );
//
//   /* - */
//
// } /* end of mapOptimize */

//

function mapOptimize( test )
{
  let path = _.path;

  /* */

  test.case = 'filePath is string';
  var filePath = '/path/path';
  var got = path.mapOptimize( filePath );
  var expected = { '/path/path' : '' };
  test.identical( got, expected );

  /* qqq : extend such test group */

  test.case = 'only booleans';
  var filePath =
  {
    '/t1/t2' : true,
    '/t1/t2/t2' : true,
    '/t1' : true,
    '/f1/f2' : false,
    '/f1/f2/f3' : false,
    '/f1' : false,
  };
  var got = path.mapOptimize( filePath );
  var expected = { '/t1' : true, '/f1' : false };
  test.identical( got, expected );

  /* - */

  test.open( 'all levels, relative' );

  test.case = 'direct order';
  var filePath =
  {
    'module1' : `.`,
    'module1/ami' : `.`,
    'module1/amid' : `.`,
    'module1/amid/dir' : `.`,
    'module1/amid/dir/terminal' : `.`,
    'module1/amid/dir2' : `.`,
    'module2' : `.`,
    'module2/amid' : `.`,
  }
  var expected =
  {
    'module1' : '.',
    'module2' : '.',
  };
  var got = path.mapOptimize( filePath );
  test.identical( got, expected );

  test.case = 'revers order';
  var filePath =
  {
    'module2/amid' : `.`,
    'module2' : `.`,
    'module1/amid/dir2' : `.`,
    'module1/amid/dir/terminal' : `.`,
    'module1/amid/dir' : `.`,
    'module1/amid' : `.`,
    'module1/ami' : `.`,
    'module1' : `.`,
  }
  var expected =
  {
    'module1' : '.',
    'module2' : '.',
  };
  var got = path.mapOptimize( filePath );
  test.identical( got, expected );

  test.case = 'no order';
  var filePath =
  {
    'module2/amid' : `.`,
    'module2' : `.`,
    'module1/amid' : `.`,
    'module1/amid/dir2' : `.`,
    'module1/amid/dir' : `.`,
    'module1/amid/dir/terminal' : `.`,
    'module1/ami' : `.`,
    'module1' : `.`,
  }
  var expected =
  {
    'module1' : '.',
    'module2' : '.',
  };
  var got = path.mapOptimize( filePath );
  test.identical( got, expected );

  test.close( 'all levels, relative' );

  /* - */

  test.open( 'all levels, boolean' );

  test.case = 'direct order';
  var filePath =
  {
    'module1' : true,
    'module1/ami' : false,
    'module1/amid' : true,
    'module1/amid/dir' : false,
    'module1/amid/dir/terminal' : true,
    'module1/amid/dir2' : false,
    'module2' : true,
    'module2/amid' : false
  }
  var expected =
  {
    'module1' : true,
    'module1/ami' : false,
    // "module1/amid" : true,
    'module1/amid/dir' : false,
    // "module1/amid/dir/terminal" : true,
    'module1/amid/dir2' : false,
    'module2' : true,
    'module2/amid' : false
  };
  var got = path.mapOptimize( filePath );
  test.identical( got, expected );

  test.case = 'revers order';
  var filePath =
  {
    'module2/amid' : true,
    'module2' : false,
    'module1/amid/dir2' : true,
    'module1/amid/dir/terminal' : false,
    'module1/amid/dir' : true,
    'module1/amid' : false,
    'module1/ami' : true,
    'module1' : false
  }
  var expected =
  {
    'module2/amid' : true,
    'module2' : false,
    'module1/amid/dir2' : true,
    // "module1/amid/dir/terminal" : false,
    'module1/amid/dir' : true,
    // "module1/amid" : false,
    'module1/ami' : true,
    'module1' : false
  };
  var got = path.mapOptimize( filePath );
  test.identical( got, expected );

  test.case = 'no order';
  var filePath =
  {
    // "module1/amid/dir/terminal" : false,
    'module2/amid' : true,
    'module1/amid/dir2' : true,
    'module1/amid/dir' : true,
    'module2' : false,
    // "module1/amid" : false,
    'module1' : false,
    'module1/ami' : true,
  };
  var expected =
  {
    'module2/amid' : true,
    'module2' : false,
    'module1/amid/dir2' : true,
    // "module1/amid/dir/terminal" : false,
    'module1/amid/dir' : true,
    // "module1/amid" : false,
    'module1/ami' : true,
    'module1' : false
  };
  var got = path.mapOptimize( filePath );
  test.identical( got, expected );

  test.close( 'all levels, boolean' );

  /* - */

  test.open( 'gap in levels, relative' );

  test.case = 'direct order';
  var filePath =
  {
    'a1' : '',
    'a1/b1/c1' : '',
    'a1/b1/c2' : '',
    'a1/b1/c3' : '',
    'a1/b1/c4/d1/e1/f1' : '',
    'a2' : '',
    'a2/b1/c1' : '',
    'a2/b1/c1/d1/e1/f1' : '',
    'a2/b1/c2' : '',
  }
  var expected =
  {
    'a1' : '',
    'a2' : '',
  };
  var got = path.mapOptimize( filePath );
  test.identical( got, expected );

  test.case = 'revers order';
  var filePath =
  {
    'a1/b1/c4/d1/e1/f1' : '',
    'a1/b1/c3' : '',
    'a1/b1/c2' : '',
    'a1/b1/c1' : '',
    'a1' : '',
    'a2/b1/c2' : '',
    'a2/b1/c1/d1/e1/f1' : '',
    'a2/b1/c1' : '',
    'a2' : '',
  }
  var expected =
  {
    'a1' : '',
    'a2' : '',
  };
  var got = path.mapOptimize( filePath );
  test.identical( got, expected );

  test.case = 'no order, simpler';
  var filePath =
  {
    'a2/b1/c1/d1/e1/f1' : '',
    'a2' : '',
    'a2/b1/c1' : '',
    'a2/b1/c2' : '',
  }
  var expected =
  {
    'a2' : '',
  };
  var got = path.mapOptimize( filePath );
  test.identical( got, expected );

  test.case = 'no order';
  var filePath =
  {
    'a1/b1/c3' : '',
    'a1' : '',
    'a1/b1/c1' : '',
    'a1/b1/c2' : '',
    'a1/b1/c4/d1/e1/f1' : '',
    'a2/b1/c1/d1/e1/f1' : '',
    'a2' : '',
    'a2/b1/c1' : '',
    'a2/b1/c2' : '',
  }
  var expected =
  {
    'a1' : '',
    'a2' : '',
  };
  var got = path.mapOptimize( filePath );
  test.identical( got, expected );

  test.close( 'gap in levels, relative' );

  /* - */

  test.open( 'all levels, absolute' );

  test.case = 'direct order';
  var filePath =
  {
    '/module1' : `.`,
    '/module1/ami' : `.`,
    '/module1/amid' : `.`,
    '/module1/amid/dir' : `.`,
    '/module1/amid/dir/terminal' : `.`,
    '/module1/amid/dir2' : `.`,
    '/module2' : `.`,
    '/module2/amid' : `.`,
  }
  var expected =
  {
    '/module1' : '.',
    '/module2' : '.',
  };
  var got = path.mapOptimize( filePath );
  test.identical( got, expected );

  test.case = 'revers order';
  var filePath =
  {
    '/module2/amid' : `.`,
    '/module2' : `.`,
    '/module1/amid/dir2' : `.`,
    '/module1/amid/dir/terminal' : `.`,
    '/module1/amid/dir' : `.`,
    '/module1/amid' : `.`,
    '/module1/ami' : `.`,
    '/module1' : `.`,
  }
  var expected =
  {
    '/module1' : '.',
    '/module2' : '.',
  };
  var got = path.mapOptimize( filePath );
  test.identical( got, expected );

  test.case = 'no order';
  var filePath =
  {
    '/module2/amid' : `.`,
    '/module2' : `.`,
    '/module1/amid' : `.`,
    '/module1/amid/dir2' : `.`,
    '/module1/amid/dir' : `.`,
    '/module1/amid/dir/terminal' : `.`,
    '/module1/ami' : `.`,
    '/module1' : `.`,
  }
  var expected =
  {
    '/module1' : '.',
    '/module2' : '.',
  };
  var got = path.mapOptimize( filePath );
  test.identical( got, expected );

  test.close( 'all levels, absolute' );

  /* - */

  test.open( 'gap in levels, absolute' );

  test.case = 'direct order';
  var filePath =
  {
    '/a1' : '',
    '/a1/b1/c1' : '',
    '/a1/b1/c2' : '',
    '/a1/b1/c3' : '',
    '/a1/b1/c4/d1/e1/f1' : '',
    '/a2' : '',
    '/a2/b1/c1' : '',
    '/a2/b1/c1/d1/e1/f1' : '',
    '/a2/b1/c2' : '',
  }
  var expected =
  {
    '/a1' : '',
    '/a2' : '',
  };
  var got = path.mapOptimize( filePath );
  test.identical( got, expected );

  test.case = 'revers order';
  var filePath =
  {
    '/a2/b1/c2' : '',
    '/a2/b1/c1/d1/e1/f1' : '',
    '/a2/b1/c1' : '',
    '/a2' : '',
    '/a1/b1/c4/d1/e1/f1' : '',
    '/a1/b1/c3' : '',
    '/a1/b1/c2' : '',
    '/a1/b1/c1' : '',
    '/a1' : '',
  }
  var expected =
  {
    '/a1' : '',
    '/a2' : '',
  };
  var got = path.mapOptimize( filePath );
  test.identical( got, expected );

  test.case = 'no order, simpler';
  var filePath =
  {
    '/a2/b1/c1/d1/e1/f1' : '',
    '/a2' : '',
    '/a2/b1/c1' : '',
    '/a2/b1/c2' : '',
  }
  var expected =
  {
    '/a2' : '',
  };
  var got = path.mapOptimize( filePath );
  test.identical( got, expected );

  test.case = 'no order';
  var filePath =
  {
    '/a1/b1/c3' : '',
    '/a1' : '',
    '/a1/b1/c1' : '',
    '/a1/b1/c2' : '',
    '/a1/b1/c4/d1/e1/f1' : '',
    '/a2/b1/c1/d1/e1/f1' : '',
    '/a2' : '',
    '/a2/b1/c1' : '',
    '/a2/b1/c2' : '',
  }
  var expected =
  {
    '/a1' : '',
    '/a2' : '',
  };
  var got = path.mapOptimize( filePath );
  test.identical( got, expected );

  test.close( 'gap in levels, absolute' );

  /* - */

  test.open( 'same keys in filePath and basePath, same order' );

  test.case = 'direct order';
  var filePath =
  {
    'module1' : `.`,
    'module1/ami' : `.`,
    'module1/amid' : `.`,
    'module1/amid/dir' : `.`,
    'module1/amid/dir/terminal' : `.`,
    'module1/amid/dir2' : `.`,
    'module2' : `.`,
    'module2/amid' : `.`,
  };
  var basePath =
  {
    'module1' : `.`,
    'module1/ami' : `.`,
    'module1/amid' : `.`,
    'module1/amid/dir' : `.`,
    'module1/amid/dir/terminal' : `.`,
    'module1/amid/dir2' : `.`,
    'module2' : `.`,
    'module2/amid' : `.`,
  };
  var expected =
  {
    'module1' : '.',
    'module2' : '.',
  };
  var got = path.mapOptimize( filePath, basePath );
  test.identical( got, expected );
  test.identical( basePath, expected );

  test.case = 'revers order';
  var filePath =
  {
    'module2/amid' : `.`,
    'module2' : `.`,
    'module1/amid/dir2' : `.`,
    'module1/amid/dir/terminal' : `.`,
    'module1/amid/dir' : `.`,
    'module1/amid' : `.`,
    'module1/ami' : `.`,
    'module1' : `.`,
  }
  var basePath =
  {
    'module2/amid' : `.`,
    'module2' : `.`,
    'module1/amid/dir2' : `.`,
    'module1/amid/dir/terminal' : `.`,
    'module1/amid/dir' : `.`,
    'module1/amid' : `.`,
    'module1/ami' : `.`,
    'module1' : `.`,
  };
  var expected =
  {
    'module1' : '.',
    'module2' : '.',
  };
  var got = path.mapOptimize( filePath, basePath );
  test.identical( got, expected );
  test.identical( basePath, expected );

  test.case = 'no order';
  var filePath =
  {
    'module2/amid' : `.`,
    'module2' : `.`,
    'module1/amid' : `.`,
    'module1/amid/dir2' : `.`,
    'module1/amid/dir' : `.`,
    'module1/amid/dir/terminal' : `.`,
    'module1/ami' : `.`,
    'module1' : `.`,
  };
  var basePath =
  {
    'module2/amid' : `.`,
    'module2' : `.`,
    'module1/amid' : `.`,
    'module1/amid/dir2' : `.`,
    'module1/amid/dir' : `.`,
    'module1/amid/dir/terminal' : `.`,
    'module1/ami' : `.`,
    'module1' : `.`,
  };
  var expected =
  {
    'module1' : '.',
    'module2' : '.',
  };
  var got = path.mapOptimize( filePath, basePath );
  test.identical( got, expected );
  test.identical( basePath, expected );

  test.close( 'same keys in filePath and basePath, same order' );

  /* - */

  test.open( 'same keys in filePath and basePath, opposite order' );

  test.case = 'direct order';
  var filePath =
  {
    'module1' : `.`,
    'module1/ami' : `.`,
    'module1/amid' : `.`,
    'module1/amid/dir' : `.`,
    'module1/amid/dir/terminal' : `.`,
    'module1/amid/dir2' : `.`,
    'module2' : `.`,
    'module2/amid' : `.`,
  };
  var basePath =
  {
    'module2/amid' : `.`,
    'module2' : `.`,
    'module1/amid/dir2' : `.`,
    'module1/amid/dir/terminal' : `.`,
    'module1/amid/dir' : `.`,
    'module1/amid' : `.`,
    'module1/ami' : `.`,
    'module1' : `.`,
  };
  var expected =
  {
    'module1' : '.',
    'module2' : '.',
  };
  var got = path.mapOptimize( filePath, basePath );
  test.identical( got, expected );
  test.identical( basePath, expected );

  test.case = 'revers order';
  var filePath =
  {
    'module2/amid' : `.`,
    'module2' : `.`,
    'module1/amid/dir2' : `.`,
    'module1/amid/dir/terminal' : `.`,
    'module1/amid/dir' : `.`,
    'module1/amid' : `.`,
    'module1/ami' : `.`,
    'module1' : `.`,
  }
  var basePath =
  {
    'module1' : `.`,
    'module1/ami' : `.`,
    'module1/amid' : `.`,
    'module1/amid/dir' : `.`,
    'module1/amid/dir/terminal' : `.`,
    'module1/amid/dir2' : `.`,
    'module2' : `.`,
    'module2/amid' : `.`,
  };
  var expected =
  {
    'module1' : '.',
    'module2' : '.',
  };
  var got = path.mapOptimize( filePath, basePath );
  test.identical( got, expected );
  test.identical( basePath, expected );

  test.case = 'no order';
  var filePath =
  {
    'module2/amid' : `.`,
    'module2' : `.`,
    'module1/amid' : `.`,
    'module1/amid/dir2' : `.`,
    'module1/amid/dir' : `.`,
    'module1/amid/dir/terminal' : `.`,
    'module1/ami' : `.`,
    'module1' : `.`,
  };
  var basePath =
  {
    'module1' : `.`,
    'module1/ami' : `.`,
    'module1/amid' : `.`,
    'module1/amid/dir/terminal' : `.`,
    'module1/amid/dir' : `.`,
    'module1/amid/dir2' : `.`,
    'module2' : `.`,
    'module2/amid' : `.`,
  };
  var expected =
  {
    'module1' : '.',
    'module2' : '.',
  };
  var got = path.mapOptimize( filePath, basePath );
  test.identical( got, expected );
  test.identical( basePath, expected );

  test.close( 'same keys in filePath and basePath, opposite order' );

  /* - */

  test.open( 'different keys in filePath and basePath' );

  test.case = 'direct order';
  var filePath =
  {
    'module1' : `.`,
    'module1/ami' : `.`,
    'module1/amid' : `.`,
    'module1/amid/dir' : `.`,
    'module1/amid/dir/terminal' : `.`,
    'module1/amid/dir2' : `.`,
    'module2' : `.`,
    'module2/amid' : `.`,
  };
  var basePath =
  {
    'module4/amid' : `.`,
    'module4' : `.`,
    'module3/amid/dir2' : `.`,
    'module3/amid/dir/terminal' : `.`,
    'module3/amid/dir' : `.`,
    'module3/amid' : `.`,
    'module3/ami' : `.`,
    'module3' : `.`,
  };
  var expected =
  {
    'module1' : '.',
    'module2' : '.',
  };
  var expectedBase = _.entity.make( basePath );
  var got = path.mapOptimize( filePath, basePath );
  test.identical( got, expected );
  test.identical( basePath, expectedBase );

  test.case = 'revers order';
  var filePath =
  {
    'module2/amid' : `.`,
    'module2' : `.`,
    'module1/amid/dir2' : `.`,
    'module1/amid/dir/terminal' : `.`,
    'module1/amid/dir' : `.`,
    'module1/amid' : `.`,
    'module1/ami' : `.`,
    'module1' : `.`,
  }
  var basePath =
  {
    'module3' : `.`,
    'module3/ami' : `.`,
    'module3/amid' : `.`,
    'module3/amid/dir' : `.`,
    'module3/amid/dir/terminal' : `.`,
    'module3/amid/dir2' : `.`,
    'module4' : `.`,
    'module4/amid' : `.`,
  };
  var expected =
  {
    'module1' : '.',
    'module2' : '.',
  };
  var expectedBase = _.entity.make( basePath );
  var got = path.mapOptimize( filePath, basePath );
  test.identical( got, expected );
  test.identical( basePath, expectedBase );

  test.case = 'no order';
  var filePath =
  {
    'module2/amid' : `.`,
    'module2' : `.`,
    'module1/amid' : `.`,
    'module1/amid/dir2' : `.`,
    'module1/amid/dir' : `.`,
    'module1/amid/dir/terminal' : `.`,
    'module1/ami' : `.`,
    'module1' : `.`,
  };
  var basePath =
  {
    'module3' : `.`,
    'module3/ami' : `.`,
    'module3/amid' : `.`,
    'module3/amid/dir/terminal' : `.`,
    'module3/amid/dir' : `.`,
    'module3/amid/dir2' : `.`,
    'module4' : `.`,
    'module4/amid' : `.`,
  };
  var expected =
  {
    'module1' : '.',
    'module2' : '.',
  };
  var expectedBase = _.entity.make( basePath );
  var got = path.mapOptimize( filePath, basePath );
  test.identical( got, expected );
  test.identical( basePath, expectedBase );

  test.close( 'different keys in filePath and basePath' );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'without arguments';
  test.shouldThrowErrorSync( () => path.mapOptimize() );

  test.case = 'extra arguments';
  test.shouldThrowErrorSync( () => path.mapOptimize( '/path', { '/a' : 'b' }, 'extra' ) );

  test.case = 'wrong type of filePath';
  test.shouldThrowErrorSync( () => path.mapOptimize( new Set(), 'wrong' ) );

  test.case = 'wrong type of basePath';
  test.shouldThrowErrorSync( () => path.mapOptimize( '/path', 'wrong' ) );
}

//

function identical( test )
{

  test.case = 'primitive, identical';
  var src1 = 'abc';
  var src2 = 'abc';
  test.identical( _.path.map.identical( src1, src2 ), true );
  test.identical( _.path.map.identical( src2, src1 ), true );

  test.case = 'primitive, not identical';
  var src1 = 'abc';
  var src2 = 'abcd';
  test.identical( _.path.map.identical( src1, src2 ), false );
  test.identical( _.path.map.identical( src2, src1 ), false );

  test.case = 'map, identical';
  var src1 = { a : 'x' };
  var src2 = { a : 'x' };
  test.identical( _.path.map.identical( src1, src2 ), true );
  test.identical( _.path.map.identical( src2, src1 ), true );

  test.case = 'map, not identical, same keys';
  var src1 = { a : 'x' };
  var src2 = { a : 'y' };
  test.identical( _.path.map.identical( src1, src2 ), false );
  test.identical( _.path.map.identical( src2, src1 ), false );

  test.case = 'map, not identical, extra key';
  var src1 = { a : 'x' };
  var src2 = { a : 'x', b : 'y' };
  test.identical( _.path.map.identical( src1, src2 ), false );
  test.identical( _.path.map.identical( src2, src1 ), false );

  test.case = 'array, identical';
  var src1 = [ 'a', 'b' ];
  var src2 = [ 'a', 'b' ];
  test.identical( _.path.map.identical( src1, src2 ), true );
  test.identical( _.path.map.identical( src2, src1 ), true );

  test.case = 'array, not identical, same length';
  var src1 = [ 'a', 'b' ];
  var src2 = [ 'b', 'a' ];
  test.identical( _.path.map.identical( src1, src2 ), false );
  test.identical( _.path.map.identical( src2, src1 ), false );

  test.case = 'array, not identical, extra key';
  var src1 = [ 'a', 'b' ];
  var src2 = [ 'a', 'b', 'c' ];
  test.identical( _.path.map.identical( src1, src2 ), false );
  test.identical( _.path.map.identical( src2, src1 ), false );

  test.case = 'array.array, the same';
  var src1 = [ 'a', [ 'b' ] ];
  var src2 = [ 'a', [ 'b' ] ];
  test.identical( _.path.map.identical( src1, src2 ), false );
  test.identical( _.path.map.identical( src2, src1 ), false );

  test.case = 'array.array, not identical, same length';
  var src1 = [ 'a', [ 'b' ] ];
  var src2 = [ 'b', [ 'a' ] ];
  test.identical( _.path.map.identical( src1, src2 ), false );
  test.identical( _.path.map.identical( src2, src1 ), false );

  test.case = 'array.array.array, the same';
  var src1 = [ 'a', [ [ 'b' ] ] ];
  var src2 = [ 'a', [ [ 'b' ] ] ];
  test.identical( _.path.map.identical( src1, src2 ), false );
  test.identical( _.path.map.identical( src2, src1 ), false );

  test.case = 'array.array.map, the same';
  var src1 = [ 'a', [ { b : 2 } ] ];
  var src2 = [ 'a', [ { b : 2 } ] ];
  test.identical( _.path.map.identical( src1, src2 ), false );
  test.identical( _.path.map.identical( src2, src1 ), false );

  test.case = 'array.map, the same';
  var src1 = [ 'a', { 'b' : 'c' } ];
  var src2 = [ 'a', { 'b' : 'c' } ];
  test.identical( _.path.map.identical( src1, src2 ), false );
  test.identical( _.path.map.identical( src2, src1 ), false );

  test.case = 'array.map, not identical, same length';
  var src1 = [ 'a', { 'b' : 'c' } ];
  var src2 = [ 'b', { 'c' : 'b' } ];
  test.identical( _.path.map.identical( src1, src2 ), false );
  test.identical( _.path.map.identical( src2, src1 ), false );

  test.case = 'array.map.array, the same';
  var src1 = [ 'a', { 'b' : [ 'c' ] } ];
  var src2 = [ 'a', { 'b' : [ 'c' ] } ];
  test.identical( _.path.map.identical( src1, src2 ), false );
  test.identical( _.path.map.identical( src2, src1 ), false );

  test.case = 'array.map.map, the same';
  var src1 = [ 'a', { 'b' : { 'c' : 'd' } } ];
  var src2 = [ 'a', { 'b' : { 'c' : 'd' } } ];
  test.identical( _.path.map.identical( src1, src2 ), false );
  test.identical( _.path.map.identical( src2, src1 ), false );

  test.case = 'map.array, identical';
  var src1 = { a : 'x', b : [ 'a', 'b' ] };
  var src2 = { a : 'x', b : [ 'a', 'b' ] };
  test.identical( _.path.map.identical( src1, src2 ), true );
  test.identical( _.path.map.identical( src2, src1 ), true );

  test.case = 'map.array, not identical, same map, same length';
  var src1 = { a : 'x', b : [ 'a', 'b' ] };
  var src2 = { a : 'x', b : [ 'b', 'a' ] };
  test.identical( _.path.map.identical( src1, src2 ), false );
  test.identical( _.path.map.identical( src2, src1 ), false );

  test.case = 'map.array, not identical, same map, extra element in array';
  var src1 = { a : 'x', b : [ 'a', 'b' ] };
  var src2 = { a : 'x', b : [ 'a', 'b', 'c' ] };
  test.identical( _.path.map.identical( src1, src2 ), false );
  test.identical( _.path.map.identical( src2, src1 ), false );

  test.case = 'map.array, not identical, diff map';
  var src1 = { a : 'x', b : [ 'a', 'b' ] };
  var src2 = { a : 'x', b : [ 'a', 'b' ], c : 'x' };
  test.identical( _.path.map.identical( src1, src2 ), false );
  test.identical( _.path.map.identical( src2, src1 ), false );

  test.case = 'map.array.array, the same';
  var src1 = { a : 'x', b : [ [ 'a', 'b' ] ] };
  var src2 = { a : 'x', b : [ [ 'a', 'b' ] ] };
  test.identical( _.path.map.identical( src1, src2 ), false );
  test.identical( _.path.map.identical( src2, src1 ), false );

  test.case = 'map.array.map, the same';
  var src1 = { a : 'x', b : [ { 'a' : 'b' } ] };
  var src2 = { a : 'x', b : [ { 'a' : 'b' } ] };
  test.identical( _.path.map.identical( src1, src2 ), false );
  test.identical( _.path.map.identical( src2, src1 ), false );

  test.case = 'map.map, the same';
  var src1 = { a : 'x', b : { 'a' : 'b' } };
  var src2 = { a : 'x', b : { 'a' : 'b' } };
  test.identical( _.path.map.identical( src1, src2 ), false );
  test.identical( _.path.map.identical( src2, src1 ), false );

  test.case = 'map.map, not identical, same map, extra element in array';
  var src1 = { a : 'x', b : { 'a' : 'b' } };
  var src2 = { a : 'x', b : { 'a' : 'b', 'c' : 'd' } };
  test.identical( _.path.map.identical( src1, src2 ), false );
  test.identical( _.path.map.identical( src2, src1 ), false );

  test.case = 'map.map, not identical, diff map';
  var src1 = { a : 'x', b : { a : 'b' } };
  var src2 = { 'a' : 'x', 'b' : { 'a' : 'b' }, 'c' : 'd' };
  test.identical( _.path.map.identical( src1, src2 ), false );
  test.identical( _.path.map.identical( src2, src1 ), false );

  test.case = 'map.map.array, the same';
  var src1 = { a : 'x', b : { 'a' : [ 'b' ] } };
  var src2 = { a : 'x', b : { 'a' : [ 'b' ] } };
  test.identical( _.path.map.identical( src1, src2 ), false );
  test.identical( _.path.map.identical( src2, src1 ), false );

  test.case = 'map.map.map, the same';
  var src1 = { a : 'x', b : { 'a' : { 'b' : 'c' } } };
  var src2 = { a : 'x', b : { 'a' : { 'b' : 'c' } } };
  test.identical( _.path.map.identical( src1, src2 ), false );
  test.identical( _.path.map.identical( src2, src1 ), false );

  test.case = 'primitive, array';
  var src1 = 'abc';
  var src2 = [ 'abc' ];
  test.identical( _.path.map.identical( src1, src2 ), false );
  test.identical( _.path.map.identical( src2, src1 ), false );

  test.case = 'primitive, map';
  var src1 = 'abc';
  var src2 = { a : 'abc' };
  test.identical( _.path.map.identical( src1, src2 ), false );
  test.identical( _.path.map.identical( src2, src1 ), false );

  test.case = 'array, map';
  var src1 = [ 'abc' ];
  var src2 = { a : 'abc' };
  test.identical( _.path.map.identical( src1, src2 ), false );
  test.identical( _.path.map.identical( src2, src1 ), false );

  test.case = 'array, map with array';
  var src1 = [ 'abc' ];
  var src2 = { a : [ 'abc' ] };
  test.identical( _.path.map.identical( src1, src2 ), false );
  test.identical( _.path.map.identical( src2, src1 ), false );

  test.case = 'array, map with array and same key';
  var src1 = [ 'abc' ];
  var src2 = { '0' : 'abc' };
  test.identical( _.path.map.identical( src1, src2 ), false );
  test.identical( _.path.map.identical( src2, src1 ), false );

  /* qqq : extend please | aaa : Done. */
}

// --
// declare
// --

const Proto =
{

  name : 'Tools.l5.path.tools',
  silencing : 1,
  routineTimeOut : 30000,

  tests :
  {

    /* path map */

    /*
qqq : similar test routines ( for example filterPairs and filterPairsInplace )
      should have exactly the same test cases
      in the same order
*/

    filterPairs,
    filterDstPairs,
    filterPairsInplace,
    filterDstPairsInplace,

    filterPairs_,
    filterDstPairs_,
    filterPairsInplace_,
    filterDstPairsInplace_,
    filterPairsWithDst_,
    filterDstPairsWithDst_,

    filterInplace,
    filterDstInplace,
    filterInplaceExtendedCallbacks,
    filterDstInplaceExtendedCallbacks,

    filter,
    filterDst,
    filterExtendedCallbacks,
    filterDstExtendedCallbacks,

    filter_,
    filterDst_,
    filterInplace_,
    filterDstInplace_,
    filterWithDst_,
    filterDstWithDst_,

    isEmpty,
    mapExtend,
    mapSupplement,
    mapAppend,
    mapAppendExperiment,
    mapPrepend,
    mapsPair,

    simplify,
    simplifyDst,
    simplifyInplace,
    simplify_,
    simplifyInplace_,
    simplifyWithDst_,

    mapDstFromSrc,
    mapDstFromDst,
    mapSrcFromSrc,
    mapSrcFromDst,

    // etc

    traceToRoot,
    group,
    mapGroupByDst,
    // setOptimize,
    mapOptimize,
    identical,

  },

}

const Self = wTestSuite( Proto );
if( typeof module !== 'undefined' && !module.parent )
wTester.test( Self.name );

} )();
